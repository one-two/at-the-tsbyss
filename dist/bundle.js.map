{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/node_modules/process/browser.js","webpack:///./lib/color.js","webpack:///./lib/constants.js","webpack:///./lib/display/backend.js","webpack:///./lib/display/canvas.js","webpack:///./lib/display/display.js","webpack:///./lib/display/hex.js","webpack:///./lib/display/rect.js","webpack:///./lib/display/term.js","webpack:///./lib/display/tile.js","webpack:///./lib/engine.js","webpack:///./lib/eventqueue.js","webpack:///./lib/fov/discrete-shadowcasting.js","webpack:///./lib/fov/fov.js","webpack:///./lib/fov/index.js","webpack:///./lib/fov/precise-shadowcasting.js","webpack:///./lib/fov/recursive-shadowcasting.js","webpack:///./lib/index.js","webpack:///./lib/lighting.js","webpack:///./lib/map/arena.js","webpack:///./lib/map/cellular.js","webpack:///./lib/map/digger.js","webpack:///./lib/map/dividedmaze.js","webpack:///./lib/map/dungeon.js","webpack:///./lib/map/ellermaze.js","webpack:///./lib/map/features.js","webpack:///./lib/map/iceymaze.js","webpack:///./lib/map/index.js","webpack:///./lib/map/map.js","webpack:///./lib/map/rogue.js","webpack:///./lib/map/uniform.js","webpack:///./lib/noise/index.js","webpack:///./lib/noise/noise.js","webpack:///./lib/noise/simplex.js","webpack:///./lib/path/astar.js","webpack:///./lib/path/dijkstra.js","webpack:///./lib/path/index.js","webpack:///./lib/path/path.js","webpack:///./lib/rng.js","webpack:///./lib/scheduler/action.js","webpack:///./lib/scheduler/index.js","webpack:///./lib/scheduler/scheduler.js","webpack:///./lib/scheduler/simple.js","webpack:///./lib/scheduler/speed.js","webpack:///./lib/stringgenerator.js","webpack:///./lib/text.js","webpack:///./lib/util.js","webpack:///./logo/logo.ts","webpack:///./src/components/damageBlock.ts","webpack:///./src/components/equipment.ts","webpack:///./src/components/fighter.ts","webpack:///./src/components/skilllist.ts","webpack:///./src/content/itens/knife.ts","webpack:///./src/content/itens/sword.ts","webpack:///./src/content/monsters/fungi.ts","webpack:///./src/content/monsters/orc.ts","webpack:///./src/content/monsters/troll.ts","webpack:///./src/entity.ts","webpack:///./src/game.ts","webpack:///./src/glyph.ts","webpack:///./src/helper/createDamageBlock.ts","webpack:///./src/helper/createItens.ts","webpack:///./src/helper/createMonters.ts","webpack:///./src/helper/deathFunction.ts","webpack:///./src/helper/dungeonMaze.ts","webpack:///./src/helper/randFromLevel.ts","webpack:///./src/helper/randint.ts","webpack:///./src/map.ts","webpack:///./src/messages.ts","webpack:///./src/screens.ts","webpack:///./src/tiles.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;;ACvLtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACP;AACpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,mBAAmB,OAAO;AAC1B,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACO;AACP,mBAAmB,OAAO;AAC1B,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACO;AACP;AACA,mBAAmB,OAAO;AAC1B,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO;AACP,mBAAmB,OAAO;AAC1B,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACO;AACA;AACP;AACA,0BAA0B,+CAAG;AAC7B;AACA;AACA,mBAAmB,OAAO;AAC1B,yDAAyD,+CAAG;AAC5D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iCAAiC,sDAAK;AACtC,kBAAkB,kBAAkB;AACpC;AACO;AACP,iCAAiC,sDAAK;AACtC,eAAe,iBAAiB;AAChlTA;AAAA;AAAA;AAAA;AAAA;AAAO;AACA;AACA;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClKA;AAAA;AAAe;AACf,oBAAoB,aAAa;AACjC,yBAAyB,yBAAyB;AAClD;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAmC;AACpB,qBAAqB,mDAAO;AAC3C;AACA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C,oBAAoB,yBAAyB;AAC7C;AACA;AACA,2CAA2C,eAAe;AAC1D,wBAAwB,MAAM,GAAG,cAAc,KAAK,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACE;AACA;AACA;AACM;AAC6B;AAChE;AACA,WAAW,+CAAG;AACd,YAAY,gDAAI;AAChB,YAAY,gDAAI;AAChB,YAAY,gDAAI;AAChB;AACA;AACA,WAAW,2DAAa;AACxB,YAAY,4DAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACe;AACf,4BAA4B;AAC5B;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC,oBAAoB,qCAAqC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE,GAAG,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iDAAa;AAClC;AACA;AACA;AACA,qBAAqB,kDAAc;AACnC;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gDAAY;AACjC;AACA;AACA,qBAAqB,gDAAY;AACjC;AACA;AACA,qBAAqB,qDAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAI;AACnB,cAAc,+CAAG;AACjB,eAAe,gDAAI;AACnB,eAAe,gDAAI;;;;;;;;;;;;;ACnLnB;AAAA;AAAA;AAAA;AAAiC;AACA;AAClB,kBAAkB,kDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAiC;AAClB,mBAAmB,kDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAmC;AACE;AACrC;AACA,mBAAmB,GAAG,EAAE,EAAE,cAAc;AACxC;AACA;AACA,mBAAmB,GAAG,EAAE,EAAE,eAAe,GAAG,EAAE,EAAE,cAAc;AAC9D;AACA;AACA,mBAAmB,OAAO,EAAE,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA,cAAc,oDAAgB;AAC9B;AACA;AACA;AACA;AACA;AACe,mBAAmB,mDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gEAAgE;AACvF,2BAA2B,eAAe;AAC1C,mBAAmB,sDAAsD;AACzE;;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAiC;AAClB,mBAAmB,kDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzEA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAA2B;AACZ,oCAAoC,+CAAG;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAuC;AACvC;AACA;AACe;AACf,iDAAiD;AACjD;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kDAAI;AACxB,oBAAoB,kDAAI;AACxB,oBAAoB,kDAAI;AACxB,oBAAoB,kDAAI;AACxB;AACA;AACA;AACA,uBAAuB,kDAAI;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,kDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAgE;AACF;AACI;AACnD,gEAAC,CAAC,yFAAqB,EAAE,uFAAoB,EAAE,2FAAsB,EAAE,EAAC;;;;;;;;;;;;;ACHvF;AAAA;AAAA;AAA2B;AACZ,mCAAmC,+CAAG;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3GA;AAAA;AAAA;AAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,qCAAqC,+CAAG;AACvD;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACgB;AACQ;AACV;AACI;AACZ;AACA;AACI;AACF;AACF;AACI;AACuB;AACzC;AAC3B,aAAa,sCAAI;AACY;AAC7B,cAAc,uCAAK;AACQ;AAC3B,aAAa,sCAAI;;;;;;;;;;;;;ACjBxB;AAAA;AAAA;AAAoC;AACpC;AACA;AACA;AACA;AACe;AACf,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oDAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAU;AACtB;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7JA;AAAA;AAAA;AAA2B;AACZ,oBAAoB,+CAAG;AACtC;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACY;AACX;AAC5B;AACe,uBAAuB,+CAAG;AACzC,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAI;AACzB;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,2BAA2B,kBAAkB;AAC7C,mCAAmC,+CAAG;AACtC;AACA;AACA;AACA;AACA,yBAAyB,uCAAuC;AAChE,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+CAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,oCAAoC,+CAAG;AACvC;AACA;AACA;AACA;AACA,yCAAyC,+CAAG;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0BAA0B;AAC5C;;;;;;;;;;;;;ACtRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACY;AACnB;AACW;AACvC;AACA,YAAY,iDAAI;AAChB,gBAAgB,qDAAQ;AACxB;AACe,qBAAqB,mDAAO;AAC3C,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,iBAAiB;AAC5C,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8BAA8B;AAC/D;AACA;AACA;AACA;AACA,mBAAmB,iDAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAG;AACpB;AACA;AACA;AACA;AACA,0BAA0B,+CAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iDAAI;AACnC;AACA;AACA,+BAA+B,qDAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAI;AACzB,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAI;AACzB,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtMA;AAAA;AAAA;AAAA;AAA2B;AACC;AACb,0BAA0B,+CAAG;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAAG;AACnB,gBAAgB,+CAAG;AACnB;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA,oBAAoB,+CAAG;AACvB,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,+CAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAA2B;AACZ,sBAAsB,+CAAG;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC,oBAAoB,wBAAwB;AAC5C;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAA2B;AACC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,wBAAwB,+CAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,qCAAqC,+CAAG;AACxC;AACA;AACA;AACA,iCAAiC,+CAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,+CAA+C,+CAAG;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAA4B;AAC5B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+CAAG;AACvB;AACA;AACA,qBAAqB,+CAAG;AACxB;AACA,oCAAoC,+CAAG;AACvC;AACA;AACA;AACA,oCAAoC,+CAAG;AACvC;AACA;AACA;AACA,oCAAoC,+CAAG;AACvC;AACA;AACA;AACA,oCAAoC,+CAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+CAAG;AACvB;AACA;AACA,qBAAqB,+CAAG;AACxB,iCAAiC,+CAAG;AACpC,iCAAiC,+CAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+CAAG;AACvB;AACA;AACA,qBAAqB,+CAAG;AACxB;AACA;AACA,gCAAgC,+CAAG;AACnC,gCAAgC,+CAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,gBAAgB,iBAAiB;AACjC,cAAc,iBAAiB;AAC/B,iBAAiB,iBAAiB;AAClC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrQA;AAAA;AAAA;AAAA;AAA2B;AACC;AACb,uBAAuB,+CAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAG;AACvC,oCAAoC,+CAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAG;AACtC;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,uBAAuB,iBAAiB;AACxC,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,2BAA2B,+CAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACI;AACE;AACJ;AACM;AACI;AACN;AACN;AAChB,gEAAC,CAAC,wDAAK,EAAE,4DAAO,EAAE,8DAAQ,EAAE,0DAAM,EAAE,gEAAS,EAAE,oEAAW,EAAE,8DAAQ,EAAE,wDAAK,EAAE,EAAC;;;;;;;;;;;;;ACR7F;AAAA;AAAA;AAAgE;AAChE;AACe;AACf,wBAAwB,2DAAa,WAAW,4DAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACC;AACW;AACxB,oBAAoB,+CAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA,2BAA2B,8BAA8B;AACzD,oCAAoC,qFAAqF;AACzH;AACA;AACA;AACA;AACA,kBAAkB,+CAAG;AACrB,kBAAkB,+CAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+CAAG;AAC5B;AACA;AACA;AACA,6BAA6B,kDAAI;AACjC,6BAA6B,kDAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,8BAA8B,+CAAG;AACjC;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA,iCAAiC,+CAAG;AACpC;AACA;AACA;AACA,uCAAuC,kDAAI;AAC3C,uCAAuC,kDAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qCAAqC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAG;AAC3B,wBAAwB,+CAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+CAAG;AAC7C,0CAA0C,+CAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAI;AAC5B,wBAAwB,kDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,2BAA2B,QAAQ;AACnC;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrUA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACY;AACnB;AAC5B;AACe,sBAAsB,mDAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA,gCAAgC,+CAAG;AACnC;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzuBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA,+BAA+B,+CAAG;AAClC;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA,+BAA+B,qDAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzTA;AAAA;AAAmC;AACpB,gEAAC,CAAC,4DAAO,EAAE,EAAC;;;;;;;;;;;;;ACD3B;AAAA;AAAe;AACf;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACH;AACK;AACjC;AACA;AACe,sBAAsB,iDAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA,uBAAuB,+CAAG;AAC1B;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oDAAG;AACpB,iBAAiB,oDAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAA6B;AACd,oBAAoB,gDAAI;AACvC,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAA6B;AACd,uBAAuB,gDAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAqC;AACN;AAChB,gEAAC,CAAC,8DAAQ,EAAE,wDAAK,EAAE,EAAC;;;;;;;;;;;;;ACFnC;AAAA;AAAA;AAAuC;AACxB;AACf,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qBAAqB,kDAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAgD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,4FAA6B,EAAC;;;;;;;;;;;;;AC1F7C;AAAA;AAAA;AAAuC;AACxB,qBAAqB,qDAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAiC;AACF;AACE;AAClB,gEAAC,CAAC,0DAAM,EAAE,wDAAK,EAAE,0DAAM,EAAE,EAAC;;;;;;;;;;;;;ACHzC;AAAA;AAAA;AAA0C;AAC3B;AACf;AACA,0BAA0B,sDAAU;AACpC;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAuC;AACxB,qBAAqB,qDAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAuC;AACxB,oBAAoB,qDAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAA2B;AACZ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,yCAAyC,mBAAmB;AAC5D;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA2B,IAAI,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACP,kBAAkB;AAClB;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/game.ts\");\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import { clamp } from \"./util.js\";\r\nimport RNG from \"./rng.js\";\r\nexport function fromString(str) {\r\n    let cached, r;\r\n    if (str in CACHE) {\r\n        cached = CACHE[str];\r\n    }\r\n    else {\r\n        if (str.charAt(0) == \"#\") {\r\n            let matched = str.match(/[0-9a-f]/gi) || [];\r\n            let values = matched.map((x) => parseInt(x, 16));\r\n            if (values.length == 3) {\r\n                cached = values.map((x) => x * 17);\r\n            }\r\n            else {\r\n                for (let i = 0; i < 3; i++) {\r\n                    values[i + 1] += 16 * values[i];\r\n                    values.splice(i, 1);\r\n                }\r\n                cached = values;\r\n            }\r\n        }\r\n        else if ((r = str.match(/rgb\\(([0-9, ]+)\\)/i))) {\r\n            cached = r[1].split(/\\s*,\\s*/).map((x) => parseInt(x));\r\n        }\r\n        else {\r\n            cached = [0, 0, 0];\r\n        }\r\n        CACHE[str] = cached;\r\n    }\r\n    return cached.slice();\r\n}\r\nexport function add(color1, ...colors) {\r\n    let result = color1.slice();\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < colors.length; j++) {\r\n            result[i] += colors[j][i];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport function add_(color1, ...colors) {\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < colors.length; j++) {\r\n            color1[i] += colors[j][i];\r\n        }\r\n    }\r\n    return color1;\r\n}\r\nexport function multiply(color1, ...colors) {\r\n    let result = color1.slice();\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < colors.length; j++) {\r\n            result[i] *= colors[j][i] / 255;\r\n        }\r\n        result[i] = Math.round(result[i]);\r\n    }\r\n    return result;\r\n}\r\nexport function multiply_(color1, ...colors) {\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < colors.length; j++) {\r\n            color1[i] *= colors[j][i] / 255;\r\n        }\r\n        color1[i] = Math.round(color1[i]);\r\n    }\r\n    return color1;\r\n}\r\nexport function interpolate(color1, color2, factor = 0.5) {\r\n    let result = color1.slice();\r\n    for (let i = 0; i < 3; i++) {\r\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\r\n    }\r\n    return result;\r\n}\r\nexport const lerp = interpolate;\r\nexport function interpolateHSL(color1, color2, factor = 0.5) {\r\n    let hsl1 = rgb2hsl(color1);\r\n    let hsl2 = rgb2hsl(color2);\r\n    for (let i = 0; i < 3; i++) {\r\n        hsl1[i] += factor * (hsl2[i] - hsl1[i]);\r\n    }\r\n    return hsl2rgb(hsl1);\r\n}\r\nexport const lerpHSL = interpolateHSL;\r\nexport function randomize(color, diff) {\r\n    if (!(diff instanceof Array)) {\r\n        diff = Math.round(RNG.getNormal(0, diff));\r\n    }\r\n    let result = color.slice();\r\n    for (let i = 0; i < 3; i++) {\r\n        result[i] += (diff instanceof Array ? Math.round(RNG.getNormal(0, diff[i])) : diff);\r\n    }\r\n    return result;\r\n}\r\nexport function rgb2hsl(color) {\r\n    let r = color[0] / 255;\r\n    let g = color[1] / 255;\r\n    let b = color[2] / 255;\r\n    let max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n    let h = 0, s, l = (max + min) / 2;\r\n    if (max == min) {\r\n        s = 0;\r\n    }\r\n    else {\r\n        let d = max - min;\r\n        s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return [h, s, l];\r\n}\r\nfunction hue2rgb(p, q, t) {\r\n    if (t < 0)\r\n        t += 1;\r\n    if (t > 1)\r\n        t -= 1;\r\n    if (t < 1 / 6)\r\n        return p + (q - p) * 6 * t;\r\n    if (t < 1 / 2)\r\n        return q;\r\n    if (t < 2 / 3)\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n    return p;\r\n}\r\nexport function hsl2rgb(color) {\r\n    let l = color[2];\r\n    if (color[1] == 0) {\r\n        l = Math.round(l * 255);\r\n        return [l, l, l];\r\n    }\r\n    else {\r\n        let s = color[1];\r\n        let q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\r\n        let p = 2 * l - q;\r\n        let r = hue2rgb(p, q, color[0] + 1 / 3);\r\n        let g = hue2rgb(p, q, color[0]);\r\n        let b = hue2rgb(p, q, color[0] - 1 / 3);\r\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n    }\r\n}\r\nexport function toRGB(color) {\r\n    let clamped = color.map(x => clamp(x, 0, 255));\r\n    return `rgb(${clamped.join(\",\")})`;\r\n}\r\nexport function toHex(color) {\r\n    let clamped = color.map(x => clamp(x, 0, 255).toString(16).padStart(2, \"0\"));\r\n    return `#${clamped.join(\"\")}`;\r\n}\r\nconst CACHE = {\r\n    \"black\": [0, 0, 0],\r\n    \"navy\": [0, 0, 128],\r\n    \"darkblue\": [0, 0, 139],\r\n    \"mediumblue\": [0, 0, 205],\r\n    \"blue\": [0, 0, 255],\r\n    \"darkgreen\": [0, 100, 0],\r\n    \"green\": [0, 128, 0],\r\n    \"teal\": [0, 128, 128],\r\n    \"darkcyan\": [0, 139, 139],\r\n    \"deepskyblue\": [0, 191, 255],\r\n    \"darkturquoise\": [0, 206, 209],\r\n    \"mediumspringgreen\": [0, 250, 154],\r\n    \"lime\": [0, 255, 0],\r\n    \"springgreen\": [0, 255, 127],\r\n    \"aqua\": [0, 255, 255],\r\n    \"cyan\": [0, 255, 255],\r\n    \"midnightblue\": [25, 25, 112],\r\n    \"dodgerblue\": [30, 144, 255],\r\n    \"forestgreen\": [34, 139, 34],\r\n    \"seagreen\": [46, 139, 87],\r\n    \"darkslategray\": [47, 79, 79],\r\n    \"darkslategrey\": [47, 79, 79],\r\n    \"limegreen\": [50, 205, 50],\r\n    \"mediumseagreen\": [60, 179, 113],\r\n    \"turquoise\": [64, 224, 208],\r\n    \"royalblue\": [65, 105, 225],\r\n    \"steelblue\": [70, 130, 180],\r\n    \"darkslateblue\": [72, 61, 139],\r\n    \"mediumturquoise\": [72, 209, 204],\r\n    \"indigo\": [75, 0, 130],\r\n    \"darkolivegreen\": [85, 107, 47],\r\n    \"cadetblue\": [95, 158, 160],\r\n    \"cornflowerblue\": [100, 149, 237],\r\n    \"mediumaquamarine\": [102, 205, 170],\r\n    \"dimgray\": [105, 105, 105],\r\n    \"dimgrey\": [105, 105, 105],\r\n    \"slateblue\": [106, 90, 205],\r\n    \"olivedrab\": [107, 142, 35],\r\n    \"slategray\": [112, 128, 144],\r\n    \"slategrey\": [112, 128, 144],\r\n    \"lightslategray\": [119, 136, 153],\r\n    \"lightslategrey\": [119, 136, 153],\r\n    \"mediumslateblue\": [123, 104, 238],\r\n    \"lawngreen\": [124, 252, 0],\r\n    \"chartreuse\": [127, 255, 0],\r\n    \"aquamarine\": [127, 255, 212],\r\n    \"maroon\": [128, 0, 0],\r\n    \"purple\": [128, 0, 128],\r\n    \"olive\": [128, 128, 0],\r\n    \"gray\": [128, 128, 128],\r\n    \"grey\": [128, 128, 128],\r\n    \"skyblue\": [135, 206, 235],\r\n    \"lightskyblue\": [135, 206, 250],\r\n    \"blueviolet\": [138, 43, 226],\r\n    \"darkred\": [139, 0, 0],\r\n    \"darkmagenta\": [139, 0, 139],\r\n    \"saddlebrown\": [139, 69, 19],\r\n    \"darkseagreen\": [143, 188, 143],\r\n    \"lightgreen\": [144, 238, 144],\r\n    \"mediumpurple\": [147, 112, 216],\r\n    \"darkviolet\": [148, 0, 211],\r\n    \"palegreen\": [152, 251, 152],\r\n    \"darkorchid\": [153, 50, 204],\r\n    \"yellowgreen\": [154, 205, 50],\r\n    \"sienna\": [160, 82, 45],\r\n    \"brown\": [165, 42, 42],\r\n    \"darkgray\": [169, 169, 169],\r\n    \"darkgrey\": [169, 169, 169],\r\n    \"lightblue\": [173, 216, 230],\r\n    \"greenyellow\": [173, 255, 47],\r\n    \"paleturquoise\": [175, 238, 238],\r\n    \"lightsteelblue\": [176, 196, 222],\r\n    \"powderblue\": [176, 224, 230],\r\n    \"firebrick\": [178, 34, 34],\r\n    \"darkgoldenrod\": [184, 134, 11],\r\n    \"mediumorchid\": [186, 85, 211],\r\n    \"rosybrown\": [188, 143, 143],\r\n    \"darkkhaki\": [189, 183, 107],\r\n    \"silver\": [192, 192, 192],\r\n    \"mediumvioletred\": [199, 21, 133],\r\n    \"indianred\": [205, 92, 92],\r\n    \"peru\": [205, 133, 63],\r\n    \"chocolate\": [210, 105, 30],\r\n    \"tan\": [210, 180, 140],\r\n    \"lightgray\": [211, 211, 211],\r\n    \"lightgrey\": [211, 211, 211],\r\n    \"palevioletred\": [216, 112, 147],\r\n    \"thistle\": [216, 191, 216],\r\n    \"orchid\": [218, 112, 214],\r\n    \"goldenrod\": [218, 165, 32],\r\n    \"crimson\": [220, 20, 60],\r\n    \"gainsboro\": [220, 220, 220],\r\n    \"plum\": [221, 160, 221],\r\n    \"burlywood\": [222, 184, 135],\r\n    \"lightcyan\": [224, 255, 255],\r\n    \"lavender\": [230, 230, 250],\r\n    \"darksalmon\": [233, 150, 122],\r\n    \"violet\": [238, 130, 238],\r\n    \"palegoldenrod\": [238, 232, 170],\r\n    \"lightcoral\": [240, 128, 128],\r\n    \"khaki\": [240, 230, 140],\r\n    \"aliceblue\": [240, 248, 255],\r\n    \"honeydew\": [240, 255, 240],\r\n    \"azure\": [240, 255, 255],\r\n    \"sandybrown\": [244, 164, 96],\r\n    \"wheat\": [245, 222, 179],\r\n    \"beige\": [245, 245, 220],\r\n    \"whitesmoke\": [245, 245, 245],\r\n    \"mintcream\": [245, 255, 250],\r\n    \"ghostwhite\": [248, 248, 255],\r\n    \"salmon\": [250, 128, 114],\r\n    \"antiquewhite\": [250, 235, 215],\r\n    \"linen\": [250, 240, 230],\r\n    \"lightgoldenrodyellow\": [250, 250, 210],\r\n    \"oldlace\": [253, 245, 230],\r\n    \"red\": [255, 0, 0],\r\n    \"fuchsia\": [255, 0, 255],\r\n    \"magenta\": [255, 0, 255],\r\n    \"deeppink\": [255, 20, 147],\r\n    \"orangered\": [255, 69, 0],\r\n    \"tomato\": [255, 99, 71],\r\n    \"hotpink\": [255, 105, 180],\r\n    \"coral\": [255, 127, 80],\r\n    \"darkorange\": [255, 140, 0],\r\n    \"lightsalmon\": [255, 160, 122],\r\n    \"orange\": [255, 165, 0],\r\n    \"lightpink\": [255, 182, 193],\r\n    \"pink\": [255, 192, 203],\r\n    \"gold\": [255, 215, 0],\r\n    \"peachpuff\": [255, 218, 185],\r\n    \"navajowhite\": [255, 222, 173],\r\n    \"moccasin\": [255, 228, 181],\r\n    \"bisque\": [255, 228, 196],\r\n    \"mistyrose\": [255, 228, 225],\r\n    \"blanchedalmond\": [255, 235, 205],\r\n    \"papayawhip\": [255, 239, 213],\r\n    \"lavenderblush\": [255, 240, 245],\r\n    \"seashell\": [255, 245, 238],\r\n    \"cornsilk\": [255, 248, 220],\r\n    \"lemonchiffon\": [255, 250, 205],\r\n    \"floralwhite\": [255, 250, 240],\r\n    \"snow\": [255, 250, 250],\r\n    \"yellow\": [255, 255, 0],\r\n    \"lightyellow\": [255, 255, 224],\r\n    \"ivory\": [255, 255, 240],\r\n    \"white\": [255, 255, 255]\r\n};\r\n","export let DEFAULT_WIDTH = 80;\r\nexport let DEFAULT_HEIGHT = 25;\r\nexport const DIRS = {\r\n    4: [[0, -1], [1, 0], [0, 1], [-1, 0]],\r\n    8: [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]],\r\n    6: [[-1, -1], [1, -1], [2, 0], [1, 1], [-1, 1], [-2, 0]]\r\n};\r\nexport const KEYS = {\r\n    VK_CANCEL: 3,\r\n    VK_HELP: 6,\r\n    VK_BACK_SPACE: 8,\r\n    VK_TAB: 9,\r\n    VK_CLEAR: 12,\r\n    VK_RETURN: 13,\r\n    VK_ENTER: 14,\r\n    VK_SHIFT: 16,\r\n    VK_CONTROL: 17,\r\n    VK_ALT: 18,\r\n    VK_PAUSE: 19,\r\n    VK_CAPS_LOCK: 20,\r\n    VK_ESCAPE: 27,\r\n    VK_SPACE: 32,\r\n    VK_PAGE_UP: 33,\r\n    VK_PAGE_DOWN: 34,\r\n    VK_END: 35,\r\n    VK_HOME: 36,\r\n    VK_LEFT: 37,\r\n    VK_UP: 38,\r\n    VK_RIGHT: 39,\r\n    VK_DOWN: 40,\r\n    VK_PRINTSCREEN: 44,\r\n    VK_INSERT: 45,\r\n    VK_DELETE: 46,\r\n    VK_0: 48,\r\n    VK_1: 49,\r\n    VK_2: 50,\r\n    VK_3: 51,\r\n    VK_4: 52,\r\n    VK_5: 53,\r\n    VK_6: 54,\r\n    VK_7: 55,\r\n    VK_8: 56,\r\n    VK_9: 57,\r\n    VK_COLON: 58,\r\n    VK_SEMICOLON: 59,\r\n    VK_LESS_THAN: 60,\r\n    VK_EQUALS: 61,\r\n    VK_GREATER_THAN: 62,\r\n    VK_QUESTION_MARK: 63,\r\n    VK_AT: 64,\r\n    VK_A: 65,\r\n    VK_B: 66,\r\n    VK_C: 67,\r\n    VK_D: 68,\r\n    VK_E: 69,\r\n    VK_F: 70,\r\n    VK_G: 71,\r\n    VK_H: 72,\r\n    VK_I: 73,\r\n    VK_J: 74,\r\n    VK_K: 75,\r\n    VK_L: 76,\r\n    VK_M: 77,\r\n    VK_N: 78,\r\n    VK_O: 79,\r\n    VK_P: 80,\r\n    VK_Q: 81,\r\n    VK_R: 82,\r\n    VK_S: 83,\r\n    VK_T: 84,\r\n    VK_U: 85,\r\n    VK_V: 86,\r\n    VK_W: 87,\r\n    VK_X: 88,\r\n    VK_Y: 89,\r\n    VK_Z: 90,\r\n    VK_CONTEXT_MENU: 93,\r\n    VK_NUMPAD0: 96,\r\n    VK_NUMPAD1: 97,\r\n    VK_NUMPAD2: 98,\r\n    VK_NUMPAD3: 99,\r\n    VK_NUMPAD4: 100,\r\n    VK_NUMPAD5: 101,\r\n    VK_NUMPAD6: 102,\r\n    VK_NUMPAD7: 103,\r\n    VK_NUMPAD8: 104,\r\n    VK_NUMPAD9: 105,\r\n    VK_MULTIPLY: 106,\r\n    VK_ADD: 107,\r\n    VK_SEPARATOR: 108,\r\n    VK_SUBTRACT: 109,\r\n    VK_DECIMAL: 110,\r\n    VK_DIVIDE: 111,\r\n    VK_F1: 112,\r\n    VK_F2: 113,\r\n    VK_F3: 114,\r\n    VK_F4: 115,\r\n    VK_F5: 116,\r\n    VK_F6: 117,\r\n    VK_F7: 118,\r\n    VK_F8: 119,\r\n    VK_F9: 120,\r\n    VK_F10: 121,\r\n    VK_F11: 122,\r\n    VK_F12: 123,\r\n    VK_F13: 124,\r\n    VK_F14: 125,\r\n    VK_F15: 126,\r\n    VK_F16: 127,\r\n    VK_F17: 128,\r\n    VK_F18: 129,\r\n    VK_F19: 130,\r\n    VK_F20: 131,\r\n    VK_F21: 132,\r\n    VK_F22: 133,\r\n    VK_F23: 134,\r\n    VK_F24: 135,\r\n    VK_NUM_LOCK: 144,\r\n    VK_SCROLL_LOCK: 145,\r\n    VK_CIRCUMFLEX: 160,\r\n    VK_EXCLAMATION: 161,\r\n    VK_DOUBLE_QUOTE: 162,\r\n    VK_HASH: 163,\r\n    VK_DOLLAR: 164,\r\n    VK_PERCENT: 165,\r\n    VK_AMPERSAND: 166,\r\n    VK_UNDERSCORE: 167,\r\n    VK_OPEN_PAREN: 168,\r\n    VK_CLOSE_PAREN: 169,\r\n    VK_ASTERISK: 170,\r\n    VK_PLUS: 171,\r\n    VK_PIPE: 172,\r\n    VK_HYPHEN_MINUS: 173,\r\n    VK_OPEN_CURLY_BRACKET: 174,\r\n    VK_CLOSE_CURLY_BRACKET: 175,\r\n    VK_TILDE: 176,\r\n    VK_COMMA: 188,\r\n    VK_PERIOD: 190,\r\n    VK_SLASH: 191,\r\n    VK_BACK_QUOTE: 192,\r\n    VK_OPEN_BRACKET: 219,\r\n    VK_BACK_SLASH: 220,\r\n    VK_CLOSE_BRACKET: 221,\r\n    VK_QUOTE: 222,\r\n    VK_META: 224,\r\n    VK_ALTGR: 225,\r\n    VK_WIN: 91,\r\n    VK_KANA: 21,\r\n    VK_HANGUL: 21,\r\n    VK_EISU: 22,\r\n    VK_JUNJA: 23,\r\n    VK_FINAL: 24,\r\n    VK_HANJA: 25,\r\n    VK_KANJI: 25,\r\n    VK_CONVERT: 28,\r\n    VK_NONCONVERT: 29,\r\n    VK_ACCEPT: 30,\r\n    VK_MODECHANGE: 31,\r\n    VK_SELECT: 41,\r\n    VK_PRINT: 42,\r\n    VK_EXECUTE: 43,\r\n    VK_SLEEP: 95\r\n};\r\n","export default class Backend {\r\n    getContainer() { return null; }\r\n    setOptions(options) { this._options = options; }\r\n}\r\n","import Backend from \"./backend.js\";\r\nexport default class Canvas extends Backend {\r\n    constructor() {\r\n        super();\r\n        this._ctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n    }\r\n    schedule(cb) { requestAnimationFrame(cb); }\r\n    getContainer() { return this._ctx.canvas; }\r\n    setOptions(opts) {\r\n        super.setOptions(opts);\r\n        const style = (opts.fontStyle ? `${opts.fontStyle} ` : ``);\r\n        const font = `${style} ${opts.fontSize}px ${opts.fontFamily}`;\r\n        this._ctx.font = font;\r\n        this._updateSize();\r\n        this._ctx.font = font;\r\n        this._ctx.textAlign = \"center\";\r\n        this._ctx.textBaseline = \"middle\";\r\n    }\r\n    clear() {\r\n        this._ctx.fillStyle = this._options.bg;\r\n        this._ctx.fillRect(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\r\n    }\r\n    eventToPosition(x, y) {\r\n        let canvas = this._ctx.canvas;\r\n        let rect = canvas.getBoundingClientRect();\r\n        x -= rect.left;\r\n        y -= rect.top;\r\n        x *= canvas.width / rect.width;\r\n        y *= canvas.height / rect.height;\r\n        if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\r\n            return [-1, -1];\r\n        }\r\n        return this._normalizedEventToPosition(x, y);\r\n    }\r\n}\r\n","import Hex from \"./hex.js\";\r\nimport Rect from \"./rect.js\";\r\nimport Tile from \"./tile.js\";\r\nimport Term from \"./term.js\";\r\nimport * as Text from \"../text.js\";\r\nimport { DEFAULT_WIDTH, DEFAULT_HEIGHT } from \"../constants.js\";\r\nconst BACKENDS = {\r\n    \"hex\": Hex,\r\n    \"rect\": Rect,\r\n    \"tile\": Tile,\r\n    \"term\": Term\r\n};\r\nconst DEFAULT_OPTIONS = {\r\n    width: DEFAULT_WIDTH,\r\n    height: DEFAULT_HEIGHT,\r\n    transpose: false,\r\n    layout: \"rect\",\r\n    fontSize: 15,\r\n    spacing: 1,\r\n    border: 0,\r\n    forceSquareRatio: false,\r\n    fontFamily: \"monospace\",\r\n    fontStyle: \"\",\r\n    fg: \"#ccc\",\r\n    bg: \"#000\",\r\n    tileWidth: 32,\r\n    tileHeight: 32,\r\n    tileMap: {},\r\n    tileSet: null,\r\n    tileColorize: false\r\n};\r\nexport default class Display {\r\n    constructor(options = {}) {\r\n        this._data = {};\r\n        this._dirty = false;\r\n        this._options = {};\r\n        options = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        this.setOptions(options);\r\n        this.DEBUG = this.DEBUG.bind(this);\r\n        this._tick = this._tick.bind(this);\r\n        this._backend.schedule(this._tick);\r\n    }\r\n    DEBUG(x, y, what) {\r\n        let colors = [this._options.bg, this._options.fg];\r\n        this.draw(x, y, null, null, colors[what % colors.length]);\r\n    }\r\n    clear() {\r\n        this._data = {};\r\n        this._dirty = true;\r\n    }\r\n    setOptions(options) {\r\n        Object.assign(this._options, options);\r\n        if (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {\r\n            if (options.layout) {\r\n                let ctor = BACKENDS[options.layout];\r\n                this._backend = new ctor();\r\n            }\r\n            this._backend.setOptions(this._options);\r\n            this._dirty = true;\r\n        }\r\n        return this;\r\n    }\r\n    getOptions() { return this._options; }\r\n    getContainer() { return this._backend.getContainer(); }\r\n    computeSize(availWidth, availHeight) {\r\n        return this._backend.computeSize(availWidth, availHeight);\r\n    }\r\n    computeFontSize(availWidth, availHeight) {\r\n        return this._backend.computeFontSize(availWidth, availHeight);\r\n    }\r\n    computeTileSize(availWidth, availHeight) {\r\n        let width = Math.floor(availWidth / this._options.width);\r\n        let height = Math.floor(availHeight / this._options.height);\r\n        return [width, height];\r\n    }\r\n    eventToPosition(e) {\r\n        let x, y;\r\n        if (\"touches\" in e) {\r\n            x = e.touches[0].clientX;\r\n            y = e.touches[0].clientY;\r\n        }\r\n        else {\r\n            x = e.clientX;\r\n            y = e.clientY;\r\n        }\r\n        return this._backend.eventToPosition(x, y);\r\n    }\r\n    draw(x, y, ch, fg, bg) {\r\n        if (!fg) {\r\n            fg = this._options.fg;\r\n        }\r\n        if (!bg) {\r\n            bg = this._options.bg;\r\n        }\r\n        let key = `${x},${y}`;\r\n        this._data[key] = [x, y, ch, fg, bg];\r\n        if (this._dirty === true) {\r\n            return;\r\n        }\r\n        if (!this._dirty) {\r\n            this._dirty = {};\r\n        }\r\n        this._dirty[key] = true;\r\n    }\r\n    drawText(x, y, text, maxWidth) {\r\n        let fg = null;\r\n        let bg = null;\r\n        let cx = x;\r\n        let cy = y;\r\n        let lines = 1;\r\n        if (!maxWidth) {\r\n            maxWidth = this._options.width - x;\r\n        }\r\n        let tokens = Text.tokenize(text, maxWidth);\r\n        while (tokens.length) {\r\n            let token = tokens.shift();\r\n            switch (token.type) {\r\n                case Text.TYPE_TEXT:\r\n                    let isSpace = false, isPrevSpace = false, isFullWidth = false, isPrevFullWidth = false;\r\n                    for (let i = 0; i < token.value.length; i++) {\r\n                        let cc = token.value.charCodeAt(i);\r\n                        let c = token.value.charAt(i);\r\n                        isFullWidth = (cc > 0xff00 && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) || cc > 0xffee;\r\n                        isSpace = (c.charCodeAt(0) == 0x20 || c.charCodeAt(0) == 0x3000);\r\n                        if (isPrevFullWidth && !isFullWidth && !isSpace) {\r\n                            cx++;\r\n                        }\r\n                        if (isFullWidth && !isPrevSpace) {\r\n                            cx++;\r\n                        }\r\n                        this.draw(cx++, cy, c, fg, bg);\r\n                        isPrevSpace = isSpace;\r\n                        isPrevFullWidth = isFullWidth;\r\n                    }\r\n                    break;\r\n                case Text.TYPE_FG:\r\n                    fg = token.value || null;\r\n                    break;\r\n                case Text.TYPE_BG:\r\n                    bg = token.value || null;\r\n                    break;\r\n                case Text.TYPE_NEWLINE:\r\n                    cx = x;\r\n                    cy++;\r\n                    lines++;\r\n                    break;\r\n            }\r\n        }\r\n        return lines;\r\n    }\r\n    _tick() {\r\n        this._backend.schedule(this._tick);\r\n        if (!this._dirty) {\r\n            return;\r\n        }\r\n        if (this._dirty === true) {\r\n            this._backend.clear();\r\n            for (let id in this._data) {\r\n                this._draw(id, false);\r\n            }\r\n        }\r\n        else {\r\n            for (let key in this._dirty) {\r\n                this._draw(key, true);\r\n            }\r\n        }\r\n        this._dirty = false;\r\n    }\r\n    _draw(key, clearBefore) {\r\n        let data = this._data[key];\r\n        if (data[4] != this._options.bg) {\r\n            clearBefore = true;\r\n        }\r\n        this._backend.draw(data, clearBefore);\r\n    }\r\n}\r\nDisplay.Rect = Rect;\r\nDisplay.Hex = Hex;\r\nDisplay.Tile = Tile;\r\nDisplay.Term = Term;\r\n","import Canvas from \"./canvas.js\";\r\nimport { mod } from \"../util.js\";\r\nexport default class Hex extends Canvas {\r\n    constructor() {\r\n        super();\r\n        this._spacingX = 0;\r\n        this._spacingY = 0;\r\n        this._hexSize = 0;\r\n    }\r\n    draw(data, clearBefore) {\r\n        let [x, y, ch, fg, bg] = data;\r\n        let px = [\r\n            (x + 1) * this._spacingX,\r\n            y * this._spacingY + this._hexSize\r\n        ];\r\n        if (this._options.transpose) {\r\n            px.reverse();\r\n        }\r\n        if (clearBefore) {\r\n            this._ctx.fillStyle = bg;\r\n            this._fill(px[0], px[1]);\r\n        }\r\n        if (!ch) {\r\n            return;\r\n        }\r\n        this._ctx.fillStyle = fg;\r\n        let chars = [].concat(ch);\r\n        for (let i = 0; i < chars.length; i++) {\r\n            this._ctx.fillText(chars[i], px[0], Math.ceil(px[1]));\r\n        }\r\n    }\r\n    computeSize(availWidth, availHeight) {\r\n        if (this._options.transpose) {\r\n            availWidth += availHeight;\r\n            availHeight = availWidth - availHeight;\r\n            availWidth -= availHeight;\r\n        }\r\n        let width = Math.floor(availWidth / this._spacingX) - 1;\r\n        let height = Math.floor((availHeight - 2 * this._hexSize) / this._spacingY + 1);\r\n        return [width, height];\r\n    }\r\n    computeFontSize(availWidth, availHeight) {\r\n        if (this._options.transpose) {\r\n            availWidth += availHeight;\r\n            availHeight = availWidth - availHeight;\r\n            availWidth -= availHeight;\r\n        }\r\n        let hexSizeWidth = 2 * availWidth / ((this._options.width + 1) * Math.sqrt(3)) - 1;\r\n        let hexSizeHeight = availHeight / (2 + 1.5 * (this._options.height - 1));\r\n        let hexSize = Math.min(hexSizeWidth, hexSizeHeight);\r\n        let oldFont = this._ctx.font;\r\n        this._ctx.font = \"100px \" + this._options.fontFamily;\r\n        let width = Math.ceil(this._ctx.measureText(\"W\").width);\r\n        this._ctx.font = oldFont;\r\n        let ratio = width / 100;\r\n        hexSize = Math.floor(hexSize) + 1;\r\n        let fontSize = 2 * hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));\r\n        return Math.ceil(fontSize) - 1;\r\n    }\r\n    _normalizedEventToPosition(x, y) {\r\n        let nodeSize;\r\n        if (this._options.transpose) {\r\n            x += y;\r\n            y = x - y;\r\n            x -= y;\r\n            nodeSize = this._ctx.canvas.width;\r\n        }\r\n        else {\r\n            nodeSize = this._ctx.canvas.height;\r\n        }\r\n        let size = nodeSize / this._options.height;\r\n        y = Math.floor(y / size);\r\n        if (mod(y, 2)) {\r\n            x -= this._spacingX;\r\n            x = 1 + 2 * Math.floor(x / (2 * this._spacingX));\r\n        }\r\n        else {\r\n            x = 2 * Math.floor(x / (2 * this._spacingX));\r\n        }\r\n        return [x, y];\r\n    }\r\n    _fill(cx, cy) {\r\n        let a = this._hexSize;\r\n        let b = this._options.border;\r\n        const ctx = this._ctx;\r\n        ctx.beginPath();\r\n        if (this._options.transpose) {\r\n            ctx.moveTo(cx - a + b, cy);\r\n            ctx.lineTo(cx - a / 2 + b, cy + this._spacingX - b);\r\n            ctx.lineTo(cx + a / 2 - b, cy + this._spacingX - b);\r\n            ctx.lineTo(cx + a - b, cy);\r\n            ctx.lineTo(cx + a / 2 - b, cy - this._spacingX + b);\r\n            ctx.lineTo(cx - a / 2 + b, cy - this._spacingX + b);\r\n            ctx.lineTo(cx - a + b, cy);\r\n        }\r\n        else {\r\n            ctx.moveTo(cx, cy - a + b);\r\n            ctx.lineTo(cx + this._spacingX - b, cy - a / 2 + b);\r\n            ctx.lineTo(cx + this._spacingX - b, cy + a / 2 - b);\r\n            ctx.lineTo(cx, cy + a - b);\r\n            ctx.lineTo(cx - this._spacingX + b, cy + a / 2 - b);\r\n            ctx.lineTo(cx - this._spacingX + b, cy - a / 2 + b);\r\n            ctx.lineTo(cx, cy - a + b);\r\n        }\r\n        ctx.fill();\r\n    }\r\n    _updateSize() {\r\n        const opts = this._options;\r\n        const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\r\n        this._hexSize = Math.floor(opts.spacing * (opts.fontSize + charWidth / Math.sqrt(3)) / 2);\r\n        this._spacingX = this._hexSize * Math.sqrt(3) / 2;\r\n        this._spacingY = this._hexSize * 1.5;\r\n        let xprop;\r\n        let yprop;\r\n        if (opts.transpose) {\r\n            xprop = \"height\";\r\n            yprop = \"width\";\r\n        }\r\n        else {\r\n            xprop = \"width\";\r\n            yprop = \"height\";\r\n        }\r\n        this._ctx.canvas[xprop] = Math.ceil((opts.width + 1) * this._spacingX);\r\n        this._ctx.canvas[yprop] = Math.ceil((opts.height - 1) * this._spacingY + 2 * this._hexSize);\r\n    }\r\n}\r\n","import Canvas from \"./canvas.js\";\r\nexport default class Rect extends Canvas {\r\n    constructor() {\r\n        super();\r\n        this._spacingX = 0;\r\n        this._spacingY = 0;\r\n        this._canvasCache = {};\r\n    }\r\n    setOptions(options) {\r\n        super.setOptions(options);\r\n        this._canvasCache = {};\r\n    }\r\n    draw(data, clearBefore) {\r\n        if (Rect.cache) {\r\n            this._drawWithCache(data);\r\n        }\r\n        else {\r\n            this._drawNoCache(data, clearBefore);\r\n        }\r\n    }\r\n    _drawWithCache(data) {\r\n        let [x, y, ch, fg, bg] = data;\r\n        let hash = \"\" + ch + fg + bg;\r\n        let canvas;\r\n        if (hash in this._canvasCache) {\r\n            canvas = this._canvasCache[hash];\r\n        }\r\n        else {\r\n            let b = this._options.border;\r\n            canvas = document.createElement(\"canvas\");\r\n            let ctx = canvas.getContext(\"2d\");\r\n            canvas.width = this._spacingX;\r\n            canvas.height = this._spacingY;\r\n            ctx.fillStyle = bg;\r\n            ctx.fillRect(b, b, canvas.width - b, canvas.height - b);\r\n            if (ch) {\r\n                ctx.fillStyle = fg;\r\n                ctx.font = this._ctx.font;\r\n                ctx.textAlign = \"center\";\r\n                ctx.textBaseline = \"middle\";\r\n                let chars = [].concat(ch);\r\n                for (let i = 0; i < chars.length; i++) {\r\n                    ctx.fillText(chars[i], this._spacingX / 2, Math.ceil(this._spacingY / 2));\r\n                }\r\n            }\r\n            this._canvasCache[hash] = canvas;\r\n        }\r\n        this._ctx.drawImage(canvas, x * this._spacingX, y * this._spacingY);\r\n    }\r\n    _drawNoCache(data, clearBefore) {\r\n        let [x, y, ch, fg, bg] = data;\r\n        if (clearBefore) {\r\n            let b = this._options.border;\r\n            this._ctx.fillStyle = bg;\r\n            this._ctx.fillRect(x * this._spacingX + b, y * this._spacingY + b, this._spacingX - b, this._spacingY - b);\r\n        }\r\n        if (!ch) {\r\n            return;\r\n        }\r\n        this._ctx.fillStyle = fg;\r\n        let chars = [].concat(ch);\r\n        for (let i = 0; i < chars.length; i++) {\r\n            this._ctx.fillText(chars[i], (x + 0.5) * this._spacingX, Math.ceil((y + 0.5) * this._spacingY));\r\n        }\r\n    }\r\n    computeSize(availWidth, availHeight) {\r\n        let width = Math.floor(availWidth / this._spacingX);\r\n        let height = Math.floor(availHeight / this._spacingY);\r\n        return [width, height];\r\n    }\r\n    computeFontSize(availWidth, availHeight) {\r\n        let boxWidth = Math.floor(availWidth / this._options.width);\r\n        let boxHeight = Math.floor(availHeight / this._options.height);\r\n        let oldFont = this._ctx.font;\r\n        this._ctx.font = \"100px \" + this._options.fontFamily;\r\n        let width = Math.ceil(this._ctx.measureText(\"W\").width);\r\n        this._ctx.font = oldFont;\r\n        let ratio = width / 100;\r\n        let widthFraction = ratio * boxHeight / boxWidth;\r\n        if (widthFraction > 1) {\r\n            boxHeight = Math.floor(boxHeight / widthFraction);\r\n        }\r\n        return Math.floor(boxHeight / this._options.spacing);\r\n    }\r\n    _normalizedEventToPosition(x, y) {\r\n        return [Math.floor(x / this._spacingX), Math.floor(y / this._spacingY)];\r\n    }\r\n    _updateSize() {\r\n        const opts = this._options;\r\n        const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\r\n        this._spacingX = Math.ceil(opts.spacing * charWidth);\r\n        this._spacingY = Math.ceil(opts.spacing * opts.fontSize);\r\n        if (opts.forceSquareRatio) {\r\n            this._spacingX = this._spacingY = Math.max(this._spacingX, this._spacingY);\r\n        }\r\n        this._ctx.canvas.width = opts.width * this._spacingX;\r\n        this._ctx.canvas.height = opts.height * this._spacingY;\r\n    }\r\n}\r\nRect.cache = false;\r\n","import Backend from \"./backend.js\";\r\nimport * as Color from \"../color.js\";\r\nfunction clearToAnsi(bg) {\r\n    return `\\x1b[0;48;5;${termcolor(bg)}m\\x1b[2J`;\r\n}\r\nfunction colorToAnsi(fg, bg) {\r\n    return `\\x1b[0;38;5;${termcolor(fg)};48;5;${termcolor(bg)}m`;\r\n}\r\nfunction positionToAnsi(x, y) {\r\n    return `\\x1b[${y + 1};${x + 1}H`;\r\n}\r\nfunction termcolor(color) {\r\n    const SRC_COLORS = 256.0;\r\n    const DST_COLORS = 6.0;\r\n    const COLOR_RATIO = DST_COLORS / SRC_COLORS;\r\n    let rgb = Color.fromString(color);\r\n    let r = Math.floor(rgb[0] * COLOR_RATIO);\r\n    let g = Math.floor(rgb[1] * COLOR_RATIO);\r\n    let b = Math.floor(rgb[2] * COLOR_RATIO);\r\n    return r * 36 + g * 6 + b * 1 + 16;\r\n}\r\nexport default class Term extends Backend {\r\n    constructor() {\r\n        super();\r\n        this._offset = [0, 0];\r\n        this._cursor = [-1, -1];\r\n        this._lastColor = \"\";\r\n    }\r\n    schedule(cb) { setTimeout(cb, 1000 / 60); }\r\n    setOptions(options) {\r\n        super.setOptions(options);\r\n        let size = [options.width, options.height];\r\n        let avail = this.computeSize();\r\n        this._offset = avail.map((val, index) => Math.floor((val - size[index]) / 2));\r\n    }\r\n    clear() {\r\n        process.stdout.write(clearToAnsi(this._options.bg));\r\n    }\r\n    draw(data, clearBefore) {\r\n        let [x, y, ch, fg, bg] = data;\r\n        let dx = this._offset[0] + x;\r\n        let dy = this._offset[1] + y;\r\n        let size = this.computeSize();\r\n        if (dx < 0 || dx >= size[0]) {\r\n            return;\r\n        }\r\n        if (dy < 0 || dy >= size[1]) {\r\n            return;\r\n        }\r\n        if (dx !== this._cursor[0] || dy !== this._cursor[1]) {\r\n            process.stdout.write(positionToAnsi(dx, dy));\r\n            this._cursor[0] = dx;\r\n            this._cursor[1] = dy;\r\n        }\r\n        if (clearBefore) {\r\n            if (!ch) {\r\n                ch = \" \";\r\n            }\r\n        }\r\n        if (!ch) {\r\n            return;\r\n        }\r\n        let newColor = colorToAnsi(fg, bg);\r\n        if (newColor !== this._lastColor) {\r\n            process.stdout.write(newColor);\r\n            this._lastColor = newColor;\r\n        }\r\n        let chars = [].concat(ch);\r\n        process.stdout.write(chars[0]);\r\n        this._cursor[0]++;\r\n        if (this._cursor[0] >= size[0]) {\r\n            this._cursor[0] = 0;\r\n            this._cursor[1]++;\r\n        }\r\n    }\r\n    computeFontSize() { throw new Error(\"Terminal backend has no notion of font size\"); }\r\n    eventToPosition(x, y) { return [x, y]; }\r\n    computeSize() { return [process.stdout.columns, process.stdout.rows]; }\r\n}\r\n","import Canvas from \"./canvas.js\";\r\nexport default class Tile extends Canvas {\r\n    constructor() {\r\n        super();\r\n        this._colorCanvas = document.createElement(\"canvas\");\r\n    }\r\n    draw(data, clearBefore) {\r\n        let [x, y, ch, fg, bg] = data;\r\n        let tileWidth = this._options.tileWidth;\r\n        let tileHeight = this._options.tileHeight;\r\n        if (clearBefore) {\r\n            if (this._options.tileColorize) {\r\n                this._ctx.clearRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\r\n            }\r\n            else {\r\n                this._ctx.fillStyle = bg;\r\n                this._ctx.fillRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\r\n            }\r\n        }\r\n        if (!ch) {\r\n            return;\r\n        }\r\n        let chars = [].concat(ch);\r\n        let fgs = [].concat(fg);\r\n        let bgs = [].concat(bg);\r\n        for (let i = 0; i < chars.length; i++) {\r\n            let tile = this._options.tileMap[chars[i]];\r\n            if (!tile) {\r\n                throw new Error(`Char \"${chars[i]}\" not found in tileMap`);\r\n            }\r\n            if (this._options.tileColorize) {\r\n                let canvas = this._colorCanvas;\r\n                let context = canvas.getContext(\"2d\");\r\n                context.globalCompositeOperation = \"source-over\";\r\n                context.clearRect(0, 0, tileWidth, tileHeight);\r\n                let fg = fgs[i];\r\n                let bg = bgs[i];\r\n                context.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, 0, 0, tileWidth, tileHeight);\r\n                if (fg != \"transparent\") {\r\n                    context.fillStyle = fg;\r\n                    context.globalCompositeOperation = \"source-atop\";\r\n                    context.fillRect(0, 0, tileWidth, tileHeight);\r\n                }\r\n                if (bg != \"transparent\") {\r\n                    context.fillStyle = bg;\r\n                    context.globalCompositeOperation = \"destination-over\";\r\n                    context.fillRect(0, 0, tileWidth, tileHeight);\r\n                }\r\n                this._ctx.drawImage(canvas, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\r\n            }\r\n            else {\r\n                this._ctx.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\r\n            }\r\n        }\r\n    }\r\n    computeSize(availWidth, availHeight) {\r\n        let width = Math.floor(availWidth / this._options.tileWidth);\r\n        let height = Math.floor(availHeight / this._options.tileHeight);\r\n        return [width, height];\r\n    }\r\n    computeFontSize() {\r\n        throw new Error(\"Tile backend does not understand font size\");\r\n    }\r\n    _normalizedEventToPosition(x, y) {\r\n        return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\r\n    }\r\n    _updateSize() {\r\n        const opts = this._options;\r\n        this._ctx.canvas.width = opts.width * opts.tileWidth;\r\n        this._ctx.canvas.height = opts.height * opts.tileHeight;\r\n        this._colorCanvas.width = opts.tileWidth;\r\n        this._colorCanvas.height = opts.tileHeight;\r\n    }\r\n}\r\n","export default class Engine {\r\n    constructor(scheduler) {\r\n        this._scheduler = scheduler;\r\n        this._lock = 1;\r\n    }\r\n    start() { return this.unlock(); }\r\n    lock() {\r\n        this._lock++;\r\n        return this;\r\n    }\r\n    unlock() {\r\n        if (!this._lock) {\r\n            throw new Error(\"Cannot unlock unlocked engine\");\r\n        }\r\n        this._lock--;\r\n        while (!this._lock) {\r\n            let actor = this._scheduler.next();\r\n            if (!actor) {\r\n                return this.lock();\r\n            }\r\n            let result = actor.act();\r\n            if (result && result.then) {\r\n                this.lock();\r\n                result.then(this.unlock.bind(this));\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","export default class EventQueue {\r\n    constructor() {\r\n        this._time = 0;\r\n        this._events = [];\r\n        this._eventTimes = [];\r\n    }\r\n    getTime() { return this._time; }\r\n    clear() {\r\n        this._events = [];\r\n        this._eventTimes = [];\r\n        return this;\r\n    }\r\n    add(event, time) {\r\n        let index = this._events.length;\r\n        for (let i = 0; i < this._eventTimes.length; i++) {\r\n            if (this._eventTimes[i] > time) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        this._events.splice(index, 0, event);\r\n        this._eventTimes.splice(index, 0, time);\r\n    }\r\n    get() {\r\n        if (!this._events.length) {\r\n            return null;\r\n        }\r\n        let time = this._eventTimes.splice(0, 1)[0];\r\n        if (time > 0) {\r\n            this._time += time;\r\n            for (let i = 0; i < this._eventTimes.length; i++) {\r\n                this._eventTimes[i] -= time;\r\n            }\r\n        }\r\n        return this._events.splice(0, 1)[0];\r\n    }\r\n    getEventTime(event) {\r\n        let index = this._events.indexOf(event);\r\n        if (index == -1) {\r\n            return undefined;\r\n        }\r\n        return this._eventTimes[index];\r\n    }\r\n    remove(event) {\r\n        let index = this._events.indexOf(event);\r\n        if (index == -1) {\r\n            return false;\r\n        }\r\n        this._remove(index);\r\n        return true;\r\n    }\r\n    ;\r\n    _remove(index) {\r\n        this._events.splice(index, 1);\r\n        this._eventTimes.splice(index, 1);\r\n    }\r\n    ;\r\n}\r\n","import FOV from \"./fov.js\";\r\nexport default class DiscreteShadowcasting extends FOV {\r\n    compute(x, y, R, callback) {\r\n        callback(x, y, 0, 1);\r\n        if (!this._lightPasses(x, y)) {\r\n            return;\r\n        }\r\n        let DATA = [];\r\n        let A, B, cx, cy, blocks;\r\n        for (let r = 1; r <= R; r++) {\r\n            let neighbors = this._getCircle(x, y, r);\r\n            let angle = 360 / neighbors.length;\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                cx = neighbors[i][0];\r\n                cy = neighbors[i][1];\r\n                A = angle * (i - 0.5);\r\n                B = A + angle;\r\n                blocks = !this._lightPasses(cx, cy);\r\n                if (this._visibleCoords(Math.floor(A), Math.ceil(B), blocks, DATA)) {\r\n                    callback(cx, cy, r, 1);\r\n                }\r\n                if (DATA.length == 2 && DATA[0] == 0 && DATA[1] == 360) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _visibleCoords(A, B, blocks, DATA) {\r\n        if (A < 0) {\r\n            let v1 = this._visibleCoords(0, B, blocks, DATA);\r\n            let v2 = this._visibleCoords(360 + A, 360, blocks, DATA);\r\n            return v1 || v2;\r\n        }\r\n        let index = 0;\r\n        while (index < DATA.length && DATA[index] < A) {\r\n            index++;\r\n        }\r\n        if (index == DATA.length) {\r\n            if (blocks) {\r\n                DATA.push(A, B);\r\n            }\r\n            return true;\r\n        }\r\n        let count = 0;\r\n        if (index % 2) {\r\n            while (index < DATA.length && DATA[index] < B) {\r\n                index++;\r\n                count++;\r\n            }\r\n            if (count == 0) {\r\n                return false;\r\n            }\r\n            if (blocks) {\r\n                if (count % 2) {\r\n                    DATA.splice(index - count, count, B);\r\n                }\r\n                else {\r\n                    DATA.splice(index - count, count);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            while (index < DATA.length && DATA[index] < B) {\r\n                index++;\r\n                count++;\r\n            }\r\n            if (A == DATA[index - count] && count == 1) {\r\n                return false;\r\n            }\r\n            if (blocks) {\r\n                if (count % 2) {\r\n                    DATA.splice(index - count, count, A);\r\n                }\r\n                else {\r\n                    DATA.splice(index - count, count, A, B);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","import { DIRS } from \"../constants.js\";\r\n;\r\n;\r\nexport default class FOV {\r\n    constructor(lightPassesCallback, options = {}) {\r\n        this._lightPasses = lightPassesCallback;\r\n        this._options = Object.assign({ topology: 8 }, options);\r\n    }\r\n    _getCircle(cx, cy, r) {\r\n        let result = [];\r\n        let dirs, countFactor, startOffset;\r\n        switch (this._options.topology) {\r\n            case 4:\r\n                countFactor = 1;\r\n                startOffset = [0, 1];\r\n                dirs = [\r\n                    DIRS[8][7],\r\n                    DIRS[8][1],\r\n                    DIRS[8][3],\r\n                    DIRS[8][5]\r\n                ];\r\n                break;\r\n            case 6:\r\n                dirs = DIRS[6];\r\n                countFactor = 1;\r\n                startOffset = [-1, 1];\r\n                break;\r\n            case 8:\r\n                dirs = DIRS[4];\r\n                countFactor = 2;\r\n                startOffset = [-1, 1];\r\n                break;\r\n            default:\r\n                throw new Error(\"Incorrect topology for FOV computation\");\r\n                break;\r\n        }\r\n        let x = cx + startOffset[0] * r;\r\n        let y = cy + startOffset[1] * r;\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            for (let j = 0; j < r * countFactor; j++) {\r\n                result.push([x, y]);\r\n                x += dirs[i][0];\r\n                y += dirs[i][1];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import DiscreteShadowcasting from \"./discrete-shadowcasting.js\";\r\nimport PreciseShadowcasting from \"./precise-shadowcasting.js\";\r\nimport RecursiveShadowcasting from \"./recursive-shadowcasting.js\";\r\nexport default { DiscreteShadowcasting, PreciseShadowcasting, RecursiveShadowcasting };\r\n","import FOV from \"./fov.js\";\r\nexport default class PreciseShadowcasting extends FOV {\r\n    compute(x, y, R, callback) {\r\n        callback(x, y, 0, 1);\r\n        if (!this._lightPasses(x, y)) {\r\n            return;\r\n        }\r\n        let SHADOWS = [];\r\n        let cx, cy, blocks, A1, A2, visibility;\r\n        for (let r = 1; r <= R; r++) {\r\n            let neighbors = this._getCircle(x, y, r);\r\n            let neighborCount = neighbors.length;\r\n            for (let i = 0; i < neighborCount; i++) {\r\n                cx = neighbors[i][0];\r\n                cy = neighbors[i][1];\r\n                A1 = [i ? 2 * i - 1 : 2 * neighborCount - 1, 2 * neighborCount];\r\n                A2 = [2 * i + 1, 2 * neighborCount];\r\n                blocks = !this._lightPasses(cx, cy);\r\n                visibility = this._checkVisibility(A1, A2, blocks, SHADOWS);\r\n                //if (visibility) {\r\n                    callback(cx, cy, r, visibility);\r\n                //}\r\n                if (SHADOWS.length == 2 && SHADOWS[0][0] == 0 && SHADOWS[1][0] == SHADOWS[1][1]) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _checkVisibility(A1, A2, blocks, SHADOWS) {\r\n        if (A1[0] > A2[0]) {\r\n            let v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);\r\n            let v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);\r\n            return (v1 + v2) / 2;\r\n        }\r\n        let index1 = 0, edge1 = false;\r\n        while (index1 < SHADOWS.length) {\r\n            let old = SHADOWS[index1];\r\n            let diff = old[0] * A1[1] - A1[0] * old[1];\r\n            if (diff >= 0) {\r\n                if (diff == 0 && !(index1 % 2)) {\r\n                    edge1 = true;\r\n                }\r\n                break;\r\n            }\r\n            index1++;\r\n        }\r\n        let index2 = SHADOWS.length, edge2 = false;\r\n        while (index2--) {\r\n            let old = SHADOWS[index2];\r\n            let diff = A2[0] * old[1] - old[0] * A2[1];\r\n            if (diff >= 0) {\r\n                if (diff == 0 && (index2 % 2)) {\r\n                    edge2 = true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        let visible = true;\r\n        if (index1 == index2 && (edge1 || edge2)) {\r\n            visible = false;\r\n        }\r\n        else if (edge1 && edge2 && index1 + 1 == index2 && (index2 % 2)) {\r\n            visible = false;\r\n        }\r\n        else if (index1 > index2 && (index1 % 2)) {\r\n            visible = false;\r\n        }\r\n        if (!visible) {\r\n            return 0;\r\n        }\r\n        let visibleLength;\r\n        let remove = index2 - index1 + 1;\r\n        if (remove % 2) {\r\n            if (index1 % 2) {\r\n                let P = SHADOWS[index1];\r\n                visibleLength = (A2[0] * P[1] - P[0] * A2[1]) / (P[1] * A2[1]);\r\n                if (blocks) {\r\n                    SHADOWS.splice(index1, remove, A2);\r\n                }\r\n            }\r\n            else {\r\n                let P = SHADOWS[index2];\r\n                visibleLength = (P[0] * A1[1] - A1[0] * P[1]) / (A1[1] * P[1]);\r\n                if (blocks) {\r\n                    SHADOWS.splice(index1, remove, A1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (index1 % 2) {\r\n                let P1 = SHADOWS[index1];\r\n                let P2 = SHADOWS[index2];\r\n                visibleLength = (P2[0] * P1[1] - P1[0] * P2[1]) / (P1[1] * P2[1]);\r\n                if (blocks) {\r\n                    SHADOWS.splice(index1, remove);\r\n                }\r\n            }\r\n            else {\r\n                if (blocks) {\r\n                    SHADOWS.splice(index1, remove, A1, A2);\r\n                }\r\n                return 1;\r\n            }\r\n        }\r\n        let arcLength = (A2[0] * A1[1] - A1[0] * A2[1]) / (A1[1] * A2[1]);\r\n        return visibleLength / arcLength;\r\n    }\r\n}\r\n","import FOV from \"./fov.js\";\r\nconst OCTANTS = [\r\n    [-1, 0, 0, 1],\r\n    [0, -1, 1, 0],\r\n    [0, -1, -1, 0],\r\n    [-1, 0, 0, -1],\r\n    [1, 0, 0, -1],\r\n    [0, 1, -1, 0],\r\n    [0, 1, 1, 0],\r\n    [1, 0, 0, 1]\r\n];\r\nexport default class RecursiveShadowcasting extends FOV {\r\n    compute(x, y, R, callback) {\r\n        callback(x, y, 0, 1);\r\n        for (let i = 0; i < OCTANTS.length; i++) {\r\n            this._renderOctant(x, y, OCTANTS[i], R, callback);\r\n        }\r\n    }\r\n    compute180(x, y, R, dir, callback) {\r\n        callback(x, y, 0, 1);\r\n        let previousOctant = (dir - 1 + 8) % 8;\r\n        let nextPreviousOctant = (dir - 2 + 8) % 8;\r\n        let nextOctant = (dir + 1 + 8) % 8;\r\n        this._renderOctant(x, y, OCTANTS[nextPreviousOctant], R, callback);\r\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\r\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\r\n        this._renderOctant(x, y, OCTANTS[nextOctant], R, callback);\r\n    }\r\n    ;\r\n    compute90(x, y, R, dir, callback) {\r\n        callback(x, y, 0, 1);\r\n        let previousOctant = (dir - 1 + 8) % 8;\r\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\r\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\r\n    }\r\n    _renderOctant(x, y, octant, R, callback) {\r\n        this._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);\r\n    }\r\n    _castVisibility(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {\r\n        if (visSlopeStart < visSlopeEnd) {\r\n            return;\r\n        }\r\n        for (let i = row; i <= radius; i++) {\r\n            let dx = -i - 1;\r\n            let dy = -i;\r\n            let blocked = false;\r\n            let newStart = 0;\r\n            while (dx <= 0) {\r\n                dx += 1;\r\n                let mapX = startX + dx * xx + dy * xy;\r\n                let mapY = startY + dx * yx + dy * yy;\r\n                let slopeStart = (dx - 0.5) / (dy + 0.5);\r\n                let slopeEnd = (dx + 0.5) / (dy - 0.5);\r\n                if (slopeEnd > visSlopeStart) {\r\n                    continue;\r\n                }\r\n                if (slopeStart < visSlopeEnd) {\r\n                    break;\r\n                }\r\n                if ((dx * dx + dy * dy) < (radius * radius)) {\r\n                    callback(mapX, mapY, i, 1);\r\n                }\r\n                if (!blocked) {\r\n                    if (!this._lightPasses(mapX, mapY) && i < radius) {\r\n                        blocked = true;\r\n                        this._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);\r\n                        newStart = slopeEnd;\r\n                    }\r\n                }\r\n                else {\r\n                    if (!this._lightPasses(mapX, mapY)) {\r\n                        newStart = slopeEnd;\r\n                        continue;\r\n                    }\r\n                    blocked = false;\r\n                    visSlopeStart = newStart;\r\n                }\r\n            }\r\n            if (blocked) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","export { default as RNG } from \"./rng.js\";\r\nexport { default as Display } from \"./display/display.js\";\r\nexport { default as StringGenerator } from \"./stringgenerator.js\";\r\nexport { default as EventQueue } from \"./eventqueue.js\";\r\nexport { default as Scheduler } from \"./scheduler/index.js\";\r\nexport { default as FOV } from \"./fov/index.js\";\r\nexport { default as Map } from \"./map/index.js\";\r\nexport { default as Noise } from \"./noise/index.js\";\r\nexport { default as Path } from \"./path/index.js\";\r\nexport { default as Engine } from \"./engine.js\";\r\nexport { default as Lighting } from \"./lighting.js\";\r\nexport { DEFAULT_WIDTH, DEFAULT_HEIGHT, DIRS, KEYS } from \"./constants.js\";\r\nimport * as util from \"./util.js\";\r\nexport const Util = util;\r\nimport * as color from \"./color.js\";\r\nexport const Color = color;\r\nimport * as text from \"./text.js\";\r\nexport const Text = text;\r\n","import * as Color from \"./color.js\";\r\n;\r\n;\r\n;\r\n;\r\nexport default class Lighting {\r\n    constructor(reflectivityCallback, options = {}) {\r\n        this._reflectivityCallback = reflectivityCallback;\r\n        this._options = {};\r\n        options = Object.assign({\r\n            passes: 1,\r\n            emissionThreshold: 100,\r\n            range: 10\r\n        }, options);\r\n        this._lights = {};\r\n        this._reflectivityCache = {};\r\n        this._fovCache = {};\r\n        this.setOptions(options);\r\n    }\r\n    setOptions(options) {\r\n        Object.assign(this._options, options);\r\n        if (options && options.range) {\r\n            this.reset();\r\n        }\r\n        return this;\r\n    }\r\n    setFOV(fov) {\r\n        this._fov = fov;\r\n        this._fovCache = {};\r\n        return this;\r\n    }\r\n    setLight(x, y, color) {\r\n        let key = x + \",\" + y;\r\n        if (color) {\r\n            this._lights[key] = (typeof (color) == \"string\" ? Color.fromString(color) : color);\r\n        }\r\n        else {\r\n            delete this._lights[key];\r\n        }\r\n        return this;\r\n    }\r\n    clearLights() { this._lights = {}; }\r\n    reset() {\r\n        this._reflectivityCache = {};\r\n        this._fovCache = {};\r\n        return this;\r\n    }\r\n    compute(lightingCallback) {\r\n        let doneCells = {};\r\n        let emittingCells = {};\r\n        let litCells = {};\r\n        for (let key in this._lights) {\r\n            let light = this._lights[key];\r\n            emittingCells[key] = [0, 0, 0];\r\n            Color.add_(emittingCells[key], light);\r\n        }\r\n        for (let i = 0; i < this._options.passes; i++) {\r\n            this._emitLight(emittingCells, litCells, doneCells);\r\n            if (i + 1 == this._options.passes) {\r\n                continue;\r\n            }\r\n            emittingCells = this._computeEmitters(litCells, doneCells);\r\n        }\r\n        for (let litKey in litCells) {\r\n            let parts = litKey.split(\",\");\r\n            let x = parseInt(parts[0]);\r\n            let y = parseInt(parts[1]);\r\n            lightingCallback(x, y, litCells[litKey]);\r\n        }\r\n        return this;\r\n    }\r\n    _emitLight(emittingCells, litCells, doneCells) {\r\n        for (let key in emittingCells) {\r\n            let parts = key.split(\",\");\r\n            let x = parseInt(parts[0]);\r\n            let y = parseInt(parts[1]);\r\n            this._emitLightFromCell(x, y, emittingCells[key], litCells);\r\n            doneCells[key] = 1;\r\n        }\r\n        return this;\r\n    }\r\n    _computeEmitters(litCells, doneCells) {\r\n        let result = {};\r\n        for (let key in litCells) {\r\n            if (key in doneCells) {\r\n                continue;\r\n            }\r\n            let color = litCells[key];\r\n            let reflectivity;\r\n            if (key in this._reflectivityCache) {\r\n                reflectivity = this._reflectivityCache[key];\r\n            }\r\n            else {\r\n                let parts = key.split(\",\");\r\n                let x = parseInt(parts[0]);\r\n                let y = parseInt(parts[1]);\r\n                reflectivity = this._reflectivityCallback(x, y);\r\n                this._reflectivityCache[key] = reflectivity;\r\n            }\r\n            if (reflectivity == 0) {\r\n                continue;\r\n            }\r\n            let emission = [0, 0, 0];\r\n            let intensity = 0;\r\n            for (let i = 0; i < 3; i++) {\r\n                let part = Math.round(color[i] * reflectivity);\r\n                emission[i] = part;\r\n                intensity += part;\r\n            }\r\n            if (intensity > this._options.emissionThreshold) {\r\n                result[key] = emission;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _emitLightFromCell(x, y, color, litCells) {\r\n        let key = x + \",\" + y;\r\n        let fov;\r\n        if (key in this._fovCache) {\r\n            fov = this._fovCache[key];\r\n        }\r\n        else {\r\n            fov = this._updateFOV(x, y);\r\n        }\r\n        for (let fovKey in fov) {\r\n            let formFactor = fov[fovKey];\r\n            let result;\r\n            if (fovKey in litCells) {\r\n                result = litCells[fovKey];\r\n            }\r\n            else {\r\n                result = [0, 0, 0];\r\n                litCells[fovKey] = result;\r\n            }\r\n            for (let i = 0; i < 3; i++) {\r\n                result[i] += Math.round(color[i] * formFactor);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _updateFOV(x, y) {\r\n        let key1 = x + \",\" + y;\r\n        let cache = {};\r\n        this._fovCache[key1] = cache;\r\n        let range = this._options.range;\r\n        function cb(x, y, r, vis) {\r\n            let key2 = x + \",\" + y;\r\n            let formFactor = vis * (1 - r / range);\r\n            if (formFactor == 0) {\r\n                return;\r\n            }\r\n            cache[key2] = formFactor;\r\n        }\r\n        ;\r\n        this._fov.compute(x, y, range, cb.bind(this));\r\n        return cache;\r\n    }\r\n}\r\n","import Map from \"./map.js\";\r\nexport default class Arena extends Map {\r\n    create(callback) {\r\n        let w = this._width - 1;\r\n        let h = this._height - 1;\r\n        for (let i = 0; i <= w; i++) {\r\n            for (let j = 0; j <= h; j++) {\r\n                let empty = (i && j && i < w && j < h);\r\n                callback(i, j, empty ? 0 : 1);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","import Map from \"./map.js\";\r\nimport { DIRS } from \"../constants.js\";\r\nimport RNG from \"../rng.js\";\r\n;\r\nexport default class Cellular extends Map {\r\n    constructor(width, height, options = {}) {\r\n        super(width, height);\r\n        this._options = {\r\n            born: [5, 6, 7, 8],\r\n            survive: [4, 5, 6, 7, 8],\r\n            topology: 8\r\n        };\r\n        this.setOptions(options);\r\n        this._dirs = DIRS[this._options.topology];\r\n        this._map = this._fillMap(0);\r\n    }\r\n    randomize(probability) {\r\n        for (let i = 0; i < this._width; i++) {\r\n            for (let j = 0; j < this._height; j++) {\r\n                this._map[i][j] = (RNG.getUniform() < probability ? 1 : 0);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    setOptions(options) { Object.assign(this._options, options); }\r\n    set(x, y, value) { this._map[x][y] = value; }\r\n    create(callback) {\r\n        let newMap = this._fillMap(0);\r\n        let born = this._options.born;\r\n        let survive = this._options.survive;\r\n        for (let j = 0; j < this._height; j++) {\r\n            let widthStep = 1;\r\n            let widthStart = 0;\r\n            if (this._options.topology == 6) {\r\n                widthStep = 2;\r\n                widthStart = j % 2;\r\n            }\r\n            for (let i = widthStart; i < this._width; i += widthStep) {\r\n                let cur = this._map[i][j];\r\n                let ncount = this._getNeighbors(i, j);\r\n                if (cur && survive.indexOf(ncount) != -1) {\r\n                    newMap[i][j] = 1;\r\n                }\r\n                else if (!cur && born.indexOf(ncount) != -1) {\r\n                    newMap[i][j] = 1;\r\n                }\r\n            }\r\n        }\r\n        this._map = newMap;\r\n        callback && this._serviceCallback(callback);\r\n    }\r\n    _serviceCallback(callback) {\r\n        for (let j = 0; j < this._height; j++) {\r\n            let widthStep = 1;\r\n            let widthStart = 0;\r\n            if (this._options.topology == 6) {\r\n                widthStep = 2;\r\n                widthStart = j % 2;\r\n            }\r\n            for (let i = widthStart; i < this._width; i += widthStep) {\r\n                callback(i, j, this._map[i][j]);\r\n            }\r\n        }\r\n    }\r\n    _getNeighbors(cx, cy) {\r\n        let result = 0;\r\n        for (let i = 0; i < this._dirs.length; i++) {\r\n            let dir = this._dirs[i];\r\n            let x = cx + dir[0];\r\n            let y = cy + dir[1];\r\n            if (x < 0 || x >= this._width || y < 0 || y >= this._height) {\r\n                continue;\r\n            }\r\n            result += (this._map[x][y] == 1 ? 1 : 0);\r\n        }\r\n        return result;\r\n    }\r\n    connect(callback, value, connectionCallback) {\r\n        if (!value)\r\n            value = 0;\r\n        let allFreeSpace = [];\r\n        let notConnected = {};\r\n        let widthStep = 1;\r\n        let widthStarts = [0, 0];\r\n        if (this._options.topology == 6) {\r\n            widthStep = 2;\r\n            widthStarts = [0, 1];\r\n        }\r\n        for (let y = 0; y < this._height; y++) {\r\n            for (let x = widthStarts[y % 2]; x < this._width; x += widthStep) {\r\n                if (this._freeSpace(x, y, value)) {\r\n                    let p = [x, y];\r\n                    notConnected[this._pointKey(p)] = p;\r\n                    allFreeSpace.push([x, y]);\r\n                }\r\n            }\r\n        }\r\n        let start = allFreeSpace[RNG.getUniformInt(0, allFreeSpace.length - 1)];\r\n        let key = this._pointKey(start);\r\n        let connected = {};\r\n        connected[key] = start;\r\n        delete notConnected[key];\r\n        this._findConnected(connected, notConnected, [start], false, value);\r\n        while (Object.keys(notConnected).length > 0) {\r\n            let p = this._getFromTo(connected, notConnected);\r\n            let from = p[0];\r\n            let to = p[1];\r\n            let local = {};\r\n            local[this._pointKey(from)] = from;\r\n            this._findConnected(local, notConnected, [from], true, value);\r\n            let tunnelFn = (this._options.topology == 6 ? this._tunnelToConnected6 : this._tunnelToConnected);\r\n            tunnelFn.call(this, to, from, connected, notConnected, value, connectionCallback);\r\n            for (let k in local) {\r\n                let pp = local[k];\r\n                this._map[pp[0]][pp[1]] = value;\r\n                connected[k] = pp;\r\n                delete notConnected[k];\r\n            }\r\n        }\r\n        callback && this._serviceCallback(callback);\r\n    }\r\n    _getFromTo(connected, notConnected) {\r\n        let from = [0, 0], to = [0, 0], d;\r\n        let connectedKeys = Object.keys(connected);\r\n        let notConnectedKeys = Object.keys(notConnected);\r\n        for (let i = 0; i < 5; i++) {\r\n            if (connectedKeys.length < notConnectedKeys.length) {\r\n                let keys = connectedKeys;\r\n                to = connected[keys[RNG.getUniformInt(0, keys.length - 1)]];\r\n                from = this._getClosest(to, notConnected);\r\n            }\r\n            else {\r\n                let keys = notConnectedKeys;\r\n                from = notConnected[keys[RNG.getUniformInt(0, keys.length - 1)]];\r\n                to = this._getClosest(from, connected);\r\n            }\r\n            d = (from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]);\r\n            if (d < 64) {\r\n                break;\r\n            }\r\n        }\r\n        return [from, to];\r\n    }\r\n    _getClosest(point, space) {\r\n        let minPoint = null;\r\n        let minDist = null;\r\n        for (let k in space) {\r\n            let p = space[k];\r\n            let d = (p[0] - point[0]) * (p[0] - point[0]) + (p[1] - point[1]) * (p[1] - point[1]);\r\n            if (minDist == null || d < minDist) {\r\n                minDist = d;\r\n                minPoint = p;\r\n            }\r\n        }\r\n        return minPoint;\r\n    }\r\n    _findConnected(connected, notConnected, stack, keepNotConnected, value) {\r\n        while (stack.length > 0) {\r\n            let p = stack.splice(0, 1)[0];\r\n            let tests;\r\n            if (this._options.topology == 6) {\r\n                tests = [\r\n                    [p[0] + 2, p[1]],\r\n                    [p[0] + 1, p[1] - 1],\r\n                    [p[0] - 1, p[1] - 1],\r\n                    [p[0] - 2, p[1]],\r\n                    [p[0] - 1, p[1] + 1],\r\n                    [p[0] + 1, p[1] + 1],\r\n                ];\r\n            }\r\n            else {\r\n                tests = [\r\n                    [p[0] + 1, p[1]],\r\n                    [p[0] - 1, p[1]],\r\n                    [p[0], p[1] + 1],\r\n                    [p[0], p[1] - 1]\r\n                ];\r\n            }\r\n            for (let i = 0; i < tests.length; i++) {\r\n                let key = this._pointKey(tests[i]);\r\n                if (connected[key] == null && this._freeSpace(tests[i][0], tests[i][1], value)) {\r\n                    connected[key] = tests[i];\r\n                    if (!keepNotConnected) {\r\n                        delete notConnected[key];\r\n                    }\r\n                    stack.push(tests[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _tunnelToConnected(to, from, connected, notConnected, value, connectionCallback) {\r\n        let a, b;\r\n        if (from[0] < to[0]) {\r\n            a = from;\r\n            b = to;\r\n        }\r\n        else {\r\n            a = to;\r\n            b = from;\r\n        }\r\n        for (let xx = a[0]; xx <= b[0]; xx++) {\r\n            this._map[xx][a[1]] = value;\r\n            let p = [xx, a[1]];\r\n            let pkey = this._pointKey(p);\r\n            connected[pkey] = p;\r\n            delete notConnected[pkey];\r\n        }\r\n        if (connectionCallback && a[0] < b[0]) {\r\n            connectionCallback(a, [b[0], a[1]]);\r\n        }\r\n        let x = b[0];\r\n        if (from[1] < to[1]) {\r\n            a = from;\r\n            b = to;\r\n        }\r\n        else {\r\n            a = to;\r\n            b = from;\r\n        }\r\n        for (let yy = a[1]; yy < b[1]; yy++) {\r\n            this._map[x][yy] = value;\r\n            let p = [x, yy];\r\n            let pkey = this._pointKey(p);\r\n            connected[pkey] = p;\r\n            delete notConnected[pkey];\r\n        }\r\n        if (connectionCallback && a[1] < b[1]) {\r\n            connectionCallback([b[0], a[1]], [b[0], b[1]]);\r\n        }\r\n    }\r\n    _tunnelToConnected6(to, from, connected, notConnected, value, connectionCallback) {\r\n        let a, b;\r\n        if (from[0] < to[0]) {\r\n            a = from;\r\n            b = to;\r\n        }\r\n        else {\r\n            a = to;\r\n            b = from;\r\n        }\r\n        let xx = a[0];\r\n        let yy = a[1];\r\n        while (!(xx == b[0] && yy == b[1])) {\r\n            let stepWidth = 2;\r\n            if (yy < b[1]) {\r\n                yy++;\r\n                stepWidth = 1;\r\n            }\r\n            else if (yy > b[1]) {\r\n                yy--;\r\n                stepWidth = 1;\r\n            }\r\n            if (xx < b[0]) {\r\n                xx += stepWidth;\r\n            }\r\n            else if (xx > b[0]) {\r\n                xx -= stepWidth;\r\n            }\r\n            else if (b[1] % 2) {\r\n                xx -= stepWidth;\r\n            }\r\n            else {\r\n                xx += stepWidth;\r\n            }\r\n            this._map[xx][yy] = value;\r\n            let p = [xx, yy];\r\n            let pkey = this._pointKey(p);\r\n            connected[pkey] = p;\r\n            delete notConnected[pkey];\r\n        }\r\n        if (connectionCallback) {\r\n            connectionCallback(from, to);\r\n        }\r\n    }\r\n    _freeSpace(x, y, value) {\r\n        return x >= 0 && x < this._width && y >= 0 && y < this._height && this._map[x][y] == value;\r\n    }\r\n    _pointKey(p) { return p[0] + \".\" + p[1]; }\r\n}\r\n","import Dungeon from \"./dungeon.js\";\r\nimport { Room, Corridor } from \"./features.js\";\r\nimport RNG from \"../rng.js\";\r\nimport { DIRS } from \"../constants.js\";\r\nconst FEATURES = {\r\n    \"room\": Room,\r\n    \"corridor\": Corridor\r\n};\r\nexport default class Digger extends Dungeon {\r\n    constructor(width, height, options = {}) {\r\n        super(width, height);\r\n        this._options = Object.assign({\r\n            roomWidth: [3, 9],\r\n            roomHeight: [3, 5],\r\n            corridorLength: [3, 10],\r\n            dugPercentage: 0.2,\r\n            timeLimit: 1000\r\n        }, options);\r\n        this._features = {\r\n            \"room\": 4,\r\n            \"corridor\": 4\r\n        };\r\n        this._map = [];\r\n        this._featureAttempts = 20;\r\n        this._walls = {};\r\n        this._dug = 0;\r\n        this._digCallback = this._digCallback.bind(this);\r\n        this._canBeDugCallback = this._canBeDugCallback.bind(this);\r\n        this._isWallCallback = this._isWallCallback.bind(this);\r\n        this._priorityWallCallback = this._priorityWallCallback.bind(this);\r\n    }\r\n    create(callback) {\r\n        this._rooms = [];\r\n        this._corridors = [];\r\n        this._map = this._fillMap(1);\r\n        this._walls = {};\r\n        this._dug = 0;\r\n        let area = (this._width - 2) * (this._height - 2);\r\n        this._firstRoom();\r\n        let t1 = Date.now();\r\n        let priorityWalls;\r\n        do {\r\n            priorityWalls = 0;\r\n            let t2 = Date.now();\r\n            if (t2 - t1 > this._options.timeLimit) {\r\n                break;\r\n            }\r\n            let wall = this._findWall();\r\n            if (!wall) {\r\n                break;\r\n            }\r\n            let parts = wall.split(\",\");\r\n            let x = parseInt(parts[0]);\r\n            let y = parseInt(parts[1]);\r\n            let dir = this._getDiggingDirection(x, y);\r\n            if (!dir) {\r\n                continue;\r\n            }\r\n            let featureAttempts = 0;\r\n            do {\r\n                featureAttempts++;\r\n                if (this._tryFeature(x, y, dir[0], dir[1])) {\r\n                    this._removeSurroundingWalls(x, y);\r\n                    this._removeSurroundingWalls(x - dir[0], y - dir[1]);\r\n                    break;\r\n                }\r\n            } while (featureAttempts < this._featureAttempts);\r\n            for (let id in this._walls) {\r\n                if (this._walls[id] > 1) {\r\n                    priorityWalls++;\r\n                }\r\n            }\r\n        } while (this._dug / area < this._options.dugPercentage || priorityWalls);\r\n        this._addDoors();\r\n        if (callback) {\r\n            for (let i = 0; i < this._width; i++) {\r\n                for (let j = 0; j < this._height; j++) {\r\n                    callback(i, j, this._map[i][j]);\r\n                }\r\n            }\r\n        }\r\n        this._walls = {};\r\n        this._map = [];\r\n        return this;\r\n    }\r\n    _digCallback(x, y, value) {\r\n        if (value == 0 || value == 2) {\r\n            this._map[x][y] = 0;\r\n            this._dug++;\r\n        }\r\n        else {\r\n            this._walls[x + \",\" + y] = 1;\r\n        }\r\n    }\r\n    _isWallCallback(x, y) {\r\n        if (x < 0 || y < 0 || x >= this._width || y >= this._height) {\r\n            return false;\r\n        }\r\n        return (this._map[x][y] == 1);\r\n    }\r\n    _canBeDugCallback(x, y) {\r\n        if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) {\r\n            return false;\r\n        }\r\n        return (this._map[x][y] == 1);\r\n    }\r\n    _priorityWallCallback(x, y) { this._walls[x + \",\" + y] = 2; }\r\n    ;\r\n    _firstRoom() {\r\n        let cx = Math.floor(this._width / 2);\r\n        let cy = Math.floor(this._height / 2);\r\n        let room = Room.createRandomCenter(cx, cy, this._options);\r\n        this._rooms.push(room);\r\n        room.create(this._digCallback);\r\n    }\r\n    _findWall() {\r\n        let prio1 = [];\r\n        let prio2 = [];\r\n        for (let id in this._walls) {\r\n            let prio = this._walls[id];\r\n            if (prio == 2) {\r\n                prio2.push(id);\r\n            }\r\n            else {\r\n                prio1.push(id);\r\n            }\r\n        }\r\n        let arr = (prio2.length ? prio2 : prio1);\r\n        if (!arr.length) {\r\n            return null;\r\n        }\r\n        let id = RNG.getItem(arr.sort());\r\n        delete this._walls[id];\r\n        return id;\r\n    }\r\n    _tryFeature(x, y, dx, dy) {\r\n        let featureName = RNG.getWeightedValue(this._features);\r\n        let ctor = FEATURES[featureName];\r\n        let feature = ctor.createRandomAt(x, y, dx, dy, this._options);\r\n        if (!feature.isValid(this._isWallCallback, this._canBeDugCallback)) {\r\n            return false;\r\n        }\r\n        feature.create(this._digCallback);\r\n        if (feature instanceof Room) {\r\n            this._rooms.push(feature);\r\n        }\r\n        if (feature instanceof Corridor) {\r\n            feature.createPriorityWalls(this._priorityWallCallback);\r\n            this._corridors.push(feature);\r\n        }\r\n        return true;\r\n    }\r\n    _removeSurroundingWalls(cx, cy) {\r\n        let deltas = DIRS[4];\r\n        for (let i = 0; i < deltas.length; i++) {\r\n            let delta = deltas[i];\r\n            let x = cx + delta[0];\r\n            let y = cy + delta[1];\r\n            delete this._walls[x + \",\" + y];\r\n            x = cx + 2 * delta[0];\r\n            y = cy + 2 * delta[1];\r\n            delete this._walls[x + \",\" + y];\r\n        }\r\n    }\r\n    _getDiggingDirection(cx, cy) {\r\n        if (cx <= 0 || cy <= 0 || cx >= this._width - 1 || cy >= this._height - 1) {\r\n            return null;\r\n        }\r\n        let result = null;\r\n        let deltas = DIRS[4];\r\n        for (let i = 0; i < deltas.length; i++) {\r\n            let delta = deltas[i];\r\n            let x = cx + delta[0];\r\n            let y = cy + delta[1];\r\n            if (!this._map[x][y]) {\r\n                if (result) {\r\n                    return null;\r\n                }\r\n                result = delta;\r\n            }\r\n        }\r\n        if (!result) {\r\n            return null;\r\n        }\r\n        return [-result[0], -result[1]];\r\n    }\r\n    _addDoors() {\r\n        let data = this._map;\r\n        function isWallCallback(x, y) {\r\n            return (data[x][y] == 1);\r\n        }\r\n        ;\r\n        for (let i = 0; i < this._rooms.length; i++) {\r\n            let room = this._rooms[i];\r\n            room.clearDoors();\r\n            room.addDoors(isWallCallback);\r\n        }\r\n    }\r\n}\r\n","import Map from \"./map.js\";\r\nimport RNG from \"../rng.js\";\r\nexport default class DividedMaze extends Map {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._stack = [];\r\n        this._map = [];\r\n    }\r\n    create(callback) {\r\n        let w = this._width;\r\n        let h = this._height;\r\n        this._map = [];\r\n        for (let i = 0; i < w; i++) {\r\n            this._map.push([]);\r\n            for (let j = 0; j < h; j++) {\r\n                let border = (i == 0 || j == 0 || i + 1 == w || j + 1 == h);\r\n                this._map[i].push(border ? 1 : 0);\r\n            }\r\n        }\r\n        this._stack = [\r\n            [1, 1, w - 2, h - 2]\r\n        ];\r\n        this._process();\r\n        for (let i = 0; i < w; i++) {\r\n            for (let j = 0; j < h; j++) {\r\n                callback(i, j, this._map[i][j]);\r\n            }\r\n        }\r\n        this._map = [];\r\n        return this;\r\n    }\r\n    _process() {\r\n        while (this._stack.length) {\r\n            let room = this._stack.shift();\r\n            this._partitionRoom(room);\r\n        }\r\n    }\r\n    _partitionRoom(room) {\r\n        let availX = [];\r\n        let availY = [];\r\n        for (let i = room[0] + 1; i < room[2]; i++) {\r\n            let top = this._map[i][room[1] - 1];\r\n            let bottom = this._map[i][room[3] + 1];\r\n            if (top && bottom && !(i % 2)) {\r\n                availX.push(i);\r\n            }\r\n        }\r\n        for (let j = room[1] + 1; j < room[3]; j++) {\r\n            let left = this._map[room[0] - 1][j];\r\n            let right = this._map[room[2] + 1][j];\r\n            if (left && right && !(j % 2)) {\r\n                availY.push(j);\r\n            }\r\n        }\r\n        if (!availX.length || !availY.length) {\r\n            return;\r\n        }\r\n        let x = RNG.getItem(availX);\r\n        let y = RNG.getItem(availY);\r\n        this._map[x][y] = 1;\r\n        let walls = [];\r\n        let w = [];\r\n        walls.push(w);\r\n        for (let i = room[0]; i < x; i++) {\r\n            this._map[i][y] = 1;\r\n            w.push([i, y]);\r\n        }\r\n        w = [];\r\n        walls.push(w);\r\n        for (let i = x + 1; i <= room[2]; i++) {\r\n            this._map[i][y] = 1;\r\n            w.push([i, y]);\r\n        }\r\n        w = [];\r\n        walls.push(w);\r\n        for (let j = room[1]; j < y; j++) {\r\n            this._map[x][j] = 1;\r\n            w.push([x, j]);\r\n        }\r\n        w = [];\r\n        walls.push(w);\r\n        for (let j = y + 1; j <= room[3]; j++) {\r\n            this._map[x][j] = 1;\r\n            w.push([x, j]);\r\n        }\r\n        let solid = RNG.getItem(walls);\r\n        for (let i = 0; i < walls.length; i++) {\r\n            let w = walls[i];\r\n            if (w == solid) {\r\n                continue;\r\n            }\r\n            let hole = RNG.getItem(w);\r\n            this._map[hole[0]][hole[1]] = 0;\r\n        }\r\n        this._stack.push([room[0], room[1], x - 1, y - 1]);\r\n        this._stack.push([x + 1, room[1], room[2], y - 1]);\r\n        this._stack.push([room[0], y + 1, x - 1, room[3]]);\r\n        this._stack.push([x + 1, y + 1, room[2], room[3]]);\r\n    }\r\n}\r\n","import Map from \"./map.js\";\r\nexport default class Dungeon extends Map {\r\n    constructor(width, height) {\r\n        super(width, height);\r\n        this._rooms = [];\r\n        this._corridors = [];\r\n    }\r\n    getRooms() { return this._rooms; }\r\n    getCorridors() { return this._corridors; }\r\n}\r\n","import Map from \"./map.js\";\r\nimport RNG from \"../rng.js\";\r\nfunction addToList(i, L, R) {\r\n    R[L[i + 1]] = R[i];\r\n    L[R[i]] = L[i + 1];\r\n    R[i] = i + 1;\r\n    L[i + 1] = i;\r\n}\r\nfunction removeFromList(i, L, R) {\r\n    R[L[i]] = R[i];\r\n    L[R[i]] = L[i];\r\n    R[i] = i;\r\n    L[i] = i;\r\n}\r\nexport default class EllerMaze extends Map {\r\n    create(callback) {\r\n        let map = this._fillMap(1);\r\n        let w = Math.ceil((this._width - 2) / 2);\r\n        let rand = 9 / 24;\r\n        let L = [];\r\n        let R = [];\r\n        for (let i = 0; i < w; i++) {\r\n            L.push(i);\r\n            R.push(i);\r\n        }\r\n        L.push(w - 1);\r\n        let j;\r\n        for (j = 1; j + 3 < this._height; j += 2) {\r\n            for (let i = 0; i < w; i++) {\r\n                let x = 2 * i + 1;\r\n                let y = j;\r\n                map[x][y] = 0;\r\n                if (i != L[i + 1] && RNG.getUniform() > rand) {\r\n                    addToList(i, L, R);\r\n                    map[x + 1][y] = 0;\r\n                }\r\n                if (i != L[i] && RNG.getUniform() > rand) {\r\n                    removeFromList(i, L, R);\r\n                }\r\n                else {\r\n                    map[x][y + 1] = 0;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < w; i++) {\r\n            let x = 2 * i + 1;\r\n            let y = j;\r\n            map[x][y] = 0;\r\n            if (i != L[i + 1] && (i == L[i] || RNG.getUniform() > rand)) {\r\n                addToList(i, L, R);\r\n                map[x + 1][y] = 0;\r\n            }\r\n            removeFromList(i, L, R);\r\n        }\r\n        for (let i = 0; i < this._width; i++) {\r\n            for (let j = 0; j < this._height; j++) {\r\n                callback(i, j, map[i][j]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","import RNG from \"../rng.js\";\r\n;\r\nclass Feature {\r\n}\r\nexport class Room extends Feature {\r\n    constructor(x1, y1, x2, y2, doorX, doorY) {\r\n        super();\r\n        this._x1 = x1;\r\n        this._y1 = y1;\r\n        this._x2 = x2;\r\n        this._y2 = y2;\r\n        this._doors = {};\r\n        if (doorX !== undefined && doorY !== undefined) {\r\n            this.addDoor(doorX, doorY);\r\n        }\r\n    }\r\n    ;\r\n    static createRandomAt(x, y, dx, dy, options) {\r\n        let min = options.roomWidth[0];\r\n        let max = options.roomWidth[1];\r\n        let width = RNG.getUniformInt(min, max);\r\n        min = options.roomHeight[0];\r\n        max = options.roomHeight[1];\r\n        let height = RNG.getUniformInt(min, max);\r\n        if (dx == 1) {\r\n            let y2 = y - Math.floor(RNG.getUniform() * height);\r\n            return new this(x + 1, y2, x + width, y2 + height - 1, x, y);\r\n        }\r\n        if (dx == -1) {\r\n            let y2 = y - Math.floor(RNG.getUniform() * height);\r\n            return new this(x - width, y2, x - 1, y2 + height - 1, x, y);\r\n        }\r\n        if (dy == 1) {\r\n            let x2 = x - Math.floor(RNG.getUniform() * width);\r\n            return new this(x2, y + 1, x2 + width - 1, y + height, x, y);\r\n        }\r\n        if (dy == -1) {\r\n            let x2 = x - Math.floor(RNG.getUniform() * width);\r\n            return new this(x2, y - height, x2 + width - 1, y - 1, x, y);\r\n        }\r\n        throw new Error(\"dx or dy must be 1 or -1\");\r\n    }\r\n    static createRandomCenter(cx, cy, options) {\r\n        let min = options.roomWidth[0];\r\n        let max = options.roomWidth[1];\r\n        let width = RNG.getUniformInt(min, max);\r\n        min = options.roomHeight[0];\r\n        max = options.roomHeight[1];\r\n        let height = RNG.getUniformInt(min, max);\r\n        let x1 = cx - Math.floor(RNG.getUniform() * width);\r\n        let y1 = cy - Math.floor(RNG.getUniform() * height);\r\n        let x2 = x1 + width - 1;\r\n        let y2 = y1 + height - 1;\r\n        return new this(x1, y1, x2, y2);\r\n    }\r\n    static createRandom(availWidth, availHeight, options) {\r\n        let min = options.roomWidth[0];\r\n        let max = options.roomWidth[1];\r\n        let width = RNG.getUniformInt(min, max);\r\n        min = options.roomHeight[0];\r\n        max = options.roomHeight[1];\r\n        let height = RNG.getUniformInt(min, max);\r\n        let left = availWidth - width - 1;\r\n        let top = availHeight - height - 1;\r\n        let x1 = 1 + Math.floor(RNG.getUniform() * left);\r\n        let y1 = 1 + Math.floor(RNG.getUniform() * top);\r\n        let x2 = x1 + width - 1;\r\n        let y2 = y1 + height - 1;\r\n        return new this(x1, y1, x2, y2);\r\n    }\r\n    addDoor(x, y) {\r\n        this._doors[x + \",\" + y] = 1;\r\n        return this;\r\n    }\r\n    getDoors(cb) {\r\n        for (let key in this._doors) {\r\n            let parts = key.split(\",\");\r\n            cb(parseInt(parts[0]), parseInt(parts[1]));\r\n        }\r\n        return this;\r\n    }\r\n    clearDoors() {\r\n        this._doors = {};\r\n        return this;\r\n    }\r\n    addDoors(isWallCallback) {\r\n        let left = this._x1 - 1;\r\n        let right = this._x2 + 1;\r\n        let top = this._y1 - 1;\r\n        let bottom = this._y2 + 1;\r\n        for (let x = left; x <= right; x++) {\r\n            for (let y = top; y <= bottom; y++) {\r\n                if (x != left && x != right && y != top && y != bottom) {\r\n                    continue;\r\n                }\r\n                if (isWallCallback(x, y)) {\r\n                    continue;\r\n                }\r\n                this.addDoor(x, y);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    debug() {\r\n        console.log(\"room\", this._x1, this._y1, this._x2, this._y2);\r\n    }\r\n    isValid(isWallCallback, canBeDugCallback) {\r\n        let left = this._x1 - 1;\r\n        let right = this._x2 + 1;\r\n        let top = this._y1 - 1;\r\n        let bottom = this._y2 + 1;\r\n        for (let x = left; x <= right; x++) {\r\n            for (let y = top; y <= bottom; y++) {\r\n                if (x == left || x == right || y == top || y == bottom) {\r\n                    if (!isWallCallback(x, y)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    if (!canBeDugCallback(x, y)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    create(digCallback) {\r\n        let left = this._x1 - 1;\r\n        let right = this._x2 + 1;\r\n        let top = this._y1 - 1;\r\n        let bottom = this._y2 + 1;\r\n        let value = 0;\r\n        for (let x = left; x <= right; x++) {\r\n            for (let y = top; y <= bottom; y++) {\r\n                if (x + \",\" + y in this._doors) {\r\n                    value = 2;\r\n                }\r\n                else if (x == left || x == right || y == top || y == bottom) {\r\n                    value = 1;\r\n                }\r\n                else {\r\n                    value = 0;\r\n                }\r\n                digCallback(x, y, value);\r\n            }\r\n        }\r\n    }\r\n    getCenter() {\r\n        return [Math.round((this._x1 + this._x2) / 2), Math.round((this._y1 + this._y2) / 2)];\r\n    }\r\n    getLeft() { return this._x1; }\r\n    getRight() { return this._x2; }\r\n    getTop() { return this._y1; }\r\n    getBottom() { return this._y2; }\r\n}\r\nexport class Corridor extends Feature {\r\n    constructor(startX, startY, endX, endY) {\r\n        super();\r\n        this._startX = startX;\r\n        this._startY = startY;\r\n        this._endX = endX;\r\n        this._endY = endY;\r\n        this._endsWithAWall = true;\r\n    }\r\n    static createRandomAt(x, y, dx, dy, options) {\r\n        let min = options.corridorLength[0];\r\n        let max = options.corridorLength[1];\r\n        let length = RNG.getUniformInt(min, max);\r\n        return new this(x, y, x + dx * length, y + dy * length);\r\n    }\r\n    debug() {\r\n        console.log(\"corridor\", this._startX, this._startY, this._endX, this._endY);\r\n    }\r\n    isValid(isWallCallback, canBeDugCallback) {\r\n        let sx = this._startX;\r\n        let sy = this._startY;\r\n        let dx = this._endX - sx;\r\n        let dy = this._endY - sy;\r\n        let length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\r\n        if (dx) {\r\n            dx = dx / Math.abs(dx);\r\n        }\r\n        if (dy) {\r\n            dy = dy / Math.abs(dy);\r\n        }\r\n        let nx = dy;\r\n        let ny = -dx;\r\n        let ok = true;\r\n        for (let i = 0; i < length; i++) {\r\n            let x = sx + i * dx;\r\n            let y = sy + i * dy;\r\n            if (!canBeDugCallback(x, y)) {\r\n                ok = false;\r\n            }\r\n            if (!isWallCallback(x + nx, y + ny)) {\r\n                ok = false;\r\n            }\r\n            if (!isWallCallback(x - nx, y - ny)) {\r\n                ok = false;\r\n            }\r\n            if (!ok) {\r\n                length = i;\r\n                this._endX = x - dx;\r\n                this._endY = y - dy;\r\n                break;\r\n            }\r\n        }\r\n        if (length == 0) {\r\n            return false;\r\n        }\r\n        if (length == 1 && isWallCallback(this._endX + dx, this._endY + dy)) {\r\n            return false;\r\n        }\r\n        let firstCornerBad = !isWallCallback(this._endX + dx + nx, this._endY + dy + ny);\r\n        let secondCornerBad = !isWallCallback(this._endX + dx - nx, this._endY + dy - ny);\r\n        this._endsWithAWall = isWallCallback(this._endX + dx, this._endY + dy);\r\n        if ((firstCornerBad || secondCornerBad) && this._endsWithAWall) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    create(digCallback) {\r\n        let sx = this._startX;\r\n        let sy = this._startY;\r\n        let dx = this._endX - sx;\r\n        let dy = this._endY - sy;\r\n        let length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\r\n        if (dx) {\r\n            dx = dx / Math.abs(dx);\r\n        }\r\n        if (dy) {\r\n            dy = dy / Math.abs(dy);\r\n        }\r\n        for (let i = 0; i < length; i++) {\r\n            let x = sx + i * dx;\r\n            let y = sy + i * dy;\r\n            digCallback(x, y, 0);\r\n        }\r\n        return true;\r\n    }\r\n    createPriorityWalls(priorityWallCallback) {\r\n        if (!this._endsWithAWall) {\r\n            return;\r\n        }\r\n        let sx = this._startX;\r\n        let sy = this._startY;\r\n        let dx = this._endX - sx;\r\n        let dy = this._endY - sy;\r\n        if (dx) {\r\n            dx = dx / Math.abs(dx);\r\n        }\r\n        if (dy) {\r\n            dy = dy / Math.abs(dy);\r\n        }\r\n        let nx = dy;\r\n        let ny = -dx;\r\n        priorityWallCallback(this._endX + dx, this._endY + dy);\r\n        priorityWallCallback(this._endX + nx, this._endY + ny);\r\n        priorityWallCallback(this._endX - nx, this._endY - ny);\r\n    }\r\n}\r\n","import Map from \"./map.js\";\r\nimport RNG from \"../rng.js\";\r\nexport default class IceyMaze extends Map {\r\n    constructor(width, height, regularity = 0) {\r\n        super(width, height);\r\n        this._regularity = regularity;\r\n        this._map = [];\r\n    }\r\n    create(callback) {\r\n        let width = this._width;\r\n        let height = this._height;\r\n        let map = this._fillMap(1);\r\n        width -= (width % 2 ? 1 : 2);\r\n        height -= (height % 2 ? 1 : 2);\r\n        let cx = 0;\r\n        let cy = 0;\r\n        let nx = 0;\r\n        let ny = 0;\r\n        let done = 0;\r\n        let blocked = false;\r\n        let dirs = [\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0]\r\n        ];\r\n        do {\r\n            cx = 1 + 2 * Math.floor(RNG.getUniform() * (width - 1) / 2);\r\n            cy = 1 + 2 * Math.floor(RNG.getUniform() * (height - 1) / 2);\r\n            if (!done) {\r\n                map[cx][cy] = 0;\r\n            }\r\n            if (!map[cx][cy]) {\r\n                this._randomize(dirs);\r\n                do {\r\n                    if (Math.floor(RNG.getUniform() * (this._regularity + 1)) == 0) {\r\n                        this._randomize(dirs);\r\n                    }\r\n                    blocked = true;\r\n                    for (let i = 0; i < 4; i++) {\r\n                        nx = cx + dirs[i][0] * 2;\r\n                        ny = cy + dirs[i][1] * 2;\r\n                        if (this._isFree(map, nx, ny, width, height)) {\r\n                            map[nx][ny] = 0;\r\n                            map[cx + dirs[i][0]][cy + dirs[i][1]] = 0;\r\n                            cx = nx;\r\n                            cy = ny;\r\n                            blocked = false;\r\n                            done++;\r\n                            break;\r\n                        }\r\n                    }\r\n                } while (!blocked);\r\n            }\r\n        } while (done + 1 < width * height / 4);\r\n        for (let i = 0; i < this._width; i++) {\r\n            for (let j = 0; j < this._height; j++) {\r\n                callback(i, j, map[i][j]);\r\n            }\r\n        }\r\n        this._map = [];\r\n        return this;\r\n    }\r\n    _randomize(dirs) {\r\n        for (let i = 0; i < 4; i++) {\r\n            dirs[i][0] = 0;\r\n            dirs[i][1] = 0;\r\n        }\r\n        switch (Math.floor(RNG.getUniform() * 4)) {\r\n            case 0:\r\n                dirs[0][0] = -1;\r\n                dirs[1][0] = 1;\r\n                dirs[2][1] = -1;\r\n                dirs[3][1] = 1;\r\n                break;\r\n            case 1:\r\n                dirs[3][0] = -1;\r\n                dirs[2][0] = 1;\r\n                dirs[1][1] = -1;\r\n                dirs[0][1] = 1;\r\n                break;\r\n            case 2:\r\n                dirs[2][0] = -1;\r\n                dirs[3][0] = 1;\r\n                dirs[0][1] = -1;\r\n                dirs[1][1] = 1;\r\n                break;\r\n            case 3:\r\n                dirs[1][0] = -1;\r\n                dirs[0][0] = 1;\r\n                dirs[3][1] = -1;\r\n                dirs[2][1] = 1;\r\n                break;\r\n        }\r\n    }\r\n    _isFree(map, x, y, width, height) {\r\n        if (x < 1 || y < 1 || x >= width || y >= height) {\r\n            return false;\r\n        }\r\n        return map[x][y];\r\n    }\r\n}\r\n","import Arena from \"./arena.js\";\r\nimport Uniform from \"./uniform.js\";\r\nimport Cellular from \"./cellular.js\";\r\nimport Digger from \"./digger.js\";\r\nimport EllerMaze from \"./ellermaze.js\";\r\nimport DividedMaze from \"./dividedmaze.js\";\r\nimport IceyMaze from \"./iceymaze.js\";\r\nimport Rogue from \"./rogue.js\";\r\nexport default { Arena, Uniform, Cellular, Digger, EllerMaze, DividedMaze, IceyMaze, Rogue };\r\n","import { DEFAULT_WIDTH, DEFAULT_HEIGHT } from \"../constants.js\";\r\n;\r\nexport default class Map {\r\n    constructor(width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n    ;\r\n    _fillMap(value) {\r\n        let map = [];\r\n        for (let i = 0; i < this._width; i++) {\r\n            map.push([]);\r\n            for (let j = 0; j < this._height; j++) {\r\n                map[i].push(value);\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n}\r\n","import Map from \"./map.js\";\r\nimport RNG from \"../rng.js\";\r\nimport { DIRS } from \"../constants.js\";\r\nexport default class Rogue extends Map {\r\n    constructor(width, height, options) {\r\n        super(width, height);\r\n        this.map = [];\r\n        this.rooms = [];\r\n        this.connectedCells = [];\r\n        options = Object.assign({\r\n            cellWidth: 3,\r\n            cellHeight: 3\r\n        }, options);\r\n        if (!options.hasOwnProperty(\"roomWidth\")) {\r\n            options[\"roomWidth\"] = this._calculateRoomSize(this._width, options[\"cellWidth\"]);\r\n        }\r\n        if (!options.hasOwnProperty(\"roomHeight\")) {\r\n            options[\"roomHeight\"] = this._calculateRoomSize(this._height, options[\"cellHeight\"]);\r\n        }\r\n        this._options = options;\r\n    }\r\n    create(callback) {\r\n        this.map = this._fillMap(1);\r\n        this.rooms = [];\r\n        this.connectedCells = [];\r\n        this._initRooms();\r\n        this._connectRooms();\r\n        this._connectUnconnectedRooms();\r\n        this._createRandomRoomConnections();\r\n        this._createRooms();\r\n        this._createCorridors();\r\n        if (callback) {\r\n            for (let i = 0; i < this._width; i++) {\r\n                for (let j = 0; j < this._height; j++) {\r\n                    callback(i, j, this.map[i][j]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _calculateRoomSize(size, cell) {\r\n        let max = Math.floor((size / cell) * 0.8);\r\n        let min = Math.floor((size / cell) * 0.25);\r\n        if (min < 2) {\r\n            min = 2;\r\n        }\r\n        if (max < 2) {\r\n            max = 2;\r\n        }\r\n        return [min, max];\r\n    }\r\n    _initRooms() {\r\n        for (let i = 0; i < this._options.cellWidth; i++) {\r\n            this.rooms.push([]);\r\n            for (let j = 0; j < this._options.cellHeight; j++) {\r\n                this.rooms[i].push({ \"x\": 0, \"y\": 0, \"width\": 0, \"height\": 0, \"connections\": [], \"cellx\": i, \"celly\": j });\r\n            }\r\n        }\r\n    }\r\n    _connectRooms() {\r\n        let cgx = RNG.getUniformInt(0, this._options.cellWidth - 1);\r\n        let cgy = RNG.getUniformInt(0, this._options.cellHeight - 1);\r\n        let idx;\r\n        let ncgx;\r\n        let ncgy;\r\n        let found = false;\r\n        let room;\r\n        let otherRoom;\r\n        let dirToCheck;\r\n        do {\r\n            dirToCheck = [0, 2, 4, 6];\r\n            dirToCheck = RNG.shuffle(dirToCheck);\r\n            do {\r\n                found = false;\r\n                idx = dirToCheck.pop();\r\n                ncgx = cgx + DIRS[8][idx][0];\r\n                ncgy = cgy + DIRS[8][idx][1];\r\n                if (ncgx < 0 || ncgx >= this._options.cellWidth) {\r\n                    continue;\r\n                }\r\n                if (ncgy < 0 || ncgy >= this._options.cellHeight) {\r\n                    continue;\r\n                }\r\n                room = this.rooms[cgx][cgy];\r\n                if (room[\"connections\"].length > 0) {\r\n                    if (room[\"connections\"][0][0] == ncgx && room[\"connections\"][0][1] == ncgy) {\r\n                        break;\r\n                    }\r\n                }\r\n                otherRoom = this.rooms[ncgx][ncgy];\r\n                if (otherRoom[\"connections\"].length == 0) {\r\n                    otherRoom[\"connections\"].push([cgx, cgy]);\r\n                    this.connectedCells.push([ncgx, ncgy]);\r\n                    cgx = ncgx;\r\n                    cgy = ncgy;\r\n                    found = true;\r\n                }\r\n            } while (dirToCheck.length > 0 && found == false);\r\n        } while (dirToCheck.length > 0);\r\n    }\r\n    _connectUnconnectedRooms() {\r\n        let cw = this._options.cellWidth;\r\n        let ch = this._options.cellHeight;\r\n        this.connectedCells = RNG.shuffle(this.connectedCells);\r\n        let room;\r\n        let otherRoom;\r\n        let validRoom;\r\n        for (let i = 0; i < this._options.cellWidth; i++) {\r\n            for (let j = 0; j < this._options.cellHeight; j++) {\r\n                room = this.rooms[i][j];\r\n                if (room[\"connections\"].length == 0) {\r\n                    let directions = [0, 2, 4, 6];\r\n                    directions = RNG.shuffle(directions);\r\n                    validRoom = false;\r\n                    do {\r\n                        let dirIdx = directions.pop();\r\n                        let newI = i + DIRS[8][dirIdx][0];\r\n                        let newJ = j + DIRS[8][dirIdx][1];\r\n                        if (newI < 0 || newI >= cw || newJ < 0 || newJ >= ch) {\r\n                            continue;\r\n                        }\r\n                        otherRoom = this.rooms[newI][newJ];\r\n                        validRoom = true;\r\n                        if (otherRoom[\"connections\"].length == 0) {\r\n                            break;\r\n                        }\r\n                        for (let k = 0; k < otherRoom[\"connections\"].length; k++) {\r\n                            if (otherRoom[\"connections\"][k][0] == i && otherRoom[\"connections\"][k][1] == j) {\r\n                                validRoom = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (validRoom) {\r\n                            break;\r\n                        }\r\n                    } while (directions.length);\r\n                    if (validRoom) {\r\n                        room[\"connections\"].push([otherRoom[\"cellx\"], otherRoom[\"celly\"]]);\r\n                    }\r\n                    else {\r\n                        console.log(\"-- Unable to connect room.\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _createRandomRoomConnections() {\r\n    }\r\n    _createRooms() {\r\n        let w = this._width;\r\n        let h = this._height;\r\n        let cw = this._options.cellWidth;\r\n        let ch = this._options.cellHeight;\r\n        let cwp = Math.floor(this._width / cw);\r\n        let chp = Math.floor(this._height / ch);\r\n        let roomw;\r\n        let roomh;\r\n        let roomWidth = this._options[\"roomWidth\"];\r\n        let roomHeight = this._options[\"roomHeight\"];\r\n        let sx;\r\n        let sy;\r\n        let otherRoom;\r\n        for (let i = 0; i < cw; i++) {\r\n            for (let j = 0; j < ch; j++) {\r\n                sx = cwp * i;\r\n                sy = chp * j;\r\n                if (sx == 0) {\r\n                    sx = 1;\r\n                }\r\n                if (sy == 0) {\r\n                    sy = 1;\r\n                }\r\n                roomw = RNG.getUniformInt(roomWidth[0], roomWidth[1]);\r\n                roomh = RNG.getUniformInt(roomHeight[0], roomHeight[1]);\r\n                if (j > 0) {\r\n                    otherRoom = this.rooms[i][j - 1];\r\n                    while (sy - (otherRoom[\"y\"] + otherRoom[\"height\"]) < 3) {\r\n                        sy++;\r\n                    }\r\n                }\r\n                if (i > 0) {\r\n                    otherRoom = this.rooms[i - 1][j];\r\n                    while (sx - (otherRoom[\"x\"] + otherRoom[\"width\"]) < 3) {\r\n                        sx++;\r\n                    }\r\n                }\r\n                let sxOffset = Math.round(RNG.getUniformInt(0, cwp - roomw) / 2);\r\n                let syOffset = Math.round(RNG.getUniformInt(0, chp - roomh) / 2);\r\n                while (sx + sxOffset + roomw >= w) {\r\n                    if (sxOffset) {\r\n                        sxOffset--;\r\n                    }\r\n                    else {\r\n                        roomw--;\r\n                    }\r\n                }\r\n                while (sy + syOffset + roomh >= h) {\r\n                    if (syOffset) {\r\n                        syOffset--;\r\n                    }\r\n                    else {\r\n                        roomh--;\r\n                    }\r\n                }\r\n                sx = sx + sxOffset;\r\n                sy = sy + syOffset;\r\n                this.rooms[i][j][\"x\"] = sx;\r\n                this.rooms[i][j][\"y\"] = sy;\r\n                this.rooms[i][j][\"width\"] = roomw;\r\n                this.rooms[i][j][\"height\"] = roomh;\r\n                for (let ii = sx; ii < sx + roomw; ii++) {\r\n                    for (let jj = sy; jj < sy + roomh; jj++) {\r\n                        this.map[ii][jj] = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _getWallPosition(aRoom, aDirection) {\r\n        let rx;\r\n        let ry;\r\n        let door;\r\n        if (aDirection == 1 || aDirection == 3) {\r\n            rx = RNG.getUniformInt(aRoom[\"x\"] + 1, aRoom[\"x\"] + aRoom[\"width\"] - 2);\r\n            if (aDirection == 1) {\r\n                ry = aRoom[\"y\"] - 2;\r\n                door = ry + 1;\r\n            }\r\n            else {\r\n                ry = aRoom[\"y\"] + aRoom[\"height\"] + 1;\r\n                door = ry - 1;\r\n            }\r\n            this.map[rx][door] = 0;\r\n        }\r\n        else {\r\n            ry = RNG.getUniformInt(aRoom[\"y\"] + 1, aRoom[\"y\"] + aRoom[\"height\"] - 2);\r\n            if (aDirection == 2) {\r\n                rx = aRoom[\"x\"] + aRoom[\"width\"] + 1;\r\n                door = rx - 1;\r\n            }\r\n            else {\r\n                rx = aRoom[\"x\"] - 2;\r\n                door = rx + 1;\r\n            }\r\n            this.map[door][ry] = 0;\r\n        }\r\n        return [rx, ry];\r\n    }\r\n    _drawCorridor(startPosition, endPosition) {\r\n        let xOffset = endPosition[0] - startPosition[0];\r\n        let yOffset = endPosition[1] - startPosition[1];\r\n        let xpos = startPosition[0];\r\n        let ypos = startPosition[1];\r\n        let tempDist;\r\n        let xDir;\r\n        let yDir;\r\n        let move;\r\n        let moves = [];\r\n        let xAbs = Math.abs(xOffset);\r\n        let yAbs = Math.abs(yOffset);\r\n        let percent = RNG.getUniform();\r\n        let firstHalf = percent;\r\n        let secondHalf = 1 - percent;\r\n        xDir = xOffset > 0 ? 2 : 6;\r\n        yDir = yOffset > 0 ? 4 : 0;\r\n        if (xAbs < yAbs) {\r\n            tempDist = Math.ceil(yAbs * firstHalf);\r\n            moves.push([yDir, tempDist]);\r\n            moves.push([xDir, xAbs]);\r\n            tempDist = Math.floor(yAbs * secondHalf);\r\n            moves.push([yDir, tempDist]);\r\n        }\r\n        else {\r\n            tempDist = Math.ceil(xAbs * firstHalf);\r\n            moves.push([xDir, tempDist]);\r\n            moves.push([yDir, yAbs]);\r\n            tempDist = Math.floor(xAbs * secondHalf);\r\n            moves.push([xDir, tempDist]);\r\n        }\r\n        this.map[xpos][ypos] = 0;\r\n        while (moves.length > 0) {\r\n            move = moves.pop();\r\n            while (move[1] > 0) {\r\n                xpos += DIRS[8][move[0]][0];\r\n                ypos += DIRS[8][move[0]][1];\r\n                this.map[xpos][ypos] = 0;\r\n                move[1] = move[1] - 1;\r\n            }\r\n        }\r\n    }\r\n    _createCorridors() {\r\n        let cw = this._options.cellWidth;\r\n        let ch = this._options.cellHeight;\r\n        let room;\r\n        let connection;\r\n        let otherRoom;\r\n        let wall;\r\n        let otherWall;\r\n        for (let i = 0; i < cw; i++) {\r\n            for (let j = 0; j < ch; j++) {\r\n                room = this.rooms[i][j];\r\n                for (let k = 0; k < room[\"connections\"].length; k++) {\r\n                    connection = room[\"connections\"][k];\r\n                    otherRoom = this.rooms[connection[0]][connection[1]];\r\n                    if (otherRoom[\"cellx\"] > room[\"cellx\"]) {\r\n                        wall = 2;\r\n                        otherWall = 4;\r\n                    }\r\n                    else if (otherRoom[\"cellx\"] < room[\"cellx\"]) {\r\n                        wall = 4;\r\n                        otherWall = 2;\r\n                    }\r\n                    else if (otherRoom[\"celly\"] > room[\"celly\"]) {\r\n                        wall = 3;\r\n                        otherWall = 1;\r\n                    }\r\n                    else {\r\n                        wall = 1;\r\n                        otherWall = 3;\r\n                    }\r\n                    this._drawCorridor(this._getWallPosition(room, wall), this._getWallPosition(otherRoom, otherWall));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Dungeon from \"./dungeon.js\";\r\nimport { Room, Corridor } from \"./features.js\";\r\nimport RNG from \"../rng.js\";\r\n;\r\nexport default class Uniform extends Dungeon {\r\n    constructor(width, height, options) {\r\n        super(width, height);\r\n        this._options = {\r\n            roomWidth: [3, 9],\r\n            roomHeight: [3, 5],\r\n            roomDugPercentage: 0.1,\r\n            timeLimit: 1000\r\n        };\r\n        Object.assign(this._options, options);\r\n        this._map = [];\r\n        this._dug = 0;\r\n        this._roomAttempts = 20;\r\n        this._corridorAttempts = 20;\r\n        this._connected = [];\r\n        this._unconnected = [];\r\n        this._digCallback = this._digCallback.bind(this);\r\n        this._canBeDugCallback = this._canBeDugCallback.bind(this);\r\n        this._isWallCallback = this._isWallCallback.bind(this);\r\n    }\r\n    create(callback) {\r\n        let t1 = Date.now();\r\n        while (1) {\r\n            let t2 = Date.now();\r\n            if (t2 - t1 > this._options.timeLimit) {\r\n                return null;\r\n            }\r\n            this._map = this._fillMap(1);\r\n            this._dug = 0;\r\n            this._rooms = [];\r\n            this._unconnected = [];\r\n            this._generateRooms();\r\n            if (this._rooms.length < 2) {\r\n                continue;\r\n            }\r\n            if (this._generateCorridors()) {\r\n                break;\r\n            }\r\n        }\r\n        if (callback) {\r\n            for (let i = 0; i < this._width; i++) {\r\n                for (let j = 0; j < this._height; j++) {\r\n                    callback(i, j, this._map[i][j]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _generateRooms() {\r\n        let w = this._width - 2;\r\n        let h = this._height - 2;\r\n        let room;\r\n        do {\r\n            room = this._generateRoom();\r\n            if (this._dug / (w * h) > this._options.roomDugPercentage) {\r\n                break;\r\n            }\r\n        } while (room);\r\n    }\r\n    _generateRoom() {\r\n        let count = 0;\r\n        while (count < this._roomAttempts) {\r\n            count++;\r\n            let room = Room.createRandom(this._width, this._height, this._options);\r\n            if (!room.isValid(this._isWallCallback, this._canBeDugCallback)) {\r\n                continue;\r\n            }\r\n            room.create(this._digCallback);\r\n            this._rooms.push(room);\r\n            return room;\r\n        }\r\n        return null;\r\n    }\r\n    _generateCorridors() {\r\n        let cnt = 0;\r\n        while (cnt < this._corridorAttempts) {\r\n            cnt++;\r\n            this._corridors = [];\r\n            this._map = this._fillMap(1);\r\n            for (let i = 0; i < this._rooms.length; i++) {\r\n                let room = this._rooms[i];\r\n                room.clearDoors();\r\n                room.create(this._digCallback);\r\n            }\r\n            this._unconnected = RNG.shuffle(this._rooms.slice());\r\n            this._connected = [];\r\n            if (this._unconnected.length) {\r\n                this._connected.push(this._unconnected.pop());\r\n            }\r\n            while (1) {\r\n                let connected = RNG.getItem(this._connected);\r\n                if (!connected) {\r\n                    break;\r\n                }\r\n                let room1 = this._closestRoom(this._unconnected, connected);\r\n                if (!room1) {\r\n                    break;\r\n                }\r\n                let room2 = this._closestRoom(this._connected, room1);\r\n                if (!room2) {\r\n                    break;\r\n                }\r\n                let ok = this._connectRooms(room1, room2);\r\n                if (!ok) {\r\n                    break;\r\n                }\r\n                if (!this._unconnected.length) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    ;\r\n    _closestRoom(rooms, room) {\r\n        let dist = Infinity;\r\n        let center = room.getCenter();\r\n        let result = null;\r\n        for (let i = 0; i < rooms.length; i++) {\r\n            let r = rooms[i];\r\n            let c = r.getCenter();\r\n            let dx = c[0] - center[0];\r\n            let dy = c[1] - center[1];\r\n            let d = dx * dx + dy * dy;\r\n            if (d < dist) {\r\n                dist = d;\r\n                result = r;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _connectRooms(room1, room2) {\r\n        let center1 = room1.getCenter();\r\n        let center2 = room2.getCenter();\r\n        let diffX = center2[0] - center1[0];\r\n        let diffY = center2[1] - center1[1];\r\n        let start;\r\n        let end;\r\n        let dirIndex1, dirIndex2, min, max, index;\r\n        if (Math.abs(diffX) < Math.abs(diffY)) {\r\n            dirIndex1 = (diffY > 0 ? 2 : 0);\r\n            dirIndex2 = (dirIndex1 + 2) % 4;\r\n            min = room2.getLeft();\r\n            max = room2.getRight();\r\n            index = 0;\r\n        }\r\n        else {\r\n            dirIndex1 = (diffX > 0 ? 1 : 3);\r\n            dirIndex2 = (dirIndex1 + 2) % 4;\r\n            min = room2.getTop();\r\n            max = room2.getBottom();\r\n            index = 1;\r\n        }\r\n        start = this._placeInWall(room1, dirIndex1);\r\n        if (!start) {\r\n            return false;\r\n        }\r\n        if (start[index] >= min && start[index] <= max) {\r\n            end = start.slice();\r\n            let value = 0;\r\n            switch (dirIndex2) {\r\n                case 0:\r\n                    value = room2.getTop() - 1;\r\n                    break;\r\n                case 1:\r\n                    value = room2.getRight() + 1;\r\n                    break;\r\n                case 2:\r\n                    value = room2.getBottom() + 1;\r\n                    break;\r\n                case 3:\r\n                    value = room2.getLeft() - 1;\r\n                    break;\r\n            }\r\n            end[(index + 1) % 2] = value;\r\n            this._digLine([start, end]);\r\n        }\r\n        else if (start[index] < min - 1 || start[index] > max + 1) {\r\n            let diff = start[index] - center2[index];\r\n            let rotation = 0;\r\n            switch (dirIndex2) {\r\n                case 0:\r\n                case 1:\r\n                    rotation = (diff < 0 ? 3 : 1);\r\n                    break;\r\n                case 2:\r\n                case 3:\r\n                    rotation = (diff < 0 ? 1 : 3);\r\n                    break;\r\n            }\r\n            dirIndex2 = (dirIndex2 + rotation) % 4;\r\n            end = this._placeInWall(room2, dirIndex2);\r\n            if (!end) {\r\n                return false;\r\n            }\r\n            let mid = [0, 0];\r\n            mid[index] = start[index];\r\n            let index2 = (index + 1) % 2;\r\n            mid[index2] = end[index2];\r\n            this._digLine([start, mid, end]);\r\n        }\r\n        else {\r\n            let index2 = (index + 1) % 2;\r\n            end = this._placeInWall(room2, dirIndex2);\r\n            if (!end) {\r\n                return false;\r\n            }\r\n            let mid = Math.round((end[index2] + start[index2]) / 2);\r\n            let mid1 = [0, 0];\r\n            let mid2 = [0, 0];\r\n            mid1[index] = start[index];\r\n            mid1[index2] = mid;\r\n            mid2[index] = end[index];\r\n            mid2[index2] = mid;\r\n            this._digLine([start, mid1, mid2, end]);\r\n        }\r\n        room1.addDoor(start[0], start[1]);\r\n        room2.addDoor(end[0], end[1]);\r\n        index = this._unconnected.indexOf(room1);\r\n        if (index != -1) {\r\n            this._unconnected.splice(index, 1);\r\n            this._connected.push(room1);\r\n        }\r\n        index = this._unconnected.indexOf(room2);\r\n        if (index != -1) {\r\n            this._unconnected.splice(index, 1);\r\n            this._connected.push(room2);\r\n        }\r\n        return true;\r\n    }\r\n    _placeInWall(room, dirIndex) {\r\n        let start = [0, 0];\r\n        let dir = [0, 0];\r\n        let length = 0;\r\n        switch (dirIndex) {\r\n            case 0:\r\n                dir = [1, 0];\r\n                start = [room.getLeft(), room.getTop() - 1];\r\n                length = room.getRight() - room.getLeft() + 1;\r\n                break;\r\n            case 1:\r\n                dir = [0, 1];\r\n                start = [room.getRight() + 1, room.getTop()];\r\n                length = room.getBottom() - room.getTop() + 1;\r\n                break;\r\n            case 2:\r\n                dir = [1, 0];\r\n                start = [room.getLeft(), room.getBottom() + 1];\r\n                length = room.getRight() - room.getLeft() + 1;\r\n                break;\r\n            case 3:\r\n                dir = [0, 1];\r\n                start = [room.getLeft() - 1, room.getTop()];\r\n                length = room.getBottom() - room.getTop() + 1;\r\n                break;\r\n        }\r\n        let avail = [];\r\n        let lastBadIndex = -2;\r\n        for (let i = 0; i < length; i++) {\r\n            let x = start[0] + i * dir[0];\r\n            let y = start[1] + i * dir[1];\r\n            avail.push(null);\r\n            let isWall = (this._map[x][y] == 1);\r\n            if (isWall) {\r\n                if (lastBadIndex != i - 1) {\r\n                    avail[i] = [x, y];\r\n                }\r\n            }\r\n            else {\r\n                lastBadIndex = i;\r\n                if (i) {\r\n                    avail[i - 1] = null;\r\n                }\r\n            }\r\n        }\r\n        for (let i = avail.length - 1; i >= 0; i--) {\r\n            if (!avail[i]) {\r\n                avail.splice(i, 1);\r\n            }\r\n        }\r\n        return (avail.length ? RNG.getItem(avail) : null);\r\n    }\r\n    _digLine(points) {\r\n        for (let i = 1; i < points.length; i++) {\r\n            let start = points[i - 1];\r\n            let end = points[i];\r\n            let corridor = new Corridor(start[0], start[1], end[0], end[1]);\r\n            corridor.create(this._digCallback);\r\n            this._corridors.push(corridor);\r\n        }\r\n    }\r\n    _digCallback(x, y, value) {\r\n        this._map[x][y] = value;\r\n        if (value == 0) {\r\n            this._dug++;\r\n        }\r\n    }\r\n    _isWallCallback(x, y) {\r\n        if (x < 0 || y < 0 || x >= this._width || y >= this._height) {\r\n            return false;\r\n        }\r\n        return (this._map[x][y] == 1);\r\n    }\r\n    _canBeDugCallback(x, y) {\r\n        if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) {\r\n            return false;\r\n        }\r\n        return (this._map[x][y] == 1);\r\n    }\r\n}\r\n","import Simplex from \"./simplex.js\";\r\nexport default { Simplex };\r\n","export default class Noise {\r\n}\r\n","import Noise from \"./noise.js\";\r\nimport RNG from \"../rng.js\";\r\nimport { mod } from \"../util.js\";\r\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\r\nconst G2 = (3 - Math.sqrt(3)) / 6;\r\nexport default class Simplex extends Noise {\r\n    constructor(gradients = 256) {\r\n        super();\r\n        this._gradients = [\r\n            [0, -1],\r\n            [1, -1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [-1, 1],\r\n            [-1, 0],\r\n            [-1, -1]\r\n        ];\r\n        let permutations = [];\r\n        for (let i = 0; i < gradients; i++) {\r\n            permutations.push(i);\r\n        }\r\n        permutations = RNG.shuffle(permutations);\r\n        this._perms = [];\r\n        this._indexes = [];\r\n        for (let i = 0; i < 2 * gradients; i++) {\r\n            this._perms.push(permutations[i % gradients]);\r\n            this._indexes.push(this._perms[i] % this._gradients.length);\r\n        }\r\n    }\r\n    get(xin, yin) {\r\n        let perms = this._perms;\r\n        let indexes = this._indexes;\r\n        let count = perms.length / 2;\r\n        let n0 = 0, n1 = 0, n2 = 0, gi;\r\n        let s = (xin + yin) * F2;\r\n        let i = Math.floor(xin + s);\r\n        let j = Math.floor(yin + s);\r\n        let t = (i + j) * G2;\r\n        let X0 = i - t;\r\n        let Y0 = j - t;\r\n        let x0 = xin - X0;\r\n        let y0 = yin - Y0;\r\n        let i1, j1;\r\n        if (x0 > y0) {\r\n            i1 = 1;\r\n            j1 = 0;\r\n        }\r\n        else {\r\n            i1 = 0;\r\n            j1 = 1;\r\n        }\r\n        let x1 = x0 - i1 + G2;\r\n        let y1 = y0 - j1 + G2;\r\n        let x2 = x0 - 1 + 2 * G2;\r\n        let y2 = y0 - 1 + 2 * G2;\r\n        let ii = mod(i, count);\r\n        let jj = mod(j, count);\r\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\r\n        if (t0 >= 0) {\r\n            t0 *= t0;\r\n            gi = indexes[ii + perms[jj]];\r\n            let grad = this._gradients[gi];\r\n            n0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);\r\n        }\r\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\r\n        if (t1 >= 0) {\r\n            t1 *= t1;\r\n            gi = indexes[ii + i1 + perms[jj + j1]];\r\n            let grad = this._gradients[gi];\r\n            n1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);\r\n        }\r\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\r\n        if (t2 >= 0) {\r\n            t2 *= t2;\r\n            gi = indexes[ii + 1 + perms[jj + 1]];\r\n            let grad = this._gradients[gi];\r\n            n2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);\r\n        }\r\n        return 70 * (n0 + n1 + n2);\r\n    }\r\n}\r\n","import Path from \"./path.js\";\r\nexport default class AStar extends Path {\r\n    constructor(toX, toY, passableCallback, options = {}) {\r\n        super(toX, toY, passableCallback, options);\r\n        this._todo = [];\r\n        this._done = {};\r\n    }\r\n    compute(fromX, fromY, callback) {\r\n        this._todo = [];\r\n        this._done = {};\r\n        this._fromX = fromX;\r\n        this._fromY = fromY;\r\n        this._add(this._toX, this._toY, null);\r\n        while (this._todo.length) {\r\n            let item = this._todo.shift();\r\n            let id = item.x + \",\" + item.y;\r\n            if (id in this._done) {\r\n                continue;\r\n            }\r\n            this._done[id] = item;\r\n            if (item.x == fromX && item.y == fromY) {\r\n                break;\r\n            }\r\n            let neighbors = this._getNeighbors(item.x, item.y);\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                let neighbor = neighbors[i];\r\n                let x = neighbor[0];\r\n                let y = neighbor[1];\r\n                let id = x + \",\" + y;\r\n                if (id in this._done) {\r\n                    continue;\r\n                }\r\n                this._add(x, y, item);\r\n            }\r\n        }\r\n        let item = this._done[fromX + \",\" + fromY];\r\n        if (!item) {\r\n            return;\r\n        }\r\n        while (item) {\r\n            callback(item.x, item.y);\r\n            item = item.prev;\r\n        }\r\n    }\r\n    _add(x, y, prev) {\r\n        let h = this._distance(x, y);\r\n        let obj = {\r\n            x: x,\r\n            y: y,\r\n            prev: prev,\r\n            g: (prev ? prev.g + 1 : 0),\r\n            h: h\r\n        };\r\n        let f = obj.g + obj.h;\r\n        for (let i = 0; i < this._todo.length; i++) {\r\n            let item = this._todo[i];\r\n            let itemF = item.g + item.h;\r\n            if (f < itemF || (f == itemF && h < item.h)) {\r\n                this._todo.splice(i, 0, obj);\r\n                return;\r\n            }\r\n        }\r\n        this._todo.push(obj);\r\n    }\r\n    _distance(x, y) {\r\n        switch (this._options.topology) {\r\n            case 4:\r\n                return (Math.abs(x - this._fromX) + Math.abs(y - this._fromY));\r\n                break;\r\n            case 6:\r\n                let dx = Math.abs(x - this._fromX);\r\n                let dy = Math.abs(y - this._fromY);\r\n                return dy + Math.max(0, (dx - dy) / 2);\r\n                break;\r\n            case 8:\r\n                return Math.max(Math.abs(x - this._fromX), Math.abs(y - this._fromY));\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import Path from \"./path.js\";\r\nexport default class Dijkstra extends Path {\r\n    constructor(toX, toY, passableCallback, options) {\r\n        super(toX, toY, passableCallback, options);\r\n        this._computed = {};\r\n        this._todo = [];\r\n        this._add(toX, toY, null);\r\n    }\r\n    compute(fromX, fromY, callback) {\r\n        let key = fromX + \",\" + fromY;\r\n        if (!(key in this._computed)) {\r\n            this._compute(fromX, fromY);\r\n        }\r\n        if (!(key in this._computed)) {\r\n            return;\r\n        }\r\n        let item = this._computed[key];\r\n        while (item) {\r\n            callback(item.x, item.y);\r\n            item = item.prev;\r\n        }\r\n    }\r\n    _compute(fromX, fromY) {\r\n        while (this._todo.length) {\r\n            let item = this._todo.shift();\r\n            if (item.x == fromX && item.y == fromY) {\r\n                return;\r\n            }\r\n            let neighbors = this._getNeighbors(item.x, item.y);\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                let neighbor = neighbors[i];\r\n                let x = neighbor[0];\r\n                let y = neighbor[1];\r\n                let id = x + \",\" + y;\r\n                if (id in this._computed) {\r\n                    continue;\r\n                }\r\n                this._add(x, y, item);\r\n            }\r\n        }\r\n    }\r\n    _add(x, y, prev) {\r\n        let obj = {\r\n            x: x,\r\n            y: y,\r\n            prev: prev\r\n        };\r\n        this._computed[x + \",\" + y] = obj;\r\n        this._todo.push(obj);\r\n    }\r\n}\r\n","import Dijkstra from \"./dijkstra.js\";\r\nimport AStar from \"./astar.js\";\r\nexport default { Dijkstra, AStar };\r\n","import { DIRS } from \"../constants.js\";\r\nexport default class Path {\r\n    constructor(toX, toY, passableCallback, options = {}) {\r\n        this._toX = toX;\r\n        this._toY = toY;\r\n        this._passableCallback = passableCallback;\r\n        this._options = Object.assign({\r\n            topology: 8\r\n        }, options);\r\n        this._dirs = DIRS[this._options.topology];\r\n        if (this._options.topology == 8) {\r\n            this._dirs = [\r\n                this._dirs[0],\r\n                this._dirs[2],\r\n                this._dirs[4],\r\n                this._dirs[6],\r\n                this._dirs[1],\r\n                this._dirs[3],\r\n                this._dirs[5],\r\n                this._dirs[7]\r\n            ];\r\n        }\r\n    }\r\n    _getNeighbors(cx, cy) {\r\n        let result = [];\r\n        for (let i = 0; i < this._dirs.length; i++) {\r\n            let dir = this._dirs[i];\r\n            let x = cx + dir[0];\r\n            let y = cy + dir[1];\r\n            if (!this._passableCallback(x, y)) {\r\n                continue;\r\n            }\r\n            result.push([x, y]);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","const FRAC = 2.3283064365386963e-10;\r\nclass RNG {\r\n    constructor() {\r\n        this._seed = 0;\r\n        this._s0 = 0;\r\n        this._s1 = 0;\r\n        this._s2 = 0;\r\n        this._c = 0;\r\n    }\r\n    getSeed() { return this._seed; }\r\n    setSeed(seed) {\r\n        seed = (seed < 1 ? 1 / seed : seed);\r\n        this._seed = seed;\r\n        this._s0 = (seed >>> 0) * FRAC;\r\n        seed = (seed * 69069 + 1) >>> 0;\r\n        this._s1 = seed * FRAC;\r\n        seed = (seed * 69069 + 1) >>> 0;\r\n        this._s2 = seed * FRAC;\r\n        this._c = 1;\r\n        return this;\r\n    }\r\n    getUniform() {\r\n        let t = 2091639 * this._s0 + this._c * FRAC;\r\n        this._s0 = this._s1;\r\n        this._s1 = this._s2;\r\n        this._c = t | 0;\r\n        this._s2 = t - this._c;\r\n        return this._s2;\r\n    }\r\n    getUniformInt(lowerBound, upperBound) {\r\n        let max = Math.max(lowerBound, upperBound);\r\n        let min = Math.min(lowerBound, upperBound);\r\n        return Math.floor(this.getUniform() * (max - min + 1)) + min;\r\n    }\r\n    getNormal(mean = 0, stddev = 1) {\r\n        let u, v, r;\r\n        do {\r\n            u = 2 * this.getUniform() - 1;\r\n            v = 2 * this.getUniform() - 1;\r\n            r = u * u + v * v;\r\n        } while (r > 1 || r == 0);\r\n        let gauss = u * Math.sqrt(-2 * Math.log(r) / r);\r\n        return mean + gauss * stddev;\r\n    }\r\n    getPercentage() {\r\n        return 1 + Math.floor(this.getUniform() * 100);\r\n    }\r\n    getItem(array) {\r\n        if (!array.length) {\r\n            return null;\r\n        }\r\n        return array[Math.floor(this.getUniform() * array.length)];\r\n    }\r\n    shuffle(array) {\r\n        let result = [];\r\n        let clone = array.slice();\r\n        while (clone.length) {\r\n            let index = clone.indexOf(this.getItem(clone));\r\n            result.push(clone.splice(index, 1)[0]);\r\n        }\r\n        return result;\r\n    }\r\n    getWeightedValue(data) {\r\n        let total = 0;\r\n        for (let id in data) {\r\n            total += data[id];\r\n        }\r\n        let random = this.getUniform() * total;\r\n        let id, part = 0;\r\n        for (id in data) {\r\n            part += data[id];\r\n            if (random < part) {\r\n                return id;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n    getState() { return [this._s0, this._s1, this._s2, this._c]; }\r\n    setState(state) {\r\n        this._s0 = state[0];\r\n        this._s1 = state[1];\r\n        this._s2 = state[2];\r\n        this._c = state[3];\r\n        return this;\r\n    }\r\n    clone() {\r\n        let clone = new RNG();\r\n        return clone.setState(this.getState());\r\n    }\r\n}\r\nexport default new RNG().setSeed(Date.now());\r\n","import Scheduler from \"./scheduler.js\";\r\nexport default class Action extends Scheduler {\r\n    constructor() {\r\n        super();\r\n        this._defaultDuration = 1;\r\n        this._duration = this._defaultDuration;\r\n    }\r\n    add(item, repeat, time) {\r\n        this._queue.add(item, time || this._defaultDuration);\r\n        return super.add(item, repeat);\r\n    }\r\n    clear() {\r\n        this._duration = this._defaultDuration;\r\n        return super.clear();\r\n    }\r\n    remove(item) {\r\n        if (item == this._current) {\r\n            this._duration = this._defaultDuration;\r\n        }\r\n        return super.remove(item);\r\n    }\r\n    next() {\r\n        if (this._current && this._repeat.indexOf(this._current) != -1) {\r\n            this._queue.add(this._current, this._duration || this._defaultDuration);\r\n            this._duration = this._defaultDuration;\r\n        }\r\n        return super.next();\r\n    }\r\n    setDuration(time) {\r\n        if (this._current) {\r\n            this._duration = time;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","import Simple from \"./simple.js\";\r\nimport Speed from \"./speed.js\";\r\nimport Action from \"./action.js\";\r\nexport default { Simple, Speed, Action };\r\n","import EventQueue from \"../eventqueue.js\";\r\nexport default class Scheduler {\r\n    constructor() {\r\n        this._queue = new EventQueue();\r\n        this._repeat = [];\r\n        this._current = null;\r\n    }\r\n    getTime() { return this._queue.getTime(); }\r\n    add(item, repeat) {\r\n        if (repeat) {\r\n            this._repeat.push(item);\r\n        }\r\n        return this;\r\n    }\r\n    getTimeOf(item) {\r\n        return this._queue.getEventTime(item);\r\n    }\r\n    clear() {\r\n        this._queue.clear();\r\n        this._repeat = [];\r\n        this._current = null;\r\n        return this;\r\n    }\r\n    remove(item) {\r\n        let result = this._queue.remove(item);\r\n        let index = this._repeat.indexOf(item);\r\n        if (index != -1) {\r\n            this._repeat.splice(index, 1);\r\n        }\r\n        if (this._current == item) {\r\n            this._current = null;\r\n        }\r\n        return result;\r\n    }\r\n    next() {\r\n        this._current = this._queue.get();\r\n        return this._current;\r\n    }\r\n}\r\n","import Scheduler from \"./scheduler.js\";\r\nexport default class Simple extends Scheduler {\r\n    add(item, repeat) {\r\n        this._queue.add(item, 0);\r\n        return super.add(item, repeat);\r\n    }\r\n    next() {\r\n        if (this._current && this._repeat.indexOf(this._current) != -1) {\r\n            this._queue.add(this._current, 0);\r\n        }\r\n        return super.next();\r\n    }\r\n}\r\n","import Scheduler from \"./scheduler.js\";\r\nexport default class Speed extends Scheduler {\r\n    add(item, repeat, time) {\r\n        this._queue.add(item, time !== undefined ? time : 1 / item.getSpeed());\r\n        return super.add(item, repeat);\r\n    }\r\n    next() {\r\n        if (this._current && this._repeat.indexOf(this._current) != -1) {\r\n            this._queue.add(this._current, 1 / this._current.getSpeed());\r\n        }\r\n        return super.next();\r\n    }\r\n}\r\n","import RNG from \"./rng.js\";\r\nexport default class StringGenerator {\r\n    constructor(options) {\r\n        this._options = {\r\n            words: false,\r\n            order: 3,\r\n            prior: 0.001\r\n        };\r\n        Object.assign(this._options, options);\r\n        this._boundary = String.fromCharCode(0);\r\n        this._suffix = this._boundary;\r\n        this._prefix = [];\r\n        for (let i = 0; i < this._options.order; i++) {\r\n            this._prefix.push(this._boundary);\r\n        }\r\n        this._priorValues = {};\r\n        this._priorValues[this._boundary] = this._options.prior;\r\n        this._data = {};\r\n    }\r\n    clear() {\r\n        this._data = {};\r\n        this._priorValues = {};\r\n    }\r\n    generate() {\r\n        let result = [this._sample(this._prefix)];\r\n        while (result[result.length - 1] != this._boundary) {\r\n            result.push(this._sample(result));\r\n        }\r\n        return this._join(result.slice(0, -1));\r\n    }\r\n    observe(string) {\r\n        let tokens = this._split(string);\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            this._priorValues[tokens[i]] = this._options.prior;\r\n        }\r\n        tokens = this._prefix.concat(tokens).concat(this._suffix);\r\n        for (let i = this._options.order; i < tokens.length; i++) {\r\n            let context = tokens.slice(i - this._options.order, i);\r\n            let event = tokens[i];\r\n            for (let j = 0; j < context.length; j++) {\r\n                let subcontext = context.slice(j);\r\n                this._observeEvent(subcontext, event);\r\n            }\r\n        }\r\n    }\r\n    getStats() {\r\n        let parts = [];\r\n        let priorCount = Object.keys(this._priorValues).length;\r\n        priorCount--;\r\n        parts.push(\"distinct samples: \" + priorCount);\r\n        let dataCount = Object.keys(this._data).length;\r\n        let eventCount = 0;\r\n        for (let p in this._data) {\r\n            eventCount += Object.keys(this._data[p]).length;\r\n        }\r\n        parts.push(\"dictionary size (contexts): \" + dataCount);\r\n        parts.push(\"dictionary size (events): \" + eventCount);\r\n        return parts.join(\", \");\r\n    }\r\n    _split(str) {\r\n        return str.split(this._options.words ? /\\s+/ : \"\");\r\n    }\r\n    _join(arr) {\r\n        return arr.join(this._options.words ? \" \" : \"\");\r\n    }\r\n    _observeEvent(context, event) {\r\n        let key = this._join(context);\r\n        if (!(key in this._data)) {\r\n            this._data[key] = {};\r\n        }\r\n        let data = this._data[key];\r\n        if (!(event in data)) {\r\n            data[event] = 0;\r\n        }\r\n        data[event]++;\r\n    }\r\n    _sample(context) {\r\n        context = this._backoff(context);\r\n        let key = this._join(context);\r\n        let data = this._data[key];\r\n        let available = {};\r\n        if (this._options.prior) {\r\n            for (let event in this._priorValues) {\r\n                available[event] = this._priorValues[event];\r\n            }\r\n            for (let event in data) {\r\n                available[event] += data[event];\r\n            }\r\n        }\r\n        else {\r\n            available = data;\r\n        }\r\n        return RNG.getWeightedValue(available);\r\n    }\r\n    _backoff(context) {\r\n        if (context.length > this._options.order) {\r\n            context = context.slice(-this._options.order);\r\n        }\r\n        else if (context.length < this._options.order) {\r\n            context = this._prefix.slice(0, this._options.order - context.length).concat(context);\r\n        }\r\n        while (!(this._join(context) in this._data) && context.length > 0) {\r\n            context = context.slice(1);\r\n        }\r\n        return context;\r\n    }\r\n}\r\n","const RE_COLORS = /%([bc]){([^}]*)}/g;\r\nexport const TYPE_TEXT = 0;\r\nexport const TYPE_NEWLINE = 1;\r\nexport const TYPE_FG = 2;\r\nexport const TYPE_BG = 3;\r\nexport function measure(str, maxWidth) {\r\n    let result = { width: 0, height: 1 };\r\n    let tokens = tokenize(str, maxWidth);\r\n    let lineWidth = 0;\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        let token = tokens[i];\r\n        switch (token.type) {\r\n            case TYPE_TEXT:\r\n                lineWidth += token.value.length;\r\n                break;\r\n            case TYPE_NEWLINE:\r\n                result.height++;\r\n                result.width = Math.max(result.width, lineWidth);\r\n                lineWidth = 0;\r\n                break;\r\n        }\r\n    }\r\n    result.width = Math.max(result.width, lineWidth);\r\n    return result;\r\n}\r\nexport function tokenize(str, maxWidth) {\r\n    let result = [];\r\n    let offset = 0;\r\n    str.replace(RE_COLORS, function (match, type, name, index) {\r\n        let part = str.substring(offset, index);\r\n        if (part.length) {\r\n            result.push({\r\n                type: TYPE_TEXT,\r\n                value: part\r\n            });\r\n        }\r\n        result.push({\r\n            type: (type == \"c\" ? TYPE_FG : TYPE_BG),\r\n            value: name.trim()\r\n        });\r\n        offset = index + match.length;\r\n        return \"\";\r\n    });\r\n    let part = str.substring(offset);\r\n    if (part.length) {\r\n        result.push({\r\n            type: TYPE_TEXT,\r\n            value: part\r\n        });\r\n    }\r\n    return breakLines(result, maxWidth);\r\n}\r\nfunction breakLines(tokens, maxWidth) {\r\n    if (!maxWidth) {\r\n        maxWidth = Infinity;\r\n    }\r\n    let i = 0;\r\n    let lineLength = 0;\r\n    let lastTokenWithSpace = -1;\r\n    while (i < tokens.length) {\r\n        let token = tokens[i];\r\n        if (token.type == TYPE_NEWLINE) {\r\n            lineLength = 0;\r\n            lastTokenWithSpace = -1;\r\n        }\r\n        if (token.type != TYPE_TEXT) {\r\n            i++;\r\n            continue;\r\n        }\r\n        while (lineLength == 0 && token.value.charAt(0) == \" \") {\r\n            token.value = token.value.substring(1);\r\n        }\r\n        let index = token.value.indexOf(\"\\n\");\r\n        if (index != -1) {\r\n            token.value = breakInsideToken(tokens, i, index, true);\r\n            let arr = token.value.split(\"\");\r\n            while (arr.length && arr[arr.length - 1] == \" \") {\r\n                arr.pop();\r\n            }\r\n            token.value = arr.join(\"\");\r\n        }\r\n        if (!token.value.length) {\r\n            tokens.splice(i, 1);\r\n            continue;\r\n        }\r\n        if (lineLength + token.value.length > maxWidth) {\r\n            let index = -1;\r\n            while (1) {\r\n                let nextIndex = token.value.indexOf(\" \", index + 1);\r\n                if (nextIndex == -1) {\r\n                    break;\r\n                }\r\n                if (lineLength + nextIndex > maxWidth) {\r\n                    break;\r\n                }\r\n                index = nextIndex;\r\n            }\r\n            if (index != -1) {\r\n                token.value = breakInsideToken(tokens, i, index, true);\r\n            }\r\n            else if (lastTokenWithSpace != -1) {\r\n                let token = tokens[lastTokenWithSpace];\r\n                let breakIndex = token.value.lastIndexOf(\" \");\r\n                token.value = breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);\r\n                i = lastTokenWithSpace;\r\n            }\r\n            else {\r\n                token.value = breakInsideToken(tokens, i, maxWidth - lineLength, false);\r\n            }\r\n        }\r\n        else {\r\n            lineLength += token.value.length;\r\n            if (token.value.indexOf(\" \") != -1) {\r\n                lastTokenWithSpace = i;\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    tokens.push({ type: TYPE_NEWLINE });\r\n    let lastTextToken = null;\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        let token = tokens[i];\r\n        switch (token.type) {\r\n            case TYPE_TEXT:\r\n                lastTextToken = token;\r\n                break;\r\n            case TYPE_NEWLINE:\r\n                if (lastTextToken) {\r\n                    let arr = lastTextToken.value.split(\"\");\r\n                    while (arr.length && arr[arr.length - 1] == \" \") {\r\n                        arr.pop();\r\n                    }\r\n                    lastTextToken.value = arr.join(\"\");\r\n                }\r\n                lastTextToken = null;\r\n                break;\r\n        }\r\n    }\r\n    tokens.pop();\r\n    return tokens;\r\n}\r\nfunction breakInsideToken(tokens, tokenIndex, breakIndex, removeBreakChar) {\r\n    let newBreakToken = {\r\n        type: TYPE_NEWLINE\r\n    };\r\n    let newTextToken = {\r\n        type: TYPE_TEXT,\r\n        value: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))\r\n    };\r\n    tokens.splice(tokenIndex + 1, 0, newBreakToken, newTextToken);\r\n    return tokens[tokenIndex].value.substring(0, breakIndex);\r\n}\r\n","export function mod(x, n) {\r\n    return (x % n + n) % n;\r\n}\r\nexport function clamp(val, min = 0, max = 1) {\r\n    if (val < min)\r\n        return min;\r\n    if (val > max)\r\n        return max;\r\n    return val;\r\n}\r\nexport function capitalize(string) {\r\n    return string.charAt(0).toUpperCase() + string.substring(1);\r\n}\r\nexport function format(template, ...args) {\r\n    let map = format.map;\r\n    let replacer = function (match, group1, group2, index) {\r\n        if (template.charAt(index - 1) == \"%\") {\r\n            return match.substring(1);\r\n        }\r\n        if (!args.length) {\r\n            return match;\r\n        }\r\n        let obj = args[0];\r\n        let group = group1 || group2;\r\n        let parts = group.split(\",\");\r\n        let name = parts.shift() || \"\";\r\n        let method = map[name.toLowerCase()];\r\n        if (!method) {\r\n            return match;\r\n        }\r\n        obj = args.shift();\r\n        let replaced = obj[method].apply(obj, parts);\r\n        let first = name.charAt(0);\r\n        if (first != first.toLowerCase()) {\r\n            replaced = capitalize(replaced);\r\n        }\r\n        return replaced;\r\n    };\r\n    return template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);\r\n}\r\nformat.map = {\r\n    \"s\": \"toString\"\r\n};\r\n","export function Logo() {\r\n    let i = [\"%c{black}.%c{}.        . `  .: . :. : .  . :.  .  . . .     . .    '    '' .  .  . ..  \",\r\n\"%c{black}.%c{}   . .   :` . :   .  .'.' '....xxxxx...,'. '   ' .     ..\",\r\n\"%c{black}.%c{}; . ` .  . : . .' :  . ..XXXXXXXXXXXXXXXXXXXXx.    `     . \",\r\n\".    .  .  . . .   .  ..XXXXXXXXWWWWWWWWWWWWWWWWXXX.  .     .     \",\r\n\"%c{black}.%c{}   ' :  : . : .  ...XXXXXWWW'   W88N88@888888WWWWWXX.   .   .       . .\",\r\n\". ' .    . :   ...XXXXXXWWW'    M88N88GGGGGG888^8M 'WMBX.          .   ..  :\",\r\n\"%c{black}.%c{}    :     ..XXXXXXXXWWW'     M88888WWRWWWMW8oo88M   WWMX.     .    :    .\",\r\n\"%c{black}.%c{}      'XXXXXXXXXXXXWW'       WN8888WWWWW  W8@@@8M    BMBRX.         .  : :\",\r\n\".      XXXXXXXX=MMWW':  .      W8N888WWWWWWWW88888W      XRBRXX.  .       .\",\r\n\"%c{black}.%c{}....  ''XXXXXMM::::. .        W8@889WWWWWM8@8N8W      . . :RRXx.    .\",\r\n\"%c{black}.%c{}    ``...'''  MMM::.:.  .      W888N89999888@8W      . . ::::'RXV    .  :\",\r\n\".       ..'''''   MMMm::.  .      WW888N88888WW     .  . mmMMMMMRXx\",\r\n\"%c{black}.%c{} ..' .            ''MMmm .  .       WWWWWWW   . :. :,miMM'''  : ''`    .\",\r\n\".                .       ''MMMMmm . .  .  .   ._,mMMMM'''  :  ' .  :\",\r\n\"%c{black}.%c{}          .                  ''MMMMMMMMMMMMM''' .  : . '   .        .\",\r\n\"%c{black}.%c{}     .              .     .    .                      .         .\",\r\n\".                                         .          .         .\"];\r\n    return i;\r\n}\r\n\r\n","import { Entity } from \"../entity\";\r\nimport { deathFunction } from \"../helper/deathFunction\";\r\n\r\nexport class DamageBlock {\r\n    owner: Entity;\r\n    name: string;\r\n    expire: boolean = false;\r\n    multiplier: number;\r\n\r\n    constructor(multi: number) {\r\n        this.multiplier = multi;\r\n    }\r\n\r\n    startCountDown(){\r\n        var counter = 6;\r\n        var interval = setInterval(() => {\r\n            counter--;\r\n            if (counter == 2) {\r\n                this.owner.glyph.foreground = [216, 112, 147]\r\n            }\r\n            if (counter == 0 ) {\r\n                clearInterval(interval);\r\n                let targets = this.owner._map.getEntitiesAt(this.owner.x, this.owner.x2, this.owner.y, this.owner.y2);\r\n                if (targets.length > 0) {\r\n                    this.owner.skill(targets);\r\n                }\r\n                deathFunction(this.owner);\r\n            }\t\r\n        }, 100);\r\n    }\r\n}","import { Entity } from \"../entity\";\r\n\r\nexport abstract class Equipment {\r\n    owner: Entity;\r\n    power_bonus: number;\r\n    skill_bonus: number;\r\n    defense_bonus: number;\r\n    hp_bonus: number;\r\n    name: string;\r\n    expire: boolean = false;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    strike() {\r\n    }\r\n\r\n    what() {\r\n        \r\n    }\r\n}","import { Entity } from \"../entity\";\r\nimport { deathFunction } from \"../helper/deathFunction\";\r\nimport { MessageType } from \"../helper/messageType\";\r\nimport { Color } from \"../../lib\";\r\n\r\nexport class Fighter {\r\n    owner: Entity;\r\n    rank: number;\r\n    base_max_hp: number;\r\n    hp : number;\r\n    base_defense: number;\r\n    base_power: number\r\n    xp: number;\r\n    status: string;\r\n\r\n    constructor(hp: number, def: number, atk: number, xp: number) {\r\n        this.hp = hp;\r\n        this.base_max_hp = hp;\r\n        this.base_defense = def;\r\n        this.base_power = atk;\r\n        this.xp = xp;\r\n        this.status = 'normal'\r\n    }\r\n\r\n    power() {\r\n        let bonus = 0;\r\n        if (this.owner != undefined && this.owner.equipment != undefined) {\r\n            bonus = this.owner.equipment.power_bonus;\r\n        }\r\n        return this.base_power + bonus\r\n    }\r\n\r\n    skill_power() {\r\n        if (this.owner.ai != undefined) return this.power() * this.owner.ai.skill_bonus\r\n        if (this.owner.equipment != undefined) {\r\n            return this.power() * this.owner.equipment.skill_bonus;\r\n        }\r\n    }\r\n\r\n    defense() {\r\n        let bonus = 0;\r\n        if (this.owner != undefined && this.owner.equipment != undefined) {\r\n            bonus = this.owner.equipment.defense_bonus;\r\n        }\r\n        return this.base_defense + bonus\r\n    }\r\n\r\n    max_hp() {\r\n        let bonus = 0;\r\n        if (this.owner != undefined && this.owner.equipment != undefined) {\r\n            bonus = this.owner.equipment.hp_bonus;\r\n        }\r\n        return this.base_max_hp + bonus\r\n    }\r\n\r\n    takeDamage(amount: number){\r\n        this.hp -= amount\r\n        if (this.hp <= 0) {\r\n            this.hp = 0\r\n            let msg: MessageType = {\r\n                message: \"%c{0}\" +this.owner.name + \"%c{1} morreu\",\r\n                type: 'death',\r\n                color1: this.owner.glyph.foreground,\r\n                color2: [255,255,255]\r\n            };\r\n            this.owner._map.messageLog.addMessage(msg);//\"%c{\"+ this.owner.glyph.foreground +\"}\" + this.owner.name + \"%c{} morreu\")\r\n            deathFunction(this.owner)\r\n        }\r\n    }\r\n\r\n    heal(amount: number) {\r\n        this.hp += amount;\r\n        if (this.hp > this.max_hp()) {\r\n            this.hp = this.max_hp()\r\n        }\r\n    }\r\n\r\n    attack(target: Entity): MessageType {\r\n        let result: MessageType = {\r\n            message : '',\r\n            type : 'fight',\r\n            color1 : target.glyph.foreground,\r\n            color2 : [255,255,255]\r\n        };\r\n        let damage = this.power() * (1 - (target.fighter.defense()/(10 + target.fighter.defense())));\r\n        damage = +damage.toFixed(2);\r\n\r\n        if (damage > 0) {\r\n            // results.append({'message': Message('{0} ataca {1} e mandou {2} de dano.'.format(\r\n            //     this.owner.name.capitalize(), target.name, str(round(damage))), libtcod.white)})\r\n            // results.extend(target.fighter.take_damage(damage))\r\n            target.fighter.takeDamage(damage)\r\n            result.message = this.owner.name + \" bateu em um %c{0}\" + target.name + \"%c{1} com \"+ damage + \" de dano! (\" +target.fighter.hp +\")\";\r\n        } else {\r\n            result.message = this.owner.name + \" bateu em um %c{0}\" + target.name + \"%c{1} mas não causou dano!\";\r\n        }\r\n        return result\r\n    }\r\n\r\n    equipment_skill(target: Entity, dmgBlock: Entity) {\r\n        let result: MessageType = {\r\n            message : '',\r\n            type : 'skill',\r\n            color1 : target.glyph.foreground,\r\n            color2 : [255,255,255]\r\n        };\r\n        let damage = this.skill_power()*dmgBlock.damage.multiplier * (1 - (target.fighter.defense()/(10 + target.fighter.defense())));\r\n        damage = +damage.toFixed(2);\r\n\r\n        if (damage > 0) {\r\n            // results.append({'message': Message('{0} ataca {1} e mandou {2} de dano.'.format(\r\n            //     this.owner.name.capitalize(), target.name, str(round(damage))), libtcod.white)})\r\n            // results.extend(target.fighter.take_damage(damage))\r\n            target.fighter.takeDamage(damage)\r\n            result.message = this.owner.name + \" usou uma \" + dmgBlock.name + \" em um %c{0}\" + target.name + \"%c{1} com \"+ damage + \" de dano! (\" +target.fighter.hp +\")\";\r\n        } else {\r\n            result.message = this.owner.name + \" bateu em um %c{0}\" + target.name + \"%c{1} mas não causou dano!\";\r\n        }\r\n        return result\r\n    }\r\n}","import { createDamageBlock } from \"../helper/createDamageBlock\";\r\nimport { Entity } from \"../entity\";\r\n\r\nexport interface skilllist {\r\n    name: string;\r\n    cooldown: number;\r\n    maxCooldown: number;\r\n\r\n}\r\n\r\nexport function poison_cloud(owner: Entity, target: Entity, multi: number) {\r\n    let nameAtk = 'nuvem de esporos';\r\n    createDamageBlock(owner, target.x, target.y, nameAtk, multi);\r\n    createDamageBlock(owner, target.x+1, target.y, nameAtk, multi);\r\n    createDamageBlock(owner, target.x-1, target.y, nameAtk, multi);\r\n    createDamageBlock(owner, target.x, target.y+1, nameAtk, multi);\r\n    createDamageBlock(owner, target.x, target.y-1, nameAtk, multi);\r\n}\r\n\r\nexport function poison_shield(owner: Entity, target: Entity, multi: number) {\r\n    let nameAtk = 'escudo de esporos';\r\n    createDamageBlock(owner, owner.x+1, owner.y-1, nameAtk, multi);\r\n    createDamageBlock(owner, owner.x+1, owner.y, nameAtk, multi);\r\n    createDamageBlock(owner, owner.x+1, owner.y+1, nameAtk, multi);\r\n    createDamageBlock(owner, owner.x, owner.y+1, nameAtk, multi);\r\n    createDamageBlock(owner, owner.x, owner.y-1, nameAtk, multi);\r\n    createDamageBlock(owner, owner.x-1, owner.y-1, nameAtk, multi);\r\n    createDamageBlock(owner, owner.x-1, owner.y, nameAtk, multi);\r\n    createDamageBlock(owner, owner.x-1, owner.y+1, nameAtk, multi);\r\n}\r\n\r\nexport function punch(owner: Entity, target: Entity, multi: number) {\r\n    let nameAtk = 'socao';\r\n    if (owner.face == 'n') {\r\n        createDamageBlock(owner, owner.x, owner.y-1, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x, owner.y-2, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x, owner.y-3, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x, owner.y-4, nameAtk, multi);\r\n    }\r\n    if (owner.face == 's') {\r\n        createDamageBlock(owner, owner.x, owner.y+1, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x, owner.y+2, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x, owner.y+3, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x, owner.y+4, nameAtk, multi);\r\n    }\r\n    if (owner.face == 'w') {\r\n        createDamageBlock(owner, owner.x-1, owner.y, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x-2, owner.y, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x-3, owner.y, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x-4, owner.y, nameAtk, multi);\r\n    }\r\n    if (owner.face == 'e') {\r\n        createDamageBlock(owner, owner.x+1, owner.y, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x+2, owner.y, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x+3, owner.y, nameAtk, multi);\r\n        createDamageBlock(owner, owner.x+4, owner.y, nameAtk, multi);\r\n    }\r\n}","import { Equipment } from \"../../components/equipment\";\r\nimport { Entity } from \"../../entity\";\r\nimport { DamageBlock } from \"../../components/damageBlock\";\r\nimport { Glyph } from \"../../glyph\";\r\nimport { createDamageBlock } from \"../../helper/createDamageBlock\";\r\n\r\nexport class Knife extends Equipment {\r\n    power_bonus: number = 2;\r\n    skill_bonus: number = 1.5;\r\n    defense_bonus: number = 0;\r\n    hp_bonus: number = 0;\r\n    owner: Entity;\r\n    name: string = 'faca';\r\n    cooldown: number = 10\r\n\r\n    constructor() {\r\n        super();\r\n        this.startCountDown();\r\n    }\r\n\r\n    startCountDown(){\r\n        var interval = setInterval(() => {\r\n            if ( this.cooldown > 0) this.cooldown--;\r\n        }, 100);\r\n    }\r\n\r\n    strike() {\r\n        if ( this.cooldown == 0) {\r\n            this.cooldown = 10;\r\n            let dir =this.owner.face;\r\n            let dmg = new DamageBlock(this.skill_bonus)\r\n            let attack:Entity = null;\r\n            dmg.owner = this.owner;\r\n            if (this.owner.face == 's') { createDamageBlock(this.owner, this.owner.x, this.owner.y+1, this.name, this.skill_bonus);}\r\n            else if (this.owner.face == 'n') { createDamageBlock(this.owner, this.owner.x, this.owner.y-1, this.name, this.skill_bonus);}\r\n            else if (this.owner.face == 'w') { createDamageBlock(this.owner, this.owner.x-1, this.owner.y, this.name, this.skill_bonus);}\r\n            else if (this.owner.face == 'e') { createDamageBlock(this.owner, this.owner.x+1, this.owner.y, this.name, this.skill_bonus);}\r\n        }\r\n    }\r\n}","import { Equipment } from \"../../components/equipment\";\r\nimport { Entity } from \"../../entity\";\r\nimport { DamageBlock } from \"../../components/damageBlock\";\r\nimport { Glyph } from \"../../glyph\";\r\nimport { createDamageBlock } from \"../../helper/createDamageBlock\";\r\n\r\nexport class Sword extends Equipment {\r\n    power_bonus: number = 4;\r\n    skill_bonus: number = 1.7;\r\n    defense_bonus: number = 0;\r\n    hp_bonus: number = 0;\r\n    owner: Entity;\r\n    name: string = 'espada';\r\n    cooldown: number = 10\r\n\r\n    constructor() {\r\n        super();\r\n        this.startCountDown();\r\n    }\r\n\r\n    startCountDown(){\r\n        var interval = setInterval(() => {\r\n            if ( this.cooldown > 0) this.cooldown--;\r\n        }, 100);\r\n    }\r\n\r\n    strike() {\r\n        if ( this.cooldown == 0) {\r\n            this.cooldown = 10;\r\n            let dir =this.owner.face;\r\n            let dmg = new DamageBlock(this.skill_bonus)\r\n            let attack:Entity = null;\r\n            dmg.owner = this.owner;\r\n            if (this.owner.face == 's') { \r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y+1, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y+2, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y+3, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y+4, this.name, this.skill_bonus);\r\n            }\r\n            else if (this.owner.face == 'n') { \r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y-1, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y-2, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y-3, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x, this.owner.y-4, this.name, this.skill_bonus);\r\n            }\r\n            else if (this.owner.face == 'w') { \r\n                createDamageBlock(this.owner, this.owner.x-1, this.owner.y, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x-2, this.owner.y, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x-3, this.owner.y, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x-4, this.owner.y, this.name, this.skill_bonus);\r\n            }\r\n            else if (this.owner.face == 'e') { \r\n                createDamageBlock(this.owner, this.owner.x+1, this.owner.y, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x+2, this.owner.y, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x+3, this.owner.y, this.name, this.skill_bonus);\r\n                createDamageBlock(this.owner, this.owner.x+4, this.owner.y, this.name, this.skill_bonus);\r\n            }\r\n        }\r\n    }\r\n}","import { Entity } from \"../../entity\";\r\nimport { randint } from \"../../helper/randint\";\r\nimport { Enemy } from \"../../helper/enemy\";\r\nimport { deathFunction } from \"../../helper/deathFunction\";\r\nimport { DamageBlock } from \"../../components/damageBlock\";\r\nimport { createDamageBlock } from \"../../helper/createDamageBlock\";\r\nimport { skilllist, poison_cloud, poison_shield } from \"../../components/skilllist\"\r\n\r\nexport class Fungi implements Enemy {\r\n    skill_bonus: number = 1;\r\n    owner: Entity;\r\n    skills: skilllist[];\r\n\r\n    constructor() {\r\n        this.skills = [{\r\n            name: 'poison cloud',\r\n            cooldown: 10,\r\n            maxCooldown: 10\r\n        },\r\n        {\r\n            name: 'poison shield',\r\n            cooldown: 20,\r\n            maxCooldown: 20\r\n        }]\r\n    }\r\n\r\n    startCountDown(seconds: number){\r\n        var counter = seconds;\r\n        var interval = setInterval(() => {\r\n            counter--;\r\n            this.skills.forEach(element => {\r\n                if (element.cooldown < element.maxCooldown) element.cooldown++;\r\n            });\r\n            if (counter < 0 ) {\r\n                \r\n                // code here will run when the counter reaches zero.\r\n                if (this.owner.fighter.hp == 0) {\r\n                    clearInterval(interval);\r\n                    deathFunction(this.owner);\r\n                }\r\n                else {\r\n                    counter = this.owner.maxStamina;\r\n                    this.act();\r\n                }\r\n            }\t\r\n        }, 100);\r\n    }\r\n\r\n    act() {\r\n        let player = this.owner._map.getPlayer();\r\n        if (player == undefined) return;\r\n        let dist = Math.sqrt( (player.x - this.owner.x)**2+(player.y - this.owner.y)**2 );\r\n        if (dist < this.owner.sight*1.4) {\r\n            if (this.skills[0].cooldown == this.skills[0].maxCooldown) {\r\n                poison_cloud(this.owner, player, 0.5);\r\n                this.skills[0].cooldown = 0\r\n            }\r\n            //this.owner.hunt(player);\r\n            //this.poison_cloud(player);\r\n        } else {\r\n            this.owner.wander();\r\n        }\r\n        if (dist < 2) if (this.skills[1].cooldown == this.skills[1].maxCooldown) {\r\n            poison_shield(this.owner, player, 1);\r\n            this.skills[1].cooldown = 0\r\n        }\r\n    }\r\n\r\n}","import { Entity } from \"../../entity\";\r\nimport { randint } from \"../../helper/randint\";\r\nimport { Enemy } from \"../../helper/enemy\";\r\nimport { deathFunction } from \"../../helper/deathFunction\";\r\nimport { skilllist, punch } from \"../../components/skilllist\";\r\n\r\nexport class Orc implements Enemy {\r\n    skill_bonus: number = 1.5;\r\n    owner: Entity;\r\n    skills: skilllist[];\r\n\r\n    constructor() {\r\n        this.skills = [{\r\n            name: 'punch',\r\n            cooldown: 12,\r\n            maxCooldown: 12\r\n        }]\r\n    }\r\n\r\n    startCountDown(seconds: number){\r\n        var counter = seconds;\r\n        var interval = setInterval(() => {\r\n            counter--;\r\n            this.skills.forEach(element => {\r\n                if (element.cooldown < element.maxCooldown) element.cooldown++;\r\n            });\r\n            if (counter < 0 ) {\r\n                \r\n                // code here will run when the counter reaches zero.\r\n                if (this.owner.fighter.hp == 0) {\r\n                    clearInterval(interval);\r\n                    deathFunction(this.owner);\r\n                }\r\n                else {\r\n                    counter = this.owner.maxStamina;\r\n                    this.act();\r\n                }\r\n            }\t\r\n        }, 100);\r\n    }\r\n\r\n    act() {\r\n        let player = this.owner._map.getPlayer();\r\n        if (player == undefined) return;\r\n        let dist = Math.sqrt( (player.x - this.owner.x)**2+(player.y - this.owner.y)**2 );\r\n        if (dist < this.owner.sight) {\r\n            this.owner.hunt(player);\r\n            if (dist <= 5 && (this.owner.x == player.x || this.owner.y == player.y)) {\r\n                punch(this.owner, player, 1.2);\r\n            }\r\n        } else {\r\n            this.owner.wander();\r\n        }\r\n    }\r\n}","import { Entity } from \"../../entity\";\r\nimport { randint } from \"../../helper/randint\";\r\nimport { Enemy } from \"../../helper/enemy\";\r\nimport { deathFunction } from \"../../helper/deathFunction\";\r\nimport { skilllist, punch } from \"../../components/skilllist\";\r\n\r\nexport class Troll implements Enemy {\r\n    skill_bonus: number = 1.5;\r\n    owner: Entity;\r\n    skills: skilllist[];\r\n\r\n    constructor() {\r\n        this.skills = [{\r\n            name: 'punch',\r\n            cooldown: 12,\r\n            maxCooldown: 12\r\n        }]\r\n    }\r\n\r\n    startCountDown(seconds: number){\r\n        var counter = seconds;\r\n        var interval = setInterval(() => {\r\n            counter--;\r\n            this.skills.forEach(element => {\r\n                if (element.cooldown < element.maxCooldown) element.cooldown++;\r\n            });\r\n            if (counter < 0 ) {\r\n                \r\n                // code here will run when the counter reaches zero.\r\n                if (this.owner.fighter.hp == 0) {\r\n                    clearInterval(interval);\r\n                    deathFunction(this.owner);\r\n                }\r\n                else {\r\n                    counter = this.owner.maxStamina;\r\n                    this.act();\r\n                }\r\n            }\t\r\n        }, 100);\r\n    }\r\n\r\n    act() {\r\n        let player = this.owner._map.getPlayer();\r\n        if (player == undefined) return;\r\n        let dist = Math.sqrt( (player.x - this.owner.x)**2+(player.y - this.owner.y)**2 );\r\n        if (dist < this.owner.sight) {\r\n            this.owner.hunt(player);\r\n            if (dist <= 5 && (this.owner.x == player.x || this.owner.y == player.y)) {\r\n                punch(this.owner, player, 1.2);\r\n            }\r\n        } else {\r\n            this.owner.wander();\r\n        }\r\n    }\r\n}","import { Glyph } from \"./glyph\";\r\nimport { Map } from \"./map\";\r\nimport { Fighter } from \"./components/fighter\";\r\nimport { Path } from \"../lib\";\r\nimport { randint } from \"./helper/randint\";\r\nimport { Equipment } from \"./components/equipment\";\r\nimport { DamageBlock } from \"./components/damageBlock\";\r\nimport { Enemy } from \"./helper/enemy\";\r\nimport { deathFunction } from \"./helper/deathFunction\";\r\nimport { MessageType } from \"./helper/messageType\";\r\n\r\nexport class Entity {\r\n    x: number;\r\n    y: number;\r\n    x2: number;\r\n    y2: number;\r\n    glyph: Glyph;\r\n    name: string;\r\n    blocks: boolean;\r\n    render_order: number;\r\n    maxStamina: number;\r\n    stamina: number;\r\n    _map: Map;\r\n    fighter: Fighter;\r\n    ai: any;\r\n    sight: number;\r\n    cooldown: number;\r\n    face: string;\r\n    item: Equipment;\r\n    // inventory\r\n    // cooldown\r\n    // maxCooldown \r\n    damage: DamageBlock;\r\n    // stairs\r\n    // level\r\n    equipment: Equipment;\r\n    // equippable\r\n    owner: Entity;\r\n    player: boolean;\r\n\r\n    constructor(x:number, y:number, glyph: Glyph, name: string, size:number = 0, blocks: boolean = false, maxStamina:number=0,\r\n                render_order:number = 99, fighter: Fighter = undefined, ai: any = undefined, player: boolean = false,\r\n                item: any = undefined, inventory: any = undefined, damage: DamageBlock = undefined, stairs: any = undefined, level: any = undefined, \r\n                equipment: Equipment = undefined, equippable: any = undefined, _map: Map = undefined, _entities: Entity[] = undefined) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.x2 = x+size-1;\r\n        this.y2 = y+size-1;\r\n        this.glyph = glyph;\r\n        this.name = name;\r\n        this.blocks = blocks;\r\n        this.render_order = render_order;\r\n        this.maxStamina = maxStamina;\r\n        this.stamina = 0;\r\n        this._map = _map;\r\n        this.ai = ai;\r\n        this.fighter = fighter;\r\n        this.equipment = equipment;\r\n        this.cooldown = 0;\r\n        this.face = 'n';\r\n        this.damage = damage;\r\n        this.player = player;\r\n        this.item = item;\r\n\r\n        if (this.player == true) {\r\n            this.startMoveCountDown();\r\n            this.startAttackCountDown();\r\n        }\r\n\r\n        if (this.ai != undefined) {\r\n            this.ai.owner = this;\r\n            this.ai.startCountDown(this.maxStamina);\r\n            this.sight = 10;\r\n        } else this.sight = 12; //12\r\n\r\n        if (this.fighter != undefined) {\r\n            this.fighter.owner = this;\r\n        }\r\n\r\n        if (this.equipment != undefined) {\r\n            this.equipment.owner = this;\r\n        }\r\n\r\n        if (this.damage != undefined) {\r\n            this.damage.owner = this;\r\n        }\r\n\r\n        if (this.item != undefined) {\r\n            this.item.owner = this;\r\n        }\r\n    }\r\n\r\n    move(dx: number, dy: number, map: Map) {\r\n        let moveerror = this.changeFace(dx, dy);\r\n        if (this.player == true && this.stamina < this.maxStamina && moveerror ) return;\r\n        else if (this.player == true) this.stamina = 0\r\n        let tx = this.x + dx;\r\n        let tx2 = this.x2 + dx;\r\n        let ty = this.y + dy;\r\n        let ty2 = this.y2 + dy;\r\n        if (dx == 0 && dy == 0) return;\r\n        if (map.getMovableArea(tx, tx2, ty, ty2)) {\r\n            let targets: Entity[] = [];\r\n            targets = map.getEntitiesAt(tx, tx2, ty, ty2);\r\n            if (targets.length == 0) {\r\n                this.x = tx;\r\n                this.x2 = tx2;\r\n                this.y = ty;\r\n                this.y2 = ty2;\r\n            } else {\r\n                if (this.player == true) {\r\n                    if (this.cooldown == 0) {\r\n                        this.attack(targets);\r\n                        this.cooldown = 5;\r\n                    }\r\n                } else {\r\n                    this.attack(targets);\r\n                }\r\n            }\r\n        } else {\r\n            // if (this.glyph.char == '@') this._map.messageLog.addMessage(\"this is a %c{goldenrod}wall%c{}!\");\r\n            // else this._map.messageLog.addMessage(\"hey fungi, this is a %c{goldenrod}wall%c{}!\");\r\n        }\r\n    }\r\n\r\n    private changeFace(dx: number, dy: number):boolean {\r\n        if (dx == -1) {\r\n            if (this.face == 'w') return true;\r\n            this.face = 'w';\r\n            return false;\r\n        }\r\n        if (dx == 1) {\r\n            if (this.face == 'e') return true;\r\n            this.face = 'e';\r\n            return false;\r\n        }\r\n        if (dy == -1) {\r\n            if (this.face == 'n') return true;\r\n            this.face = 'n';\r\n            return false;\r\n        }\r\n        if (dy == 1) {\r\n            if (this.face == 's') return true;\r\n            this.face = 's';\r\n            return false;\r\n        }\r\n    }\r\n\r\n    startMoveCountDown(){\r\n        var moveinterval = setInterval(() => {\r\n            if (this.stamina <= this.maxStamina) {\r\n                this.stamina++;\r\n            }\r\n                // code here will run when the counter reaches zero.\r\n            if (this.fighter.hp == 0) {\r\n                clearInterval(moveinterval);\r\n                deathFunction(this);\r\n            }\r\n        }, 100);\r\n    }\r\n    startAttackCountDown(){\r\n        var attackinterval = setInterval(() => {\r\n            if (this.cooldown > 0) {\r\n                this.cooldown--;\r\n            }\r\n                // code here will run when the counter reaches zero.\r\n            if (this.fighter.hp == 0) {\r\n                clearInterval(attackinterval);\r\n                deathFunction(this);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    equip(item: Entity) {\r\n        console.log(item);\r\n        let equip: MessageType = {\r\n            message : this.name + \" empunhou uma %c{0}\" + item.name.toString() + \"%c{1} !\",\r\n            type : 'pickup',\r\n            color1 : item.glyph.foreground,\r\n            color2 : [255,255,255]\r\n        };\r\n        this._map.messageLog.addMessage(equip);\r\n        if (this.equipment == undefined) {\r\n            this.equipment = item.item;\r\n            this.equipment.owner = this;\r\n            item.item.expire = true;\r\n        } else {\r\n            // colocar na backpack\r\n            this.equipment = item.item;\r\n            this.equipment.owner = this;\r\n            item.item.expire = true;\r\n        }\r\n\r\n    }\r\n\r\n    attack(targets: Entity[]) {\r\n        if (this.fighter != undefined) {\r\n            if (this.glyph.char == '@') {\r\n                let result = this.fighter.attack(targets[0])\r\n                this._map.messageLog.addMessage(result);\r\n            } else {\r\n                let player: any = undefined;\r\n                targets.forEach(element => {\r\n                    if (element.glyph.char == '@') {\r\n                        player = element;\r\n                    }\r\n                });\r\n                if (player != undefined) { \r\n                    let result = this.fighter.attack(player)\r\n                    this._map.messageLog.addMessage(result);\r\n                } else {\r\n                    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    skill(targets: Entity[]) {\r\n        targets.forEach((entity, i) => {\r\n            if (entity != this.owner) {\r\n                if (entity.fighter != undefined) this._map.messageLog.addMessage(this.owner.fighter.equipment_skill(entity, this));\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    hunt(target: Entity){\r\n        let source = this;\r\n        var path = new Path.AStar(target.x, target.y, function(x: number, y: number) {\r\n            // If an entity is present at the tile, can't move there.\r\n            let entity = source._map.getEntitiesAt(this.x1, this.x2, this.y1, this.y2);\r\n            if (entity.length > 0) {\r\n                return false;\r\n            }\r\n            return source._map.getTile(x, y)._isWalkable;\r\n        }, {topology: 8});\r\n        var count = 0;\r\n        path.compute(source.x, source.y, function(x: number, y: number) {\r\n            if (count == 1) {\r\n                let dx = x - source.x;\r\n                let dy = y - source.y;\r\n                source.move(dx, dy, source._map);\r\n            }\r\n            if (count > 1) {\r\n                return;\r\n            }\r\n            count++;\r\n        });\r\n    }\r\n\r\n    wander() {\r\n        let dy = 0;\r\n        let dx = 0\r\n        while ( dy ==0 && dx == 0) {\r\n            dy = randint(-1,1);\r\n            dx = randint(-1,1);\r\n        }\r\n        this.move(dx, dy, this._map);\r\n    }\r\n\r\n    // startCountDown(seconds: number){\r\n    //     var counter = seconds;\r\n    //     var interval = setInterval(() => {\r\n    //         //(counter);\r\n    //         counter--;\r\n    //         if (counter < 0 ) {\r\n                \r\n    //             // code here will run when the counter reaches zero.\r\n                \r\n    //             //clearInterval(interval);\r\n    //             counter = this.maxStamina;\r\n    //             this.act();\r\n    //         }\t\r\n    //     }, 1000);\r\n    // }\r\n\r\n    act() {\r\n    }\r\n}","import { Display, Color } from \"../lib/index\";\r\nimport { Tile } from \"./tiles\";\r\nimport { Entity } from \"./entity\";\r\nimport { playScreen, startScreen, winScreen, loseScreen, debugScreen } from \"./screens\";\r\nimport { KEYS } from \"../lib/constants\";\r\nimport { Objeto } from \"./interface/objeto\";\r\nimport { Glyph } from \"./glyph\";\r\nimport { Fighter } from \"./components/fighter\";\r\nimport { Messagelog } from \"./messages\";\r\nimport { Map } from \"./map\";\r\nimport { Logo } from \"../logo/logo\";\r\n\r\n\r\n\r\nexport class Game {\r\n\t_display : Display;\r\n\t_inventory: Display;\r\n\t_messaging: Display;\r\n\tmessageLog: Messagelog;\r\n\t_messageBoxSize: number = 10;\r\n\t_currentScreen : any;\r\n\t//_screenWidth: number = 90;\r\n\t//_screenHeight: number = 30;\r\n\t_screenWidth: number = 120;\r\n\t_screenHeight: number = 90;\r\n\t_centerX: number;\r\n\t_centerY: number;\r\n\tScreen : any;\r\n\t_map : Map;\r\n\t_player: Entity;\r\n\t_entities: Entity[] = [];\r\n\ttimer: boolean = true;\r\n\tlogo: any;\r\n\r\n\tconstructor() {\r\n\t\tthis._centerX = 0;\r\n\t\tthis._centerY = 0;\r\n\t\tthis._display= null;\r\n\t\tthis._currentScreen= null;\r\n\t\tthis.Screen = {\r\n\t\t\tstartScreen : startScreen(),\r\n\t\t\tdebugScreen : debugScreen(),\r\n\t\t\tplayScreen : playScreen(),\r\n\t\t\twinScreen : winScreen(),\r\n\t\t\tloseScreen : loseScreen()\r\n\t\t}\r\n\t\tthis._map = null;\r\n\t\tthis._entities = new Array<Entity>();\r\n\t}\r\n\r\n\tinit() {\r\n\t\t// Any necessary initialization will go here.\r\n\t\t\r\n\t\t\r\n\t\tthis.logo = Logo();\r\n\t\t\r\n\t\tthis._display = new Display({width: this._screenWidth, height: this._screenHeight});\r\n\t\tthis._inventory = new Display({width: 10, height: this._screenHeight});\r\n\t\tthis._messaging = new Display({width: this._screenWidth, height: this._messageBoxSize});\r\n\t\tthis.messageLog = new Messagelog(0, this._screenHeight, this._messageBoxSize);\r\n\t\tthis.messageLog.messages = [{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"}, \r\n\t\t\t{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"}, \r\n\t\t\t{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"},\r\n\t\t\t{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"},\r\n\t\t\t{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"},\r\n\t\t\t{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"},\r\n\t\t\t{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"},\r\n\t\t\t{message: '', color1 : [0,0,0], color2 : [0,0,0], type : \"empty\"}]\r\n\t\tthis._inventory.drawText(0, 1, 'ola');\r\n\t\t//let game = this; // So that we don't lose this\r\n\t\tlet event = \"keydown\";\r\n\r\n\t\tlet menu = document.getElementById(\"menu\")\r\n\t\twindow.addEventListener(event, e => {\r\n\t\t\t// When an event is received, send it to the\r\n\t\t\t// screen if there is one\r\n\t\t\tif (this._currentScreen !== null) {\r\n\t\t\t\t// Send the event type and data to the screen\r\n\t\t\t\tthis._currentScreen.handleInput(event, e, this);\r\n\t\t\t\tthis._display.clear();\r\n\t\t\t\tthis._currentScreen.render(this._display, this);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//add event listener to inv\r\n\t\tmenu.addEventListener(\"click\", e => {\r\n\t\t\tthis._currentScreen.handleInput(\"click\", e, this);\r\n\t\t\tthis._display.clear();\r\n\t\t\tthis._currentScreen.render(this._display, this);\r\n\t\t});\r\n\r\n\t\t//this.messageLog.addMessage(\"teste1\");\r\n\t\t//this.messageLog.addMessage(\"teste%c{red}2%c{} !\");\r\n\t\t//this.messageLog.addMessage(\"teste%c{#00cc00}3%c{} welcome\");\r\n\t\t//this.writeMessages();\r\n\t}\r\n\r\n\tgetDisplay() {\r\n\t\treturn this._display;\r\n\t}\r\n\r\n\tgetInventory() {\r\n\t\treturn this._inventory;\r\n\t}\r\n\r\n\tgetMessaging() {\r\n\t\treturn this._messaging;\r\n\t}\r\n\r\n\twriteMessages() {\r\n\t\tlet x = 0;\r\n\t\tlet alpha = 0;\r\n\t\tlet fading = '';\r\n\t\tlet fading2 = '';\r\n\t\tlet out = '';\r\n\t\tlet out2 = '';\r\n\t\tfor (let message of this.messageLog.messages) {\r\n\t\t\talpha += 0.1;\r\n\t\t\tif (message.type == 'death' || message.type == 'fight' || message.type == 'skill' || message.type == 'pickup') {\r\n\t\t\t\tfading = \"%c{rgb(\" + Math.round(message.color1[0]*alpha).toString() +\",\"+Math.round(message.color1[1]*alpha).toString() +\",\"+Math.round(message.color1[2]*alpha).toString() +\")}\";\r\n\t\t\t\tfading2 = \"%c{rgb(\" + Math.round(message.color2[0]*alpha).toString() +\",\"+Math.round(message.color2[1]*alpha).toString() +\",\"+Math.round(message.color2[2]*alpha).toString() +\")}\";\r\n\t\t\t\tout =  message.message.replace(\"%c{0}\", fading);\r\n\t\t\t\tout2 =  out.replace(\"%c{1}\", fading2);\r\n\t\t\t\tthis._messaging.drawText(1, x, ''+fading2+out2);\r\n\r\n\t\t\t}\r\n\t\t\tx += 1\r\n\t\t}\r\n\t}\r\n\r\n\twriteStats() {\r\n\t\tlet hp = this._player.fighter.hp;\r\n\t\tlet max_hp = this._player.fighter.max_hp();\r\n\t\tthis._inventory.drawText(1, 1, \"Stats: \")\r\n\t\tthis._inventory.drawText(1, 3, \"%c{rgb(255,0,0)}HP: %c{}\" +hp + \"/\" +max_hp);\r\n\t\tthis._inventory.drawText(1, 5, \"%c{blue}Atk: %c{}\"+this._player.fighter.power());\r\n\t\tthis._inventory.drawText(1, 7, \"%c{yellow}Def: %c{}\"+this._player.fighter.defense());\r\n\t}\r\n\r\n\tswitchScreen(screen : any) {\r\n\t    // If we had a screen before, notify it that we exited\r\n\t    if (this._currentScreen !== null) {\r\n\t        this._currentScreen.exit();\r\n\t    }\r\n\t    // Clear the display\r\n\t    this.getDisplay().clear();\r\n\t    // Update our current screen, notify it we entered\r\n\t\t// and then render it\r\n\t\tthis._currentScreen = screen;\r\n\t    if (!this._currentScreen !== null) {\r\n\t\t\tthis._currentScreen.enter(this)\r\n\t\t\tthis.refresh();\r\n\t    }\r\n\t}\r\n\r\n\trefresh() {\r\n\t\tthis._display.clear();\r\n\t\tthis._messaging.clear();\r\n\t\tthis._inventory.clear();\r\n\t\tif (this._currentScreen == this.Screen.playScreen) {\r\n\t\t\tthis.writeMessages();\r\n\t\t\tthis.writeStats();\r\n\t\t}\r\n\t\tthis._currentScreen.render(this._display, this);\r\n\t}\r\n\r\n\tstartCountDown(){\r\n\t\tlet counter = 1\r\n        var interval = setInterval(() => {\r\n\t\t\t//console.log(counter);\r\n\t\t\t\r\n            counter--;\r\n            if (counter < 0) {\r\n                \r\n                // code here will run when the counter reaches zero.\r\n\t\t\t\tif (!this.timer) clearInterval(interval);\r\n\t\t\t\telse counter = 1;\r\n\t\t\t\tthis.refresh();\r\n            }\t\r\n        }, 50);\r\n\t}\r\n\r\n}\r\n\r\n\r\nwindow.onload = function() {\r\n\tlet game = new Game();\r\n\t// Initialize the game\r\n\tlet fighter = new Fighter(9995, 1, 4, 0);\r\n\tlet player = new Entity(60, 45, new Glyph('@', [0,0,0], [0, 191, 255]), 'Player', 1, true, 1, 1, fighter, undefined, true);\r\n\tgame._player = player\r\n\tgame._entities = [game._player];\r\n\tgame.init();\r\n\t// Add the container to our HTML page\r\n\tlet doc = document.getElementById(\"game\");\r\n\tdoc.appendChild(game.getDisplay().getContainer());\r\n\tlet inv = document.getElementById(\"menu\");\r\n\tinv.appendChild(game.getInventory().getContainer());\r\n\tlet msg = document.getElementById(\"info\");\r\n\tmsg.appendChild(game.getMessaging().getContainer());\r\n\r\n\t// Load the start screen\r\n\tgame.switchScreen(game.Screen.startScreen);\r\n}\r\n\r\n\r\n  \r\n","export class Glyph {\r\n    char: string = ' ';\r\n    foreground: [number, number, number] = [255,255,255];\r\n    background: [number, number, number] = [0,0,0];\r\n\r\n    constructor(char: string, background: [number, number, number], foreground: [number, number, number]) {\r\n        this.char = char;\r\n        this.background = background;\r\n        this.foreground = foreground;\r\n    }\r\n}","import { Entity } from \"../entity\";\r\nimport { DamageBlock } from \"../components/damageBlock\";\r\nimport { Glyph } from \"../glyph\";\r\n\r\nexport function createDamageBlock(creator: Entity, x:number, y:number, name: string, multi: number) {\r\n    let dir = creator.face;\r\n    let dmg = new DamageBlock(multi);\r\n    let attack:Entity = null;\r\n    dmg.owner = creator;\r\n    attack = new Entity(x, y, new Glyph('x', [0,0,0], [255,0,0]), name, 1, false, 0, 5, undefined, undefined, false, undefined, undefined, dmg);\r\n    attack._map = creator._map;\r\n    attack.damage.startCountDown();\r\n    attack.owner = creator;\r\n    creator._map._entities.push(attack); \r\n}","import { Entity } from \"../entity\";\r\nimport { Equipment } from \"../components/equipment\";\r\nimport { Knife } from \"../content/itens/knife\";\r\nimport { Glyph } from \"../glyph\";\r\nimport { Sword } from \"../content/itens/sword\";\r\n\r\nexport function CreateItem(monster_choice: string, x: number, y: number): Entity{\r\n    if (monster_choice == 'knife') {\r\n        let item_component = new Knife()\r\n        let monster = new Entity(x, y, new Glyph(';', [0,0,0], [204, 200, 0]), 'knife', 1, false, 5, 2, undefined, undefined, false, item_component);\r\n        return monster;\r\n    }\r\n    else if (monster_choice == 'sword') {\r\n        let item_component = new Sword()\r\n        let monster = new Entity(x, y, new Glyph('\\\\', [0,0,0], [200, 200, 0]), 'sword', 1, false, 5, 2, undefined, undefined, false, item_component);\r\n        return monster;\r\n    }\r\n    else if (monster_choice == 'spear') {\r\n        let item_component = new Knife()\r\n        let monster = new Entity(x, y, new Glyph('Î', [0,0,0], [200, 200, 0]), 'spear', 1, false, 5, 2, undefined, undefined, false, item_component);\r\n        return monster;\r\n    }\r\n    else if (monster_choice == 'dagger') {\r\n        let item_component = new Knife()\r\n        let monster = new Entity(x, y, new Glyph(';', [0,0,0], [200, 200, 0]), 'dagger', 1, false, 5, 2, undefined, undefined, false, item_component);\r\n        return monster;\r\n    }\r\n}","import { Entity } from \"../entity\";\r\nimport { Fungi } from \"../content/monsters/fungi\";\r\nimport { Orc } from \"../content/monsters/orc\";\r\nimport { Troll } from \"../content/monsters/troll\";\r\nimport { Glyph } from \"../glyph\";\r\nimport { Fighter } from \"../components/fighter\";\r\n\r\nexport function CreateMonster(monster_choice: string, x: number, y: number): Entity{\r\n    if (monster_choice == 'fungi') {\r\n        let fighter_component = new Fighter(200, 0, 4, 35)\r\n        let ai_component = new Fungi();\r\n        let monster = new Entity(x, y, new Glyph('f', [0,0,0], [0, 200, 0]), 'fungi', 1, true, 5, 2, fighter_component, ai_component);\r\n        return monster;\r\n    }\r\n    else if (monster_choice == 'orc') {\r\n        let fighter_component = new Fighter(200, 0, 4, 35)\r\n        let ai_component = new Orc();\r\n        let monster = new Entity(x, y, new Glyph('o', [0,0,0], [0, 128, 0]), 'orc', 1, true, 5, 2, fighter_component, ai_component);\r\n        return monster;\r\n    }\r\n    else if (monster_choice == 'troll') {\r\n        let fighter_component = new Fighter(30, 2, 8, 60)\r\n        let ai_component = new Troll()\r\n        let monster = new Entity(x,y, new Glyph('o', [0,0,0], [128, 0, 128]), 'troll', 1, true, 5, 2, fighter_component, ai_component);\r\n        return monster;\r\n    }\r\n    else if (monster_choice == 'wyvern') {\r\n        // fighter_component = Fighter(hp=20, defense=0, power=5, xp=40)\r\n        // ai_component = Wyvern()\r\n        // monster = Entity(x,y, 'w', libtcod.dark_violet, 0, 'wyvern', 200, blocks = True, render_order=RenderOrder.ACTOR, fighter=fighter_component, ai=ai_component)\r\n        // return monster\r\n    }\r\n    else if (monster_choice == 'ranger') {\r\n        // fighter_component = Fighter(hp=40, defense=1, power=7, xp=40)\r\n        // ai_component = Ranger()\r\n        // monster = Entity(x,y, 'r', libtcod.dark_sepia, 0, 'ranger', 200, blocks = True, render_order=RenderOrder.ACTOR, fighter=fighter_component, ai=ai_component)\r\n        // return monster\r\n    }\r\n    else if (monster_choice == 'dragon') {\r\n        // fighter_component = Fighter(hp=100, defense=5, power=16, xp=300)\r\n        // ai_component = Dragon()\r\n        // monster = Entity(x,y, 'D', libtcod.crimson, 0, 'dragao', 200, blocks = True, render_order=RenderOrder.ACTOR, fighter=fighter_component, ai=ai_component)\r\n        // return monster \r\n    }\r\n}","import { Entity } from \"../entity\";\r\nimport { Glyph } from \"../glyph\";\r\n\r\nexport function deathFunction(entity: Entity) {\r\n    if (entity.fighter != undefined) {\r\n        let deadG = new Glyph('%', [0,0,0], [139, 0, 0])\r\n        entity.glyph = deadG;\r\n        entity.blocks = false;\r\n        entity.render_order = 99;\r\n        entity.fighter.status = 'dead';\r\n    }\r\n    if (entity.damage != undefined) {\r\n        entity.damage.expire = true;\r\n    }\r\n\r\n}","import { Map } from \"../map\";\r\nimport { randint } from \"./randint\";\r\n\r\ninterface room {\r\n    x: number,\r\n    y: number,\r\n    sizex: number,\r\n    sizey: number\r\n}\r\n\r\ninterface path {\r\n    x: number,\r\n    y: number,\r\n    dir: string,\r\n    past: string\r\n}\r\n\r\nfunction ones(maxx: number, maxy: number): number[][] {\r\n    let array : number[][] = [[1]];\r\n\r\n    for (let x = 0; x < maxx; x++) {\r\n        // Create the nested array for the y values\r\n        array.push([]);\r\n        // Add all the tiles\r\n        for (let y = 0; y < maxy; y++) {\r\n            array[x].push(1);\r\n        }\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nfunction randomRoom(maxx: number, maxy: number): room {\r\n    let room : room;\r\n    let roomsizex = randint(4, 16);\r\n    while (roomsizex % 2 == 0) roomsizex-=1;\r\n    roomsizex = (roomsizex*2)-1;\r\n\r\n    let roomsizey = randint(4, 14);\r\n    while (roomsizey % 2 == 0) roomsizey-=1;\r\n    roomsizey = (roomsizey*2)-1;\r\n\r\n    let roomx = randint(5, maxx-roomsizex-1);\r\n    while (roomx % 4 != 0 ) roomx+=1;\r\n    roomx+=1;\r\n\r\n    let roomy = randint(5, maxy-roomsizey-1);\r\n    while (roomy % 4 != 0 ) roomy+=1;\r\n    roomy+=1;\r\n\r\n    room = {\r\n        x : roomx,\r\n        y : roomy,\r\n        sizex : roomsizex,\r\n        sizey : roomsizey\r\n    }\r\n    //console.log(room)\r\n    return room;\r\n}\r\n\r\nfunction digHere(here: path, map: number[][]) {\r\n    let x = here.x;\r\n    let y = here.y;\r\n    switch (here.past) {\r\n        case 'N':\r\n            if (map[x-1][y] != 0 && map[x-1][y-1] != 0 && map[x][y-1] != 0 && map[x+2][y-1] != 0 && map[x+2][y] != 0) {\r\n                map[x][y] = 0;\r\n                map[x+1][y] = 0;\r\n                map[x][y+1] = 0;\r\n                map[x+1][y+1] = 0;\r\n            } else {\r\n                //map[x][y] = 2;\r\n            }\r\n            break;\r\n        case 'S':\r\n            if (map[x-1][y] != 0 && map[x-1][y+2] != 0 && map[x][y+2] != 0 && map[x+2][y+2] != 0 && map[x+2][y] != 0) {\r\n                map[x][y] = 0;\r\n                map[x+1][y] = 0;\r\n                map[x][y+1] = 0;\r\n                map[x+1][y+1] = 0;\r\n            } else {\r\n                //map[x][y] = 2;\r\n            }\r\n            break;\r\n        case 'E':\r\n            if (map[x][y-1] != 0 && map[x+2][y-1] != 0 && map[x+2][y] != 0 && map[x+2][y+2] != 0 && map[x][y+2] != 0) {\r\n                map[x][y] = 0;\r\n                map[x+1][y] = 0;\r\n                map[x][y+1] = 0;\r\n                map[x+1][y+1] = 0;\r\n            } else {\r\n                //map[x][y] = 2;\r\n            }\r\n            break;\r\n        case 'W':\r\n            if (map[x][y-1] != 0 && map[x-1][y-1] != 0 && map[x-1][y] != 0 && map[x-1][y+2] != 0 && map[x][y+2] != 0) {\r\n                map[x][y] = 0;\r\n                map[x+1][y] = 0;\r\n                map[x][y+1] = 0;\r\n                map[x+1][y+1] = 0;\r\n            } else {\r\n                //map[x][y] = 2;\r\n            }\r\n            break;    \r\n        default:\r\n            console.log('default');\r\n            map[x][y] = 2;\r\n            break;\r\n    }\r\n    // if (map[x][y] != 0 && map[x][y] != 0 && map[x][y] != 0 && map[x][y] != 0) {\r\n    //     map[x][y] = 0;\r\n    //     map[x+1][y] = 0;\r\n    //     map[x][y+1] = 0;\r\n    //     map[x+1][y+1] = 0;\r\n    // }\r\n}\r\n\r\nfunction testDirections(here: path, map: number[][], path: path[], maxx: number, maxy: number) : path[] {\r\n    let next : path[]=[];\r\n    let nextCandidates : path[] = [];\r\n    let y = here.y;\r\n    let x = here.x;\r\n    if (y+4 < maxy)\r\n        if (map[x][y+4] == 1) {\r\n            if (map[x-1][y+3] == 1 && map[x+2][y+3] == 1) \r\n                nextCandidates.push({\r\n                    x: x,\r\n                    y: y+2,\r\n                    dir: 'S',\r\n                    past: 'S'\r\n                });\r\n        }\r\n    if (x+4 < maxx)\r\n        if (map[x+4][y] == 1) {\r\n            if (map[x+3][y-1] == 1 && map[x+3][y+2] == 1)\r\n                nextCandidates.push({\r\n                    x: x+2,\r\n                    y: y,\r\n                    dir: 'E',\r\n                    past: 'E'\r\n                });\r\n        }\r\n    if (y-3 > 0) \r\n        if (map[x][y-3] == 1) {\r\n            if (map[x-1][y-3] == 1 && map[x+2][y-3] == 1)\r\n                nextCandidates.push({\r\n                    x: x,\r\n                    y: y-2,\r\n                    dir: 'N',\r\n                    past: 'N'\r\n                });\r\n        }\r\n    if (x-3 > 0)\r\n        if (map[x-3][y] == 1) {\r\n            if (map[x-3][y+2] == 1 && map[x-3][y-1] == 1)\r\n                nextCandidates.push({\r\n                    x: x-2,\r\n                    y: y,\r\n                    dir: 'W',\r\n                    past: 'W'\r\n                });\r\n        }\r\n    if (nextCandidates.length != 0) {\r\n        if (nextCandidates.length == 1) {\r\n            next.push(nextCandidates[0]);\r\n        } else {\r\n            let selected = randint(0, nextCandidates.length-1);\r\n            let priority = (selected + 1) % nextCandidates.length;\r\n            while (priority != selected) {\r\n                next.push(nextCandidates[priority]);\r\n                priority = (priority + 1) % nextCandidates.length;\r\n                //console.log(priority);\r\n            }\r\n            next.push(nextCandidates[selected]);\r\n        }\r\n    }\r\n    return next;\r\n}\r\n\r\nfunction digFront(here: path, pathFRONT: path[], map: number[][] ) : path {\r\n    let next : path;\r\n    if (here.dir == 'N') {\r\n        next = {\r\n            x: here.x,\r\n            y: here.y-2,\r\n            dir: 'z',\r\n            past: 'N'\r\n        }\r\n    }\r\n    if (here.dir == 'E') {\r\n        next = {\r\n            x: here.x+2,\r\n            y: here.y,\r\n            dir: 'z',\r\n            past: 'E'\r\n        }\r\n    }\r\n    if (here.dir == 'S') {\r\n        next = {\r\n            x: here.x,\r\n            y: here.y+2,\r\n            dir: 'z',\r\n            past: 'S'\r\n        }\r\n    }\r\n    if (here.dir == 'W') {\r\n        next = {\r\n            x: here.x-2,\r\n            y: here.y,\r\n            dir: 'z',\r\n            past: 'W'\r\n        }\r\n    }\r\n   return next;\r\n}\r\n\r\nfunction digUp(pathGO: path[], map: number[][], maxx: number, maxy: number) {\r\n    let db = 0;\r\n    while (pathGO.length > 0) {\r\n        let here = pathGO.pop();\r\n        if (map[here.x][here.y] != 0) {\r\n            digHere(here, map);\r\n            // if (((here.x-1) % 4 == 0) && ((here.y-1) % 4 == 0)) {\r\n            //if (here.dir == 'z') {\r\n            if (((here.x-1) % 4 == 0) && ((here.y-1) % 4 == 0)) {\r\n                let nxt = testDirections(here, map, pathGO, maxx, maxy);\r\n                //console.log(nxt);\r\n                nxt.forEach(element => {\r\n                    pathGO.push(element);\r\n                });\r\n                //console.log(pathGO);\r\n            }\r\n            else {\r\n                pathGO.push(digFront(here, pathGO, map));\r\n            }\r\n            //console.log('pathGO: ' + pathGO.length.toString());\r\n            //console.log(pathGO);\r\n            db += 1;\r\n            if (db == 10000) {\r\n                const pate = pathGO;\r\n                console.log('10000')\r\n                console.log(pate);\r\n                pathGO = [];\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport function generateDunMaze(maxx: number, maxy: number): number[][] {\r\n    let map = ones(maxx, maxy);\r\n    let rooms = 400;\r\n    let roomsInGame : room[] = [];\r\n    let path: path[] = [];\r\n    \r\n    let reject = 0;\r\n    for (let i = 0; i < rooms; i++) {\r\n        let room = randomRoom(maxx, maxy);\r\n        for (let ri = room.x-1; ri <= room.x+room.sizex; ri++) {\r\n            for ( let rj = room.y-1; rj <= room.y+room.sizey; rj++) {\r\n                if (ri > maxx || rj > maxy) reject = 1;\r\n                else if (map[ri][rj] == 0) {\r\n                    ri = maxx;\r\n                    reject = 1;\r\n                }\r\n            }\r\n        }\r\n        if (reject != 1) {\r\n            roomsInGame.push(room);\r\n            for (let ri = room.x; ri <= room.x+room.sizex; ri++) {\r\n                for ( let rj = room.y; rj <= room.y+room.sizey; rj++) {\r\n                    map[ri][rj] = 0;\r\n                }\r\n            }\r\n        }\r\n        reject = 0;\r\n    }\r\n\r\n    // path.push({\r\n    //     x: 1,\r\n    //     y: 1,\r\n    //     dir: 'S',\r\n    //     past: 'S'\r\n    // })\r\n    // digUp(path, map, maxx, maxy);\r\n\r\n    for (let i = 1; i < maxx; i=i+4) {\r\n        for (let j = 1; j < maxy; j=j+4) {\r\n            if (map[i][j] == 1 && map[i+1][j] == 1 && map[i][j+1] == 1 && map[i+1][j+1] == 1) { // coordenada atual\r\n                path.push({\r\n                    x: i,\r\n                    y: j,\r\n                    dir: 'z',\r\n                    past: 'S'\r\n                })\r\n                digUp(path, map, maxx, maxy);\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    console.log(roomsInGame);\r\n    //console.log(map);\r\n    return map;\r\n}","import { randint } from \"./randint\";\r\n\r\nexport function from_dungeon_level(table: number[][], dungeon_level: number) {\r\n    for (let x = table.length-1; x > -1; x--) {\r\n        if (dungeon_level >= table[x][1]) return table[x][0]\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function random_choice_index(chances: number[]) {\r\n    let sum = chances.reduce((a, b) => a + b, 0);\r\n    let random_chance = randint(0, sum)\r\n    let running_sum = 0\r\n    let choice = 0\r\n    for (const n of chances) {\r\n        running_sum += n;\r\n        if (random_chance <= running_sum) return choice;\r\n        choice += 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function random_choice_from_dict(choice_dict: any) {\r\n    let chances = [];\r\n    let choices = [];\r\n    for (let key in choice_dict) {\r\n        choices.push(key);\r\n        chances.push(choice_dict[key]);\r\n    }\r\n\r\n    return choices[random_choice_index(chances)]\r\n\r\n}","export function randint(floor : number, ceil:number): number {\r\n    let t = (Math.random() * (ceil-floor+1)) + floor-0.5;\r\n    return Math.round(t);\r\n}\r\n","import { Tile } from \"./tiles\"\r\nimport { Glyph } from \"./glyph\";\r\nimport { Entity } from \"./entity\";\r\nimport { from_dungeon_level, random_choice_from_dict } from \"./helper/randFromLevel\";\r\nimport { randint } from \"./helper/randint\";\r\nimport { CreateMonster } from \"./helper/createMonters\"\r\nimport { Color, FOV, Display } from \"../lib\";\r\nimport { Messagelog } from \"./messages\";\r\nimport { CreateItem } from \"./helper/createItens\";\r\n\r\nexport class Map {\r\n    _display: Display;\r\n    messageLog: Messagelog;\r\n    _width: number;\r\n    _height: number;\r\n    dungeon_level: number;\r\n    _entities: Entity[];\r\n    _tiles: Tile[][];\r\n    _fov: any[];\r\n\r\n    constructor(width : number, height : number) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._tiles = [];\r\n        this.dungeon_level = 1;\r\n        this._entities = [];\r\n    }\r\n\r\n    getTile(x: number, y: number) {\r\n        let emptyTile = new Tile('Empty', ' ', [0,0,0], [255,255,255], false, false);\r\n        if (x < 0 || x >= this._width || y < 0 || y >= this._height) {\r\n            return emptyTile;\r\n        } else {\r\n            return this._tiles[x][y] || emptyTile;\r\n        }\r\n    }\r\n\r\n    getMovableArea(x: number, x2: number, y:number, y2: number): boolean {\r\n        let moveable = true;\r\n        for (let i = x; i <= x2; i++) {\r\n            for (let j = y; j <= y2; j++) {\r\n                if (!this.getTile(i,j)._isWalkable) {\r\n                    moveable = false;\r\n                }\r\n            }\r\n        }\r\n        return moveable;\r\n    }\r\n\r\n    getEntitiesAt(x: number, x2: number, y:number, y2: number): Entity[] {\r\n        let targets: Entity[] = [];\r\n        for (let index = 0; index < this._entities.length; index++) {\r\n            for (let i = x; i <= x2; i++) {\r\n                for (let j = y; j <= y2; j++) {\r\n                    if (this._entities[index].x == i && this._entities[index].y == j && this._entities[index].blocks == true) {\r\n                        targets.push(this._entities[index]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return targets;\r\n    }\r\n\r\n    getItemAt(x: number, x2: number, y:number, y2: number): Entity[] {\r\n        let targets: Entity[] = [];\r\n        for (let index = 0; index < this._entities.length; index++) {\r\n            for (let i = x; i <= x2; i++) {\r\n                for (let j = y; j <= y2; j++) {\r\n                    if (this._entities[index].x == i && this._entities[index].y == j && this._entities[index].item != undefined) {\r\n                        targets.push(this._entities[index]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return targets;\r\n    }\r\n\r\n    getPlayer(): Entity {\r\n        let player: Entity;\r\n        for (let index = 0; index < this._entities.length; index++) {\r\n            if (this._entities[index].glyph.char == '@') player = this._entities[index];\r\n        }\r\n        return player;\r\n    }\r\n\r\n    addEntityToMap(): void {\r\n        let max_monsters_per_room = from_dungeon_level([[20, 1], [3, 4], [5, 6]], this.dungeon_level)\r\n        let max_items_per_room = from_dungeon_level([[1, 1], [2, 4]], this.dungeon_level)\r\n\r\n        let number_of_monsters = randint(0, max_monsters_per_room)\r\n        let number_of_items = randint(0, max_items_per_room);\r\n        \r\n        let monster_chances = {\r\n            'fungi': from_dungeon_level([[200, 1]], this.dungeon_level),\r\n            'orc': from_dungeon_level([[200, 1], [60, 3], [40, 7]], this.dungeon_level),\r\n            'troll': from_dungeon_level([[50, 1], [10, 3], [30, 5], [60, 7]], this.dungeon_level),\r\n            'wyvern': from_dungeon_level([[1, 1], [50, 2], [50, 5]], this.dungeon_level),\r\n            'dragon': from_dungeon_level([[1, 1], [10, 3], [20, 7]], this.dungeon_level),\r\n            'ranger': from_dungeon_level([[1, 1]], this.dungeon_level)\r\n        }\r\n        console.log('monster chances');\r\n        console.log(monster_chances);\r\n\r\n        let item_chances = {\r\n            //'healing_potion': 35,\r\n            'knife': from_dungeon_level([[10, 1]], this.dungeon_level),\r\n            'dagger': from_dungeon_level([[10, 1]], this.dungeon_level),\r\n            'sword': from_dungeon_level([[500, 0], [10, 2]], this.dungeon_level),\r\n            'spear': from_dungeon_level([[5, 1], [10, 3]], this.dungeon_level)\r\n            //'shield': from_dungeon_level([[5, 0]], this.dungeon_level)\r\n        }\r\n\r\n        for (let index = 0; index < number_of_monsters; index++) {\r\n            let x = randint(0, this._width - 1)\r\n            let y = randint(0, this._height - 1)\r\n            let emptyspace = true;\r\n            for (let index = 0; index < this._entities.length; index++) {\r\n                if (this._entities[index].x == x && this._entities[index].y == y) {\r\n                    emptyspace = false;\r\n                }\r\n\r\n            }\r\n\r\n            if (this.getTile(x, y)._isWalkable == false) {\r\n                emptyspace = false;\r\n            }\r\n\r\n            if (emptyspace == true) {\r\n                let monster_choice = random_choice_from_dict(monster_chances);\r\n                let q = CreateMonster(monster_choice, x, y);\r\n                q._map = this;\r\n                this._entities.push(q);\r\n            } else {\r\n                index -= 1;\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < number_of_items; index++) {\r\n            let x = randint(0, this._width - 1)\r\n            let y = randint(0, this._height - 1)\r\n            let emptyspace = true;\r\n            for (let index = 0; index < this._entities.length; index++) {\r\n                if (this._entities[index].x == x && this._entities[index].y == y) {\r\n                    emptyspace = false;\r\n                }\r\n\r\n            }\r\n\r\n            if (this.getTile(x, y)._isWalkable == false) {\r\n                emptyspace = false;\r\n            }\r\n\r\n            if (emptyspace == true) {\r\n                let item_choice = random_choice_from_dict(item_chances);\r\n                let q = CreateItem(item_choice, 61, 45);\r\n                console.log(item_choice + '- '+ x + ' ' + y);\r\n                q._map = this;\r\n                this._entities.push(q);\r\n            } else {\r\n                index -= 1;\r\n            }\r\n        }\r\n\r\n\r\n        return null;\r\n    }\r\n\r\n    lightPasses(x: number,y: number) {\r\n        return this._tiles[x][y]._blocksLight;\r\n    }\r\n\r\n\r\n    setupFov(topleftX: number, topleftY: number) {\r\n        \r\n        let fov = new FOV.PreciseShadowcasting((x,y): boolean => {\r\n            // x = x <= 0 ? this._entities[0].sight+1 : x >= this._width ? this._width-this._entities[0].sight-1 : x;\r\n            // y = y <= 0 ? this._entities[0].sight+1 : y >= this._height ? this._height-this._entities[0].sight-1 : y;\r\n            if ( x >= this._width) x = this._width-1;\r\n            if ( x <= 0) x = 0;\r\n            if ( y >= this._height) y = this._height-1;\r\n            if ( y <= 0) y = 0;\r\n            return !this._tiles[x][y]._blocksLight;\r\n        });\r\n\r\n        fov.compute(this._entities[0].x, this._entities[0].y, this._entities[0].sight, (x, y, r, visibility) => {\r\n            let dx = Math.pow(this._entities[0].x - x, 2);\r\n            let dy = Math.pow(this._entities[0].y - y, 2);\r\n            let dist = Math.sqrt(dx+dy);\r\n            if (x < 0 || x >= this._width || y < 0 || y >= this._height) {\r\n                return;\r\n            }\r\n            if (visibility == 0 ) {\r\n                this._tiles[x][y].visibility = visibility;\r\n            } else {\r\n                let fogRGB = this._tiles[x][y].baseTile.foreground;\r\n                let perc = visibility + 0.1\r\n                this._tiles[x][y].visibility = visibility;\r\n                if (dist <= this._entities[0].sight-2) {\r\n                    if (dist <= this._entities[0].sight/2) this._tiles[x][y].visited = true;\r\n                    perc = 1-((dist)/this._entities[0].sight)+0.2;\r\n                    \r\n                    this._tiles[x][y].tile.foreground = [Math.floor(fogRGB[0]*perc), Math.floor(fogRGB[1]*perc), Math.floor(fogRGB[2]*perc)];\r\n                }\r\n                else {\r\n                    this._tiles[x][y].tile.foreground = [Math.floor(fogRGB[0]*0.2), Math.floor(fogRGB[1]*0.2), Math.floor(fogRGB[2]*0.2)];\r\n                }\r\n                \r\n                this._display.draw(x - topleftX, y - topleftY, this._tiles[x][y].tile.char, Color.toRGB(this._tiles[x][y].tile.foreground), Color.toRGB([0,0,0]));\r\n            }\r\n\r\n        })\r\n        //this._fov.push(new FOV.DiscreteShadowcasting(this.lightPasses(x,y)) ) \r\n    }\r\n\r\n    getFov() {\r\n        return this._fov;\r\n    }\r\n}\r\n\r\n\r\n","import { MessageType } from \"./helper/messageType\";\r\n\r\nexport class Messagelog {\r\n    messages: MessageType[];\r\n    x: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(x: number, width: number, height: number) {\r\n        this.messages = [];\r\n        this.x = x;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    addMessage(message: MessageType) {\r\n        if (this.messages.length == this.height) {\r\n            this.messages.shift();\r\n        }\r\n        this.messages.push(message);\r\n    }\r\n}","import { Game } from \"./game\"\r\nimport { Map } from \"./map\"\r\nimport { KEYS } from \"../lib/constants\"\r\nimport * as Color from \"../lib/color\"\r\nimport { Tile } from \"./tiles\";\r\nimport * as maps from \"../lib/map\"\r\nimport { Glyph } from \"./glyph\";\r\nimport { Entity } from \"./entity\";\r\nimport { Fungi } from \"./content/monsters/fungi\";\r\nimport { randint } from \"./helper/randint\";\r\nimport { Fighter } from \"./components/fighter\";\r\nimport { Knife } from \"./content/itens/knife\";\r\nimport { Display } from \"../lib\";\r\nimport { generateDunMaze } from \"./helper/dungeonMaze\";\r\n\r\nexport function startScreen() {\r\n    //Game.Screen.startScreen = {\r\n    return {\r\n        enter : () => {\r\n            console.log('enter');\r\n        },\r\n        exit : () => { \r\n            console.log(\"Exited start screen.\"); \r\n        },\r\n        render : (display : any, game: Game) => {\r\n            let y = 8;\r\n            for (const line of game.logo) {\r\n                display.drawText(20,y, line);\r\n                y+=1;\r\n            }\r\n\r\n             // Render our prompt to the screen\r\n            display.drawText((game._screenWidth/2)+6,game._screenHeight-5, \"%c{yellow}tfw no rl1\");\r\n            display.drawText((game._screenWidth/2),game._screenHeight-3, \"Press [Enter] to start\");\r\n        },\r\n        handleInput : (inputType : any, inputData : any, game : Game) => {\r\n            // When [Enter] is pressed, go to the play screen\r\n            if (inputType === \"keydown\") {\r\n                if (inputData.keyCode === KEYS.VK_RETURN) {\r\n                    game.switchScreen(game.Screen.playScreen);\r\n                }\r\n                if (inputData.keyCode === KEYS.VK_BACK_SPACE) {\r\n                    game.switchScreen(game.Screen.debugScreen);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function debugScreen() {\r\n    return {\r\n        enter : (game : Game) => {\r\n            let mapWidth = 120;\r\n            let mapHeight = 88;\r\n            game._map = new Map(mapWidth, mapHeight);\r\n            let emptyTile = new Tile('Empty', ' ', [0,0,0], [255,255,255], true, false, false);\r\n            console.log(\"Entered debug screen.\");\r\n            for (let x = 0; x < mapWidth; x++) {\r\n                // Create the nested array for the y values\r\n                game._map._tiles.push([]);\r\n                // Add all the tiles\r\n                for (let y = 0; y < mapHeight; y++) {\r\n                    game._map._tiles[x].push(emptyTile);\r\n                }\r\n            }\r\n\r\n            let generator = generateDunMaze(mapWidth, mapHeight);\r\n\r\n            for (let x = 0; x < mapWidth; x++) {\r\n                for (let y = 0; y < mapHeight; y++) {\r\n                    // if (generator[x][y] == 1) {\r\n                    //     game._map._tiles[x][y] = new Tile('Wall', '#', [0,0,0], [218, 165, 32], true, true, false); // false, true, true\r\n                    // } else {\r\n                    //     game._map._tiles[x][y] = new Tile('Floor', '.', [0,0,0] , [84, 54, 11], true, false); //floor\r\n                    // }\r\n                    if (generator[x][y] == 1) {\r\n                        game._map._tiles[x][y] = new Tile('Wall', '▒', [0,0,0], [218, 165, 32], true, true, false); // false, true, true\r\n                    } \r\n                    if (generator[x][y] == 0) {\r\n                        game._map._tiles[x][y] = new Tile('Floor', '·', [0,0,0] , [84, 54, 11], true, false); //floor\r\n                    }\r\n                    if (generator[x][y] == 2) {\r\n                        game._map._tiles[x][y] = new Tile('Floor', 'E', [0,0,0] , [200, 0, 0], true, false); //floor\r\n                    }\r\n                }\r\n            }\r\n            //game._map._tiles[0][0] = new Tile('Floor', 'X', [0,0,0] , [200, 0, 200], true, false);\r\n            // Sync map and game variables\r\n            game._map._entities = [];\r\n\r\n            // debug stuff\r\n            let knife = new Knife();\r\n            knife.owner = game._player;\r\n            game._player.equipment = knife;\r\n            game._map._entities.push(game._player); //player always [0]\r\n            game._player._map = game._map;  \r\n            game._map._display = game._display;\r\n            game._map.messageLog = game.messageLog;\r\n\r\n            \r\n            //let ai_component = new Fungi();\r\n            //let fighter_component = new Fighter(20, 0, 3, 35);\r\n            //let monster = new Entity(60, 47, new Glyph('f', 'black', '#0000aa'), 'fungi', 1, true, 2, 2, fighter_component, ai_component, false);\r\n            //monster._map = game._map;\r\n            //game._map._entities.push(monster);\r\n\r\n            //let knifeItem = new Entity()\r\n\r\n            game.timer = true;\r\n            game.startCountDown();\r\n            game._map.addEntityToMap();\r\n            \r\n            game._entities = game._map._entities;\r\n\r\n        },\r\n        exit : () => { console.log(\"Exited play screen.\"); \r\n        },\r\n        render : (display : Display, game: Game) => {\r\n            let screenWidth = game._screenWidth;\r\n            let screenHeight = game._screenHeight;\r\n            let player = game._player;\r\n            // Make sure the x-axis doesn't go to the left of the left bound\r\n            let topLeftX = Math.max(0, player.x - (screenWidth / 2));\r\n            // Make sure we still have enough space to fit an entire game screen\r\n            topLeftX = Math.min(topLeftX, game._map._width - screenWidth);\r\n            // Make sure the y-axis doesn't above the top bound\r\n            let topLeftY = Math.max(0, player.y - (screenHeight / 2));\r\n            // Make sure we still have enough space to fit an entire game screen\r\n            topLeftY = Math.min(topLeftY, game._map._height - screenHeight);\r\n            for (let x = topLeftX; x < topLeftX + screenWidth; x++) {\r\n                for (let y = topLeftY; y < topLeftY + screenHeight; y++) {\r\n                    // Fetch the glyph for the tile and render it to the screen\r\n                    let cell = game._map.getTile(x, y) as Tile;\r\n                    //cell.visited ?\r\n                    display.draw(\r\n                        x - topLeftX, \r\n                        y - topLeftY,\r\n                        cell.visitedTile.char, \r\n                        Color.toRGB(cell.tile.foreground), \r\n                        Color.toRGB(cell.tile.background)) //:\r\n                    /* display.draw(\r\n                        x - topLeftX, \r\n                        y - topLeftY,\r\n                        ' ', \r\n                        Color.toRGB([0,0,0]), \r\n                        Color.toRGB([0,0,0]));*/\r\n                    \r\n                }\r\n            }\r\n            //game._map.setupFov(topLeftX, topLeftY);\r\n            removeExpiredDamage(game._entities)\r\n            game._map._entities = entityRenderSort(game);\r\n            game._entities = game._map._entities;\r\n            for (let i = game._entities.length-1; i >= 0; i--) {\r\n                //console.log(game._entities[i]); \r\n                let cell = game._map.getTile(game._entities[i].x, game._entities[i].y) as Tile;\r\n                if (cell.visibility != 0) { // 0\r\n                    let dx = Math.pow(game._entities[0].x - game._entities[i].x, 2);\r\n                    let dy = Math.pow(game._entities[0].y - game._entities[i].y, 2);\r\n                    let dist = Math.sqrt(dx+dy);\r\n                    if (dist == 0 || dist <= game._entities[0].sight) {\r\n                        display.draw(\r\n                            game._entities[i].x - topLeftX,\r\n                            game._entities[i].y - topLeftY,\r\n                            game._entities[i].glyph.char,\r\n                            Color.toRGB(game._entities[i].glyph.foreground),\r\n                            Color.toRGB(game._entities[i].glyph.background)\r\n                            );\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        handleInput : (inputType : any, inputData : any, game : Game) => {\r\n            if (inputType === 'keydown') {\r\n                switch (inputData.keyCode) {\r\n                    case KEYS.VK_RETURN:\r\n                        //game.switchScreen(game.Screen.winScreen);\r\n                        let gnd = game._map.getItemAt(game._entities[0].x, game._entities[0].x2, game._entities[0].y, game._entities[0].y2);\r\n                        console.log(gnd);\r\n                        if (gnd.length > 0) {\r\n                            game._entities[0].equip(gnd[0]);\r\n                        } else {\r\n                        }\r\n                        break;\r\n                    case KEYS.VK_ESCAPE:\r\n                        //game.switchScreen(game.Screen.loseScreen);\r\n                        game.timer = false;\r\n                        break;\r\n                    case KEYS.VK_SPACE:\r\n                        if (game._entities[0].equipment != undefined) {\r\n                            game._entities[0].equipment.strike();\r\n                        }\r\n                        break;\r\n                    case KEYS.VK_LEFT:\r\n                        game._entities[0].move(-1, 0, game._map);\r\n                        break;\r\n                    case KEYS.VK_DOWN:\r\n                        game._entities[0].move(0, 1, game._map);\r\n                        break;\r\n                    case KEYS.VK_UP:\r\n                        game._entities[0].move(0, -1, game._map);\r\n                        break;\r\n                    case KEYS.VK_RIGHT:\r\n                        game._entities[0].move(1, 0, game._map);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if (inputType === 'click') {\r\n                let xx = randint(-5, 5);\r\n                let yy = randint(-5, 5);\r\n                game._entities[0].move(xx, yy, game._map);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function playScreen() {\r\n    return {\r\n        enter : (game : Game) => {\r\n            let mapWidth = 120;\r\n            let mapHeight = 90;\r\n            game._map = new Map(mapWidth, mapHeight);\r\n            let emptyTile = new Tile('Empty', ' ', [0,0,0], [255,255,255], true, false, false);\r\n            console.log(\"Entered play screen.\");\r\n            for (let x = 0; x < mapWidth; x++) {\r\n                // Create the nested array for the y values\r\n                game._map._tiles.push([]);\r\n                // Add all the tiles\r\n                for (let y = 0; y < mapHeight; y++) {\r\n                    game._map._tiles[x].push(emptyTile);\r\n                }\r\n            }\r\n\r\n            let generator = new maps.default.Cellular(mapWidth, mapHeight);\r\n            generator.randomize(0.66);\r\n            let totalIterations = 3;\r\n            // Iteratively smoothen the map\r\n            for (let i = 0; i < totalIterations - 1; i++) {\r\n                generator.create();\r\n            }\r\n            // Smoothen it one last time and then update our map\r\n            generator.create((x,y,v) => {\r\n                if (v === 1 || x == 0 || y == 0 || x == mapWidth-1 || x == mapHeight-1) {\r\n                    game._map._tiles[x][y] = new Tile('Floor', '.', [0,0,0] , [84, 54, 11], true, false); //floor\r\n                } else {\r\n                    game._map._tiles[x][y] = new Tile('Wall', '#', [0,0,0], [218, 165, 32], false, true, true);\r\n                }\r\n            });\r\n            // Sync map and game variables\r\n            game._map._entities = [];\r\n\r\n            // debug stuff\r\n            let knife = new Knife();\r\n            knife.owner = game._player;\r\n            game._player.equipment = knife;\r\n            game._map._entities.push(game._player); //player always [0]\r\n            game._player._map = game._map;  \r\n            game._map._display = game._display;\r\n            game._map.messageLog = game.messageLog;\r\n\r\n            \r\n            //let ai_component = new Fungi();\r\n            //let fighter_component = new Fighter(20, 0, 3, 35);\r\n            //let monster = new Entity(60, 47, new Glyph('f', 'black', '#0000aa'), 'fungi', 1, true, 2, 2, fighter_component, ai_component, false);\r\n            //monster._map = game._map;\r\n            //game._map._entities.push(monster);\r\n\r\n            //let knifeItem = new Entity()\r\n\r\n            game.timer = true;\r\n            game.startCountDown();\r\n            game._map.addEntityToMap();\r\n            \r\n            game._entities = game._map._entities;\r\n\r\n        },\r\n        exit : () => { console.log(\"Exited play screen.\"); \r\n        },\r\n        render : (display : Display, game: Game) => {\r\n            let screenWidth = game._screenWidth;\r\n            let screenHeight = game._screenHeight;\r\n            let player = game._player;\r\n            // Make sure the x-axis doesn't go to the left of the left bound\r\n            let topLeftX = Math.max(0, player.x - (screenWidth / 2));\r\n            // Make sure we still have enough space to fit an entire game screen\r\n            topLeftX = Math.min(topLeftX, game._map._width - screenWidth);\r\n            // Make sure the y-axis doesn't above the top bound\r\n            let topLeftY = Math.max(0, player.y - (screenHeight / 2));\r\n            // Make sure we still have enough space to fit an entire game screen\r\n            topLeftY = Math.min(topLeftY, game._map._height - screenHeight);\r\n            for (let x = topLeftX; x < topLeftX + screenWidth; x++) {\r\n                for (let y = topLeftY; y < topLeftY + screenHeight; y++) {\r\n                    // Fetch the glyph for the tile and render it to the screen\r\n                    let cell = game._map.getTile(x, y) as Tile;\r\n                    cell.visited ?\r\n                    display.draw(\r\n                        x - topLeftX, \r\n                        y - topLeftY,\r\n                        cell.visitedTile.char, \r\n                        Color.toRGB(cell.visitedTile.foreground), \r\n                        Color.toRGB(cell.visitedTile.background)) :\r\n                    display.draw(\r\n                        x - topLeftX, \r\n                        y - topLeftY,\r\n                        ' ', \r\n                        Color.toRGB([0,0,0]), \r\n                        Color.toRGB([0,0,0]));\r\n                    \r\n                }\r\n            }\r\n            game._map.setupFov(topLeftX, topLeftY);\r\n            removeExpiredDamage(game._entities)\r\n            game._map._entities = entityRenderSort(game);\r\n            game._entities = game._map._entities;\r\n            for (let i = game._entities.length-1; i >= 0; i--) {\r\n                //console.log(game._entities[i]); \r\n                let cell = game._map.getTile(game._entities[i].x, game._entities[i].y) as Tile;\r\n                if (cell.visibility > 0) {\r\n                    let dx = Math.pow(game._entities[0].x - game._entities[i].x, 2);\r\n                    let dy = Math.pow(game._entities[0].y - game._entities[i].y, 2);\r\n                    let dist = Math.sqrt(dx+dy);\r\n                    if (dist == 0 || dist <= game._entities[0].sight) {\r\n                        display.draw(\r\n                            game._entities[i].x - topLeftX,\r\n                            game._entities[i].y - topLeftY,\r\n                            game._entities[i].glyph.char,\r\n                            Color.toRGB(game._entities[i].glyph.foreground),\r\n                            Color.toRGB(game._entities[i].glyph.background)\r\n                            );\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        handleInput : (inputType : any, inputData : any, game : Game) => {\r\n            if (inputType === 'keydown') {\r\n                switch (inputData.keyCode) {\r\n                    case KEYS.VK_RETURN:\r\n                        //game.switchScreen(game.Screen.winScreen);\r\n                        let gnd = game._map.getItemAt(game._entities[0].x, game._entities[0].x2, game._entities[0].y, game._entities[0].y2);\r\n                        console.log(gnd);\r\n                        if (gnd.length > 0) {\r\n                            game._entities[0].equip(gnd[0]);\r\n                        } else {\r\n                        }\r\n                        break;\r\n                    case KEYS.VK_ESCAPE:\r\n                        //game.switchScreen(game.Screen.loseScreen);\r\n                        game.timer = false;\r\n                        break;\r\n                    case KEYS.VK_SPACE:\r\n                        if (game._entities[0].equipment != undefined) {\r\n                            game._entities[0].equipment.strike();\r\n                        }\r\n                        break;\r\n                    case KEYS.VK_LEFT:\r\n                        game._entities[0].move(-1, 0, game._map);\r\n                        break;\r\n                    case KEYS.VK_DOWN:\r\n                        game._entities[0].move(0, 1, game._map);\r\n                        break;\r\n                    case KEYS.VK_UP:\r\n                        game._entities[0].move(0, -1, game._map);\r\n                        break;\r\n                    case KEYS.VK_RIGHT:\r\n                        game._entities[0].move(1, 0, game._map);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if (inputType === 'click') {\r\n                let xx = randint(-5, 5);\r\n                let yy = randint(-5, 5);\r\n                game._entities[0].move(xx, yy, game._map);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function winScreen() {\r\n    return {\r\n        enter : () => {    \r\n            console.log(\"Entered win screen.\"); \r\n        },\r\n        exit : () => { \r\n            console.log(\"Exited win screen.\"); \r\n        },\r\n        render : (display: any) => {\r\n            // Render our prompt to the screen\r\n            for (var i = 0; i < 22; i++) {\r\n                // Generate random background colors\r\n                var r = Math.round(Math.random() * 255);\r\n                var g = Math.round(Math.random() * 255);\r\n                var b = Math.round(Math.random() * 255);\r\n                var background = Color.toRGB([r, g, b]);\r\n                display.drawText(2, i + 1, \"%b{\" + background + \"}You win!\");\r\n            }\r\n        },\r\n        handleInput : (inputType: any, inputData: any) => {\r\n            // Nothing to do here      \r\n        }\r\n    }\r\n}\r\n\r\n// Define our winning screen\r\nexport function loseScreen() {\r\n    return {\r\n        enter : () => {    console.log(\"Entered lose screen.\"); },\r\n        exit : () => { console.log(\"Exited lose screen.\"); },\r\n        render : (display: any) => {\r\n            // Render our prompt to the screen\r\n            for (var i = 0; i < 22; i++) {\r\n                display.drawText(2, i + 1, \"%b{red}You lose! :(\");\r\n            }\r\n        },\r\n        handleInput : (inputType: any, inputData: any) => {\r\n            // Nothing to do here      \r\n        }\r\n    }\r\n}\r\n\r\nexport function entityRenderSort(game: Game ) {\r\n    return game._entities.sort(function (a: Entity, b: Entity) {\r\n        if(a.render_order == b.render_order) return 0;\r\n        if (a.render_order == 1) return -1;\r\n        if (b.render_order == 1) return 1;\r\n      \r\n        if (a.render_order < b.render_order)\r\n            return -1;\r\n        if (a.render_order > b.render_order)\r\n            return 1;\r\n        return 0;\r\n      });\r\n}\r\n\r\nexport function removeExpiredDamage(entities: Entity[]) {\r\n    for (let i = 0; i < entities.length; i++) {\r\n        if (entities[i].damage != undefined) {\r\n            if (entities[i].damage.expire) {\r\n                entities.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        if (entities[i].item != undefined) {\r\n            if (entities[i].item.expire) {\r\n                entities.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Glyph } from \"./glyph\"\r\nimport { Color } from \"../lib\";\r\n\r\nexport class Tile {\r\n    tile: Glyph;\r\n    baseTile: Glyph;\r\n    visitedTile: Glyph;\r\n    visibility: number = 0;\r\n    visited: boolean = false;\r\n    _isWalkable: boolean = false;\r\n    _isDiggable: boolean = false;\r\n    _blocksLight: boolean = false;\r\n    name: string;\r\n\r\n    constructor(name: string, char: string=' ', background: [number,number,number]=[0,0,0], foreground: [number,number,number]=[255,255,255], walkable: boolean=false, diggable: boolean=false, blockslight: boolean=false) {\r\n        this.name = name;\r\n        this._isDiggable = diggable;\r\n        this._isWalkable = walkable;\r\n        this._blocksLight = blockslight;\r\n        this.tile = new Glyph(char, background, foreground);\r\n        this.baseTile = new Glyph(char, background, foreground);\r\n        this.visitedTile = new Glyph(char, background, foreground);\r\n        let fogRGB = this.tile.foreground;\r\n        this.visitedTile.foreground = [Math.floor(fogRGB[0]*0.2), Math.floor(fogRGB[1]*0.2), Math.floor(fogRGB[2]*0.2)];\r\n    }\r\n}"],"sourceRoot":""}